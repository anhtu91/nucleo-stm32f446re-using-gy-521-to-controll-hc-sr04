
nucleo-f446re-sensor-gy-521.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009244  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f0  08009418  08009418  00019418  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009708  08009708  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08009708  08009708  00019708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009710  08009710  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009710  08009710  00019710  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009714  08009714  00019714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08009718  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  200001dc  080098f4  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000304  080098f4  00020304  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000de23  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d5a  00000000  00000000  0002e02f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000eb0  00000000  00000000  0002fd90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000dd8  00000000  00000000  00030c40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000218b2  00000000  00000000  00031a18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ac21  00000000  00000000  000532ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d1bd0  00000000  00000000  0005deeb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012fabb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bfc  00000000  00000000  0012fb38  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080093fc 	.word	0x080093fc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	080093fc 	.word	0x080093fc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cdc:	f000 b972 	b.w	8000fc4 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9e08      	ldr	r6, [sp, #32]
 8000cfe:	4604      	mov	r4, r0
 8000d00:	4688      	mov	r8, r1
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d14b      	bne.n	8000d9e <__udivmoddi4+0xa6>
 8000d06:	428a      	cmp	r2, r1
 8000d08:	4615      	mov	r5, r2
 8000d0a:	d967      	bls.n	8000ddc <__udivmoddi4+0xe4>
 8000d0c:	fab2 f282 	clz	r2, r2
 8000d10:	b14a      	cbz	r2, 8000d26 <__udivmoddi4+0x2e>
 8000d12:	f1c2 0720 	rsb	r7, r2, #32
 8000d16:	fa01 f302 	lsl.w	r3, r1, r2
 8000d1a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d1e:	4095      	lsls	r5, r2
 8000d20:	ea47 0803 	orr.w	r8, r7, r3
 8000d24:	4094      	lsls	r4, r2
 8000d26:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d2a:	0c23      	lsrs	r3, r4, #16
 8000d2c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d30:	fa1f fc85 	uxth.w	ip, r5
 8000d34:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d38:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d3c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d40:	4299      	cmp	r1, r3
 8000d42:	d909      	bls.n	8000d58 <__udivmoddi4+0x60>
 8000d44:	18eb      	adds	r3, r5, r3
 8000d46:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000d4a:	f080 811b 	bcs.w	8000f84 <__udivmoddi4+0x28c>
 8000d4e:	4299      	cmp	r1, r3
 8000d50:	f240 8118 	bls.w	8000f84 <__udivmoddi4+0x28c>
 8000d54:	3f02      	subs	r7, #2
 8000d56:	442b      	add	r3, r5
 8000d58:	1a5b      	subs	r3, r3, r1
 8000d5a:	b2a4      	uxth	r4, r4
 8000d5c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d60:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d68:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d6c:	45a4      	cmp	ip, r4
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x8c>
 8000d70:	192c      	adds	r4, r5, r4
 8000d72:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d76:	f080 8107 	bcs.w	8000f88 <__udivmoddi4+0x290>
 8000d7a:	45a4      	cmp	ip, r4
 8000d7c:	f240 8104 	bls.w	8000f88 <__udivmoddi4+0x290>
 8000d80:	3802      	subs	r0, #2
 8000d82:	442c      	add	r4, r5
 8000d84:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d88:	eba4 040c 	sub.w	r4, r4, ip
 8000d8c:	2700      	movs	r7, #0
 8000d8e:	b11e      	cbz	r6, 8000d98 <__udivmoddi4+0xa0>
 8000d90:	40d4      	lsrs	r4, r2
 8000d92:	2300      	movs	r3, #0
 8000d94:	e9c6 4300 	strd	r4, r3, [r6]
 8000d98:	4639      	mov	r1, r7
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0xbe>
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	f000 80eb 	beq.w	8000f7e <__udivmoddi4+0x286>
 8000da8:	2700      	movs	r7, #0
 8000daa:	e9c6 0100 	strd	r0, r1, [r6]
 8000dae:	4638      	mov	r0, r7
 8000db0:	4639      	mov	r1, r7
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f783 	clz	r7, r3
 8000dba:	2f00      	cmp	r7, #0
 8000dbc:	d147      	bne.n	8000e4e <__udivmoddi4+0x156>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0xd0>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80fa 	bhi.w	8000fbc <__udivmoddi4+0x2c4>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0303 	sbc.w	r3, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	4698      	mov	r8, r3
 8000dd2:	2e00      	cmp	r6, #0
 8000dd4:	d0e0      	beq.n	8000d98 <__udivmoddi4+0xa0>
 8000dd6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dda:	e7dd      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000ddc:	b902      	cbnz	r2, 8000de0 <__udivmoddi4+0xe8>
 8000dde:	deff      	udf	#255	; 0xff
 8000de0:	fab2 f282 	clz	r2, r2
 8000de4:	2a00      	cmp	r2, #0
 8000de6:	f040 808f 	bne.w	8000f08 <__udivmoddi4+0x210>
 8000dea:	1b49      	subs	r1, r1, r5
 8000dec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000df0:	fa1f f885 	uxth.w	r8, r5
 8000df4:	2701      	movs	r7, #1
 8000df6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dfa:	0c23      	lsrs	r3, r4, #16
 8000dfc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb08 f10c 	mul.w	r1, r8, ip
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	d907      	bls.n	8000e1c <__udivmoddi4+0x124>
 8000e0c:	18eb      	adds	r3, r5, r3
 8000e0e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0x122>
 8000e14:	4299      	cmp	r1, r3
 8000e16:	f200 80cd 	bhi.w	8000fb4 <__udivmoddi4+0x2bc>
 8000e1a:	4684      	mov	ip, r0
 8000e1c:	1a59      	subs	r1, r3, r1
 8000e1e:	b2a3      	uxth	r3, r4
 8000e20:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e24:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e28:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e2c:	fb08 f800 	mul.w	r8, r8, r0
 8000e30:	45a0      	cmp	r8, r4
 8000e32:	d907      	bls.n	8000e44 <__udivmoddi4+0x14c>
 8000e34:	192c      	adds	r4, r5, r4
 8000e36:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e3a:	d202      	bcs.n	8000e42 <__udivmoddi4+0x14a>
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	f200 80b6 	bhi.w	8000fae <__udivmoddi4+0x2b6>
 8000e42:	4618      	mov	r0, r3
 8000e44:	eba4 0408 	sub.w	r4, r4, r8
 8000e48:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e4c:	e79f      	b.n	8000d8e <__udivmoddi4+0x96>
 8000e4e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e52:	40bb      	lsls	r3, r7
 8000e54:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e58:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e5c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e60:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e64:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e68:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e6c:	4325      	orrs	r5, r4
 8000e6e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e72:	0c2c      	lsrs	r4, r5, #16
 8000e74:	fb08 3319 	mls	r3, r8, r9, r3
 8000e78:	fa1f fa8e 	uxth.w	sl, lr
 8000e7c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e80:	fb09 f40a 	mul.w	r4, r9, sl
 8000e84:	429c      	cmp	r4, r3
 8000e86:	fa02 f207 	lsl.w	r2, r2, r7
 8000e8a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e8e:	d90b      	bls.n	8000ea8 <__udivmoddi4+0x1b0>
 8000e90:	eb1e 0303 	adds.w	r3, lr, r3
 8000e94:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e98:	f080 8087 	bcs.w	8000faa <__udivmoddi4+0x2b2>
 8000e9c:	429c      	cmp	r4, r3
 8000e9e:	f240 8084 	bls.w	8000faa <__udivmoddi4+0x2b2>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4473      	add	r3, lr
 8000ea8:	1b1b      	subs	r3, r3, r4
 8000eaa:	b2ad      	uxth	r5, r5
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3310 	mls	r3, r8, r0, r3
 8000eb4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000eb8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ebc:	45a2      	cmp	sl, r4
 8000ebe:	d908      	bls.n	8000ed2 <__udivmoddi4+0x1da>
 8000ec0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ec4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ec8:	d26b      	bcs.n	8000fa2 <__udivmoddi4+0x2aa>
 8000eca:	45a2      	cmp	sl, r4
 8000ecc:	d969      	bls.n	8000fa2 <__udivmoddi4+0x2aa>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4474      	add	r4, lr
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eda:	eba4 040a 	sub.w	r4, r4, sl
 8000ede:	454c      	cmp	r4, r9
 8000ee0:	46c2      	mov	sl, r8
 8000ee2:	464b      	mov	r3, r9
 8000ee4:	d354      	bcc.n	8000f90 <__udivmoddi4+0x298>
 8000ee6:	d051      	beq.n	8000f8c <__udivmoddi4+0x294>
 8000ee8:	2e00      	cmp	r6, #0
 8000eea:	d069      	beq.n	8000fc0 <__udivmoddi4+0x2c8>
 8000eec:	ebb1 050a 	subs.w	r5, r1, sl
 8000ef0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ef4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ef8:	40fd      	lsrs	r5, r7
 8000efa:	40fc      	lsrs	r4, r7
 8000efc:	ea4c 0505 	orr.w	r5, ip, r5
 8000f00:	e9c6 5400 	strd	r5, r4, [r6]
 8000f04:	2700      	movs	r7, #0
 8000f06:	e747      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000f08:	f1c2 0320 	rsb	r3, r2, #32
 8000f0c:	fa20 f703 	lsr.w	r7, r0, r3
 8000f10:	4095      	lsls	r5, r2
 8000f12:	fa01 f002 	lsl.w	r0, r1, r2
 8000f16:	fa21 f303 	lsr.w	r3, r1, r3
 8000f1a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f1e:	4338      	orrs	r0, r7
 8000f20:	0c01      	lsrs	r1, r0, #16
 8000f22:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f26:	fa1f f885 	uxth.w	r8, r5
 8000f2a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f32:	fb07 f308 	mul.w	r3, r7, r8
 8000f36:	428b      	cmp	r3, r1
 8000f38:	fa04 f402 	lsl.w	r4, r4, r2
 8000f3c:	d907      	bls.n	8000f4e <__udivmoddi4+0x256>
 8000f3e:	1869      	adds	r1, r5, r1
 8000f40:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000f44:	d22f      	bcs.n	8000fa6 <__udivmoddi4+0x2ae>
 8000f46:	428b      	cmp	r3, r1
 8000f48:	d92d      	bls.n	8000fa6 <__udivmoddi4+0x2ae>
 8000f4a:	3f02      	subs	r7, #2
 8000f4c:	4429      	add	r1, r5
 8000f4e:	1acb      	subs	r3, r1, r3
 8000f50:	b281      	uxth	r1, r0
 8000f52:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f56:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f5a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f5e:	fb00 f308 	mul.w	r3, r0, r8
 8000f62:	428b      	cmp	r3, r1
 8000f64:	d907      	bls.n	8000f76 <__udivmoddi4+0x27e>
 8000f66:	1869      	adds	r1, r5, r1
 8000f68:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f6c:	d217      	bcs.n	8000f9e <__udivmoddi4+0x2a6>
 8000f6e:	428b      	cmp	r3, r1
 8000f70:	d915      	bls.n	8000f9e <__udivmoddi4+0x2a6>
 8000f72:	3802      	subs	r0, #2
 8000f74:	4429      	add	r1, r5
 8000f76:	1ac9      	subs	r1, r1, r3
 8000f78:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f7c:	e73b      	b.n	8000df6 <__udivmoddi4+0xfe>
 8000f7e:	4637      	mov	r7, r6
 8000f80:	4630      	mov	r0, r6
 8000f82:	e709      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000f84:	4607      	mov	r7, r0
 8000f86:	e6e7      	b.n	8000d58 <__udivmoddi4+0x60>
 8000f88:	4618      	mov	r0, r3
 8000f8a:	e6fb      	b.n	8000d84 <__udivmoddi4+0x8c>
 8000f8c:	4541      	cmp	r1, r8
 8000f8e:	d2ab      	bcs.n	8000ee8 <__udivmoddi4+0x1f0>
 8000f90:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f94:	eb69 020e 	sbc.w	r2, r9, lr
 8000f98:	3801      	subs	r0, #1
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	e7a4      	b.n	8000ee8 <__udivmoddi4+0x1f0>
 8000f9e:	4660      	mov	r0, ip
 8000fa0:	e7e9      	b.n	8000f76 <__udivmoddi4+0x27e>
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	e795      	b.n	8000ed2 <__udivmoddi4+0x1da>
 8000fa6:	4667      	mov	r7, ip
 8000fa8:	e7d1      	b.n	8000f4e <__udivmoddi4+0x256>
 8000faa:	4681      	mov	r9, r0
 8000fac:	e77c      	b.n	8000ea8 <__udivmoddi4+0x1b0>
 8000fae:	3802      	subs	r0, #2
 8000fb0:	442c      	add	r4, r5
 8000fb2:	e747      	b.n	8000e44 <__udivmoddi4+0x14c>
 8000fb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fb8:	442b      	add	r3, r5
 8000fba:	e72f      	b.n	8000e1c <__udivmoddi4+0x124>
 8000fbc:	4638      	mov	r0, r7
 8000fbe:	e708      	b.n	8000dd2 <__udivmoddi4+0xda>
 8000fc0:	4637      	mov	r7, r6
 8000fc2:	e6e9      	b.n	8000d98 <__udivmoddi4+0xa0>

08000fc4 <__aeabi_idiv0>:
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop

08000fc8 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af02      	add	r7, sp, #8
 8000fce:	4603      	mov	r3, r0
 8000fd0:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	f023 030f 	bic.w	r3, r3, #15
 8000fd8:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000fda:	79fb      	ldrb	r3, [r7, #7]
 8000fdc:	011b      	lsls	r3, r3, #4
 8000fde:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000fe0:	7bfb      	ldrb	r3, [r7, #15]
 8000fe2:	f043 030c 	orr.w	r3, r3, #12
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000fea:	7bfb      	ldrb	r3, [r7, #15]
 8000fec:	f043 0308 	orr.w	r3, r3, #8
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000ff4:	7bbb      	ldrb	r3, [r7, #14]
 8000ff6:	f043 030c 	orr.w	r3, r3, #12
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000ffe:	7bbb      	ldrb	r3, [r7, #14]
 8001000:	f043 0308 	orr.w	r3, r3, #8
 8001004:	b2db      	uxtb	r3, r3
 8001006:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001008:	f107 0208 	add.w	r2, r7, #8
 800100c:	2364      	movs	r3, #100	; 0x64
 800100e:	9300      	str	r3, [sp, #0]
 8001010:	2304      	movs	r3, #4
 8001012:	214e      	movs	r1, #78	; 0x4e
 8001014:	4803      	ldr	r0, [pc, #12]	; (8001024 <lcd_send_cmd+0x5c>)
 8001016:	f001 fdb9 	bl	8002b8c <HAL_I2C_Master_Transmit>
}
 800101a:	bf00      	nop
 800101c:	3710      	adds	r7, #16
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	20000214 	.word	0x20000214

08001028 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b086      	sub	sp, #24
 800102c:	af02      	add	r7, sp, #8
 800102e:	4603      	mov	r3, r0
 8001030:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	f023 030f 	bic.w	r3, r3, #15
 8001038:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	011b      	lsls	r3, r3, #4
 800103e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 8001040:	7bfb      	ldrb	r3, [r7, #15]
 8001042:	f043 030d 	orr.w	r3, r3, #13
 8001046:	b2db      	uxtb	r3, r3
 8001048:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 800104a:	7bfb      	ldrb	r3, [r7, #15]
 800104c:	f043 0309 	orr.w	r3, r3, #9
 8001050:	b2db      	uxtb	r3, r3
 8001052:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 8001054:	7bbb      	ldrb	r3, [r7, #14]
 8001056:	f043 030d 	orr.w	r3, r3, #13
 800105a:	b2db      	uxtb	r3, r3
 800105c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 800105e:	7bbb      	ldrb	r3, [r7, #14]
 8001060:	f043 0309 	orr.w	r3, r3, #9
 8001064:	b2db      	uxtb	r3, r3
 8001066:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001068:	f107 0208 	add.w	r2, r7, #8
 800106c:	2364      	movs	r3, #100	; 0x64
 800106e:	9300      	str	r3, [sp, #0]
 8001070:	2304      	movs	r3, #4
 8001072:	214e      	movs	r1, #78	; 0x4e
 8001074:	4803      	ldr	r0, [pc, #12]	; (8001084 <lcd_send_data+0x5c>)
 8001076:	f001 fd89 	bl	8002b8c <HAL_I2C_Master_Transmit>
}
 800107a:	bf00      	nop
 800107c:	3710      	adds	r7, #16
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	20000214 	.word	0x20000214

08001088 <lcd_clear>:

void lcd_clear (void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x00);
 800108e:	2000      	movs	r0, #0
 8001090:	f7ff ff9a 	bl	8000fc8 <lcd_send_cmd>
	for (int i=0; i<100; i++)
 8001094:	2300      	movs	r3, #0
 8001096:	607b      	str	r3, [r7, #4]
 8001098:	e005      	b.n	80010a6 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 800109a:	2020      	movs	r0, #32
 800109c:	f7ff ffc4 	bl	8001028 <lcd_send_data>
	for (int i=0; i<100; i++)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3301      	adds	r3, #1
 80010a4:	607b      	str	r3, [r7, #4]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2b63      	cmp	r3, #99	; 0x63
 80010aa:	ddf6      	ble.n	800109a <lcd_clear+0x12>
	}
}
 80010ac:	bf00      	nop
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <lcd_init>:

void lcd_init (void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80010b8:	2032      	movs	r0, #50	; 0x32
 80010ba:	f001 f937 	bl	800232c <HAL_Delay>
	lcd_send_cmd (0x30);
 80010be:	2030      	movs	r0, #48	; 0x30
 80010c0:	f7ff ff82 	bl	8000fc8 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80010c4:	2005      	movs	r0, #5
 80010c6:	f001 f931 	bl	800232c <HAL_Delay>
	lcd_send_cmd (0x30);
 80010ca:	2030      	movs	r0, #48	; 0x30
 80010cc:	f7ff ff7c 	bl	8000fc8 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80010d0:	2001      	movs	r0, #1
 80010d2:	f001 f92b 	bl	800232c <HAL_Delay>
	lcd_send_cmd (0x30);
 80010d6:	2030      	movs	r0, #48	; 0x30
 80010d8:	f7ff ff76 	bl	8000fc8 <lcd_send_cmd>
	HAL_Delay(10);
 80010dc:	200a      	movs	r0, #10
 80010de:	f001 f925 	bl	800232c <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80010e2:	2020      	movs	r0, #32
 80010e4:	f7ff ff70 	bl	8000fc8 <lcd_send_cmd>
	HAL_Delay(10);
 80010e8:	200a      	movs	r0, #10
 80010ea:	f001 f91f 	bl	800232c <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80010ee:	2028      	movs	r0, #40	; 0x28
 80010f0:	f7ff ff6a 	bl	8000fc8 <lcd_send_cmd>
	HAL_Delay(1);
 80010f4:	2001      	movs	r0, #1
 80010f6:	f001 f919 	bl	800232c <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80010fa:	2008      	movs	r0, #8
 80010fc:	f7ff ff64 	bl	8000fc8 <lcd_send_cmd>
	HAL_Delay(1);
 8001100:	2001      	movs	r0, #1
 8001102:	f001 f913 	bl	800232c <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8001106:	2001      	movs	r0, #1
 8001108:	f7ff ff5e 	bl	8000fc8 <lcd_send_cmd>
	HAL_Delay(1);
 800110c:	2001      	movs	r0, #1
 800110e:	f001 f90d 	bl	800232c <HAL_Delay>
	HAL_Delay(1);
 8001112:	2001      	movs	r0, #1
 8001114:	f001 f90a 	bl	800232c <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001118:	2006      	movs	r0, #6
 800111a:	f7ff ff55 	bl	8000fc8 <lcd_send_cmd>
	HAL_Delay(1);
 800111e:	2001      	movs	r0, #1
 8001120:	f001 f904 	bl	800232c <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001124:	200c      	movs	r0, #12
 8001126:	f7ff ff4f 	bl	8000fc8 <lcd_send_cmd>
}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}

0800112e <lcd_send_string>:

void lcd_send_string (char *str)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	b082      	sub	sp, #8
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001136:	e006      	b.n	8001146 <lcd_send_string+0x18>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	1c5a      	adds	r2, r3, #1
 800113c:	607a      	str	r2, [r7, #4]
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff ff71 	bl	8001028 <lcd_send_data>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d1f4      	bne.n	8001138 <lcd_send_string+0xa>
}
 800114e:	bf00      	nop
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
	...

08001158 <MPU6050_Init>:
float Ax, Ay, Az;

int16_t Gyro_X_RAW = 0, Gyro_Y_RAW = 0, Gyro_Z_RAW = 0;
float Gx, Gy, Gz;

void MPU6050_Init(void) {
 8001158:	b580      	push	{r7, lr}
 800115a:	b086      	sub	sp, #24
 800115c:	af04      	add	r7, sp, #16
	uint8_t check, data;

	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, 1000);
 800115e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001162:	9302      	str	r3, [sp, #8]
 8001164:	2301      	movs	r3, #1
 8001166:	9301      	str	r3, [sp, #4]
 8001168:	1dfb      	adds	r3, r7, #7
 800116a:	9300      	str	r3, [sp, #0]
 800116c:	2301      	movs	r3, #1
 800116e:	2275      	movs	r2, #117	; 0x75
 8001170:	21d0      	movs	r1, #208	; 0xd0
 8001172:	4823      	ldr	r0, [pc, #140]	; (8001200 <MPU6050_Init+0xa8>)
 8001174:	f001 ff02 	bl	8002f7c <HAL_I2C_Mem_Read>

	if (check == 0x68) {
 8001178:	79fb      	ldrb	r3, [r7, #7]
 800117a:	2b68      	cmp	r3, #104	; 0x68
 800117c:	d13b      	bne.n	80011f6 <MPU6050_Init+0x9e>
		data = 0;
 800117e:	2300      	movs	r3, #0
 8001180:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &data, 1,
 8001182:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001186:	9302      	str	r3, [sp, #8]
 8001188:	2301      	movs	r3, #1
 800118a:	9301      	str	r3, [sp, #4]
 800118c:	1dbb      	adds	r3, r7, #6
 800118e:	9300      	str	r3, [sp, #0]
 8001190:	2301      	movs	r3, #1
 8001192:	226b      	movs	r2, #107	; 0x6b
 8001194:	21d0      	movs	r1, #208	; 0xd0
 8001196:	481a      	ldr	r0, [pc, #104]	; (8001200 <MPU6050_Init+0xa8>)
 8001198:	f001 fdf6 	bl	8002d88 <HAL_I2C_Mem_Write>
				1000);

		//data rate 1kHz
		data = 0x07;
 800119c:	2307      	movs	r3, #7
 800119e:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &data, 1,
 80011a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011a4:	9302      	str	r3, [sp, #8]
 80011a6:	2301      	movs	r3, #1
 80011a8:	9301      	str	r3, [sp, #4]
 80011aa:	1dbb      	adds	r3, r7, #6
 80011ac:	9300      	str	r3, [sp, #0]
 80011ae:	2301      	movs	r3, #1
 80011b0:	2219      	movs	r2, #25
 80011b2:	21d0      	movs	r1, #208	; 0xd0
 80011b4:	4812      	ldr	r0, [pc, #72]	; (8001200 <MPU6050_Init+0xa8>)
 80011b6:	f001 fde7 	bl	8002d88 <HAL_I2C_Mem_Write>
				1000);

		data = 0x00;
 80011ba:	2300      	movs	r3, #0
 80011bc:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &data, 1,
 80011be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011c2:	9302      	str	r3, [sp, #8]
 80011c4:	2301      	movs	r3, #1
 80011c6:	9301      	str	r3, [sp, #4]
 80011c8:	1dbb      	adds	r3, r7, #6
 80011ca:	9300      	str	r3, [sp, #0]
 80011cc:	2301      	movs	r3, #1
 80011ce:	221c      	movs	r2, #28
 80011d0:	21d0      	movs	r1, #208	; 0xd0
 80011d2:	480b      	ldr	r0, [pc, #44]	; (8001200 <MPU6050_Init+0xa8>)
 80011d4:	f001 fdd8 	bl	8002d88 <HAL_I2C_Mem_Write>
				1000);

		data = 0x00;
 80011d8:	2300      	movs	r3, #0
 80011da:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &data, 1,
 80011dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011e0:	9302      	str	r3, [sp, #8]
 80011e2:	2301      	movs	r3, #1
 80011e4:	9301      	str	r3, [sp, #4]
 80011e6:	1dbb      	adds	r3, r7, #6
 80011e8:	9300      	str	r3, [sp, #0]
 80011ea:	2301      	movs	r3, #1
 80011ec:	221b      	movs	r2, #27
 80011ee:	21d0      	movs	r1, #208	; 0xd0
 80011f0:	4803      	ldr	r0, [pc, #12]	; (8001200 <MPU6050_Init+0xa8>)
 80011f2:	f001 fdc9 	bl	8002d88 <HAL_I2C_Mem_Write>
				1000);
	}
}
 80011f6:	bf00      	nop
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	20000214 	.word	0x20000214

08001204 <MPU6050_Read_Accel>:

void MPU6050_Read_Accel(void) {
 8001204:	b590      	push	{r4, r7, lr}
 8001206:	b087      	sub	sp, #28
 8001208:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6,
 800120a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800120e:	9302      	str	r3, [sp, #8]
 8001210:	2306      	movs	r3, #6
 8001212:	9301      	str	r3, [sp, #4]
 8001214:	463b      	mov	r3, r7
 8001216:	9300      	str	r3, [sp, #0]
 8001218:	2301      	movs	r3, #1
 800121a:	223b      	movs	r2, #59	; 0x3b
 800121c:	21d0      	movs	r1, #208	; 0xd0
 800121e:	482f      	ldr	r0, [pc, #188]	; (80012dc <MPU6050_Read_Accel+0xd8>)
 8001220:	f001 feac 	bl	8002f7c <HAL_I2C_Mem_Read>
			1000);

	Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8001224:	783b      	ldrb	r3, [r7, #0]
 8001226:	021b      	lsls	r3, r3, #8
 8001228:	b21a      	sxth	r2, r3
 800122a:	787b      	ldrb	r3, [r7, #1]
 800122c:	b21b      	sxth	r3, r3
 800122e:	4313      	orrs	r3, r2
 8001230:	b21a      	sxth	r2, r3
 8001232:	4b2b      	ldr	r3, [pc, #172]	; (80012e0 <MPU6050_Read_Accel+0xdc>)
 8001234:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8001236:	78bb      	ldrb	r3, [r7, #2]
 8001238:	021b      	lsls	r3, r3, #8
 800123a:	b21a      	sxth	r2, r3
 800123c:	78fb      	ldrb	r3, [r7, #3]
 800123e:	b21b      	sxth	r3, r3
 8001240:	4313      	orrs	r3, r2
 8001242:	b21a      	sxth	r2, r3
 8001244:	4b27      	ldr	r3, [pc, #156]	; (80012e4 <MPU6050_Read_Accel+0xe0>)
 8001246:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8001248:	793b      	ldrb	r3, [r7, #4]
 800124a:	021b      	lsls	r3, r3, #8
 800124c:	b21a      	sxth	r2, r3
 800124e:	797b      	ldrb	r3, [r7, #5]
 8001250:	b21b      	sxth	r3, r3
 8001252:	4313      	orrs	r3, r2
 8001254:	b21a      	sxth	r2, r3
 8001256:	4b24      	ldr	r3, [pc, #144]	; (80012e8 <MPU6050_Read_Accel+0xe4>)
 8001258:	801a      	strh	r2, [r3, #0]

	Ax = Accel_X_RAW / 16384.0;
 800125a:	4b21      	ldr	r3, [pc, #132]	; (80012e0 <MPU6050_Read_Accel+0xdc>)
 800125c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff f97f 	bl	8000564 <__aeabi_i2d>
 8001266:	f04f 0200 	mov.w	r2, #0
 800126a:	4b20      	ldr	r3, [pc, #128]	; (80012ec <MPU6050_Read_Accel+0xe8>)
 800126c:	f7ff fb0e 	bl	800088c <__aeabi_ddiv>
 8001270:	4603      	mov	r3, r0
 8001272:	460c      	mov	r4, r1
 8001274:	4618      	mov	r0, r3
 8001276:	4621      	mov	r1, r4
 8001278:	f7ff fcd6 	bl	8000c28 <__aeabi_d2f>
 800127c:	4602      	mov	r2, r0
 800127e:	4b1c      	ldr	r3, [pc, #112]	; (80012f0 <MPU6050_Read_Accel+0xec>)
 8001280:	601a      	str	r2, [r3, #0]
	Ay = Accel_Y_RAW / 16384.0;
 8001282:	4b18      	ldr	r3, [pc, #96]	; (80012e4 <MPU6050_Read_Accel+0xe0>)
 8001284:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff f96b 	bl	8000564 <__aeabi_i2d>
 800128e:	f04f 0200 	mov.w	r2, #0
 8001292:	4b16      	ldr	r3, [pc, #88]	; (80012ec <MPU6050_Read_Accel+0xe8>)
 8001294:	f7ff fafa 	bl	800088c <__aeabi_ddiv>
 8001298:	4603      	mov	r3, r0
 800129a:	460c      	mov	r4, r1
 800129c:	4618      	mov	r0, r3
 800129e:	4621      	mov	r1, r4
 80012a0:	f7ff fcc2 	bl	8000c28 <__aeabi_d2f>
 80012a4:	4602      	mov	r2, r0
 80012a6:	4b13      	ldr	r3, [pc, #76]	; (80012f4 <MPU6050_Read_Accel+0xf0>)
 80012a8:	601a      	str	r2, [r3, #0]
	Az = Accel_Z_RAW / 16384.0;
 80012aa:	4b0f      	ldr	r3, [pc, #60]	; (80012e8 <MPU6050_Read_Accel+0xe4>)
 80012ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff f957 	bl	8000564 <__aeabi_i2d>
 80012b6:	f04f 0200 	mov.w	r2, #0
 80012ba:	4b0c      	ldr	r3, [pc, #48]	; (80012ec <MPU6050_Read_Accel+0xe8>)
 80012bc:	f7ff fae6 	bl	800088c <__aeabi_ddiv>
 80012c0:	4603      	mov	r3, r0
 80012c2:	460c      	mov	r4, r1
 80012c4:	4618      	mov	r0, r3
 80012c6:	4621      	mov	r1, r4
 80012c8:	f7ff fcae 	bl	8000c28 <__aeabi_d2f>
 80012cc:	4602      	mov	r2, r0
 80012ce:	4b0a      	ldr	r3, [pc, #40]	; (80012f8 <MPU6050_Read_Accel+0xf4>)
 80012d0:	601a      	str	r2, [r3, #0]
}
 80012d2:	bf00      	nop
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd90      	pop	{r4, r7, pc}
 80012da:	bf00      	nop
 80012dc:	20000214 	.word	0x20000214
 80012e0:	200001f8 	.word	0x200001f8
 80012e4:	200001fa 	.word	0x200001fa
 80012e8:	200001fc 	.word	0x200001fc
 80012ec:	40d00000 	.word	0x40d00000
 80012f0:	20000270 	.word	0x20000270
 80012f4:	20000268 	.word	0x20000268
 80012f8:	200002b4 	.word	0x200002b4
 80012fc:	00000000 	.word	0x00000000

08001300 <MPU6050_Read_Gyro>:

void MPU6050_Read_Gyro(void) {
 8001300:	b590      	push	{r4, r7, lr}
 8001302:	b087      	sub	sp, #28
 8001304:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6,
 8001306:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800130a:	9302      	str	r3, [sp, #8]
 800130c:	2306      	movs	r3, #6
 800130e:	9301      	str	r3, [sp, #4]
 8001310:	463b      	mov	r3, r7
 8001312:	9300      	str	r3, [sp, #0]
 8001314:	2301      	movs	r3, #1
 8001316:	2243      	movs	r2, #67	; 0x43
 8001318:	21d0      	movs	r1, #208	; 0xd0
 800131a:	4831      	ldr	r0, [pc, #196]	; (80013e0 <MPU6050_Read_Gyro+0xe0>)
 800131c:	f001 fe2e 	bl	8002f7c <HAL_I2C_Mem_Read>
			1000);

	Gyro_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8001320:	783b      	ldrb	r3, [r7, #0]
 8001322:	021b      	lsls	r3, r3, #8
 8001324:	b21a      	sxth	r2, r3
 8001326:	787b      	ldrb	r3, [r7, #1]
 8001328:	b21b      	sxth	r3, r3
 800132a:	4313      	orrs	r3, r2
 800132c:	b21a      	sxth	r2, r3
 800132e:	4b2d      	ldr	r3, [pc, #180]	; (80013e4 <MPU6050_Read_Gyro+0xe4>)
 8001330:	801a      	strh	r2, [r3, #0]
	Gyro_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8001332:	78bb      	ldrb	r3, [r7, #2]
 8001334:	021b      	lsls	r3, r3, #8
 8001336:	b21a      	sxth	r2, r3
 8001338:	78fb      	ldrb	r3, [r7, #3]
 800133a:	b21b      	sxth	r3, r3
 800133c:	4313      	orrs	r3, r2
 800133e:	b21a      	sxth	r2, r3
 8001340:	4b29      	ldr	r3, [pc, #164]	; (80013e8 <MPU6050_Read_Gyro+0xe8>)
 8001342:	801a      	strh	r2, [r3, #0]
	Gyro_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8001344:	793b      	ldrb	r3, [r7, #4]
 8001346:	021b      	lsls	r3, r3, #8
 8001348:	b21a      	sxth	r2, r3
 800134a:	797b      	ldrb	r3, [r7, #5]
 800134c:	b21b      	sxth	r3, r3
 800134e:	4313      	orrs	r3, r2
 8001350:	b21a      	sxth	r2, r3
 8001352:	4b26      	ldr	r3, [pc, #152]	; (80013ec <MPU6050_Read_Gyro+0xec>)
 8001354:	801a      	strh	r2, [r3, #0]

	Gx = Gyro_X_RAW / 131.0;
 8001356:	4b23      	ldr	r3, [pc, #140]	; (80013e4 <MPU6050_Read_Gyro+0xe4>)
 8001358:	f9b3 3000 	ldrsh.w	r3, [r3]
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff f901 	bl	8000564 <__aeabi_i2d>
 8001362:	a31d      	add	r3, pc, #116	; (adr r3, 80013d8 <MPU6050_Read_Gyro+0xd8>)
 8001364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001368:	f7ff fa90 	bl	800088c <__aeabi_ddiv>
 800136c:	4603      	mov	r3, r0
 800136e:	460c      	mov	r4, r1
 8001370:	4618      	mov	r0, r3
 8001372:	4621      	mov	r1, r4
 8001374:	f7ff fc58 	bl	8000c28 <__aeabi_d2f>
 8001378:	4602      	mov	r2, r0
 800137a:	4b1d      	ldr	r3, [pc, #116]	; (80013f0 <MPU6050_Read_Gyro+0xf0>)
 800137c:	601a      	str	r2, [r3, #0]
	Gy = Gyro_Y_RAW / 131.0;
 800137e:	4b1a      	ldr	r3, [pc, #104]	; (80013e8 <MPU6050_Read_Gyro+0xe8>)
 8001380:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff f8ed 	bl	8000564 <__aeabi_i2d>
 800138a:	a313      	add	r3, pc, #76	; (adr r3, 80013d8 <MPU6050_Read_Gyro+0xd8>)
 800138c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001390:	f7ff fa7c 	bl	800088c <__aeabi_ddiv>
 8001394:	4603      	mov	r3, r0
 8001396:	460c      	mov	r4, r1
 8001398:	4618      	mov	r0, r3
 800139a:	4621      	mov	r1, r4
 800139c:	f7ff fc44 	bl	8000c28 <__aeabi_d2f>
 80013a0:	4602      	mov	r2, r0
 80013a2:	4b14      	ldr	r3, [pc, #80]	; (80013f4 <MPU6050_Read_Gyro+0xf4>)
 80013a4:	601a      	str	r2, [r3, #0]
	Gz = Gyro_Z_RAW / 131.0;
 80013a6:	4b11      	ldr	r3, [pc, #68]	; (80013ec <MPU6050_Read_Gyro+0xec>)
 80013a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff f8d9 	bl	8000564 <__aeabi_i2d>
 80013b2:	a309      	add	r3, pc, #36	; (adr r3, 80013d8 <MPU6050_Read_Gyro+0xd8>)
 80013b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b8:	f7ff fa68 	bl	800088c <__aeabi_ddiv>
 80013bc:	4603      	mov	r3, r0
 80013be:	460c      	mov	r4, r1
 80013c0:	4618      	mov	r0, r3
 80013c2:	4621      	mov	r1, r4
 80013c4:	f7ff fc30 	bl	8000c28 <__aeabi_d2f>
 80013c8:	4602      	mov	r2, r0
 80013ca:	4b0b      	ldr	r3, [pc, #44]	; (80013f8 <MPU6050_Read_Gyro+0xf8>)
 80013cc:	601a      	str	r2, [r3, #0]
}
 80013ce:	bf00      	nop
 80013d0:	370c      	adds	r7, #12
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd90      	pop	{r4, r7, pc}
 80013d6:	bf00      	nop
 80013d8:	00000000 	.word	0x00000000
 80013dc:	40606000 	.word	0x40606000
 80013e0:	20000214 	.word	0x20000214
 80013e4:	200001fe 	.word	0x200001fe
 80013e8:	20000200 	.word	0x20000200
 80013ec:	20000202 	.word	0x20000202
 80013f0:	20000210 	.word	0x20000210
 80013f4:	2000026c 	.word	0x2000026c
 80013f8:	200002f8 	.word	0x200002f8

080013fc <round>:

float round(float var) {
 80013fc:	b590      	push	{r4, r7, lr}
 80013fe:	b085      	sub	sp, #20
 8001400:	af00      	add	r7, sp, #0
 8001402:	ed87 0a01 	vstr	s0, [r7, #4]
	// 37.66666 * 100 =3766.66
	// 3766.66 + .5 =3767.16    for rounding off value
	// then type cast to int so value is 3767
	// then divided by 100 so the value converted into 37.67
	float value = (int) (var * 100 + .5);
 8001406:	edd7 7a01 	vldr	s15, [r7, #4]
 800140a:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001458 <round+0x5c>
 800140e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001412:	ee17 0a90 	vmov	r0, s15
 8001416:	f7ff f8b7 	bl	8000588 <__aeabi_f2d>
 800141a:	f04f 0200 	mov.w	r2, #0
 800141e:	4b0f      	ldr	r3, [pc, #60]	; (800145c <round+0x60>)
 8001420:	f7fe ff54 	bl	80002cc <__adddf3>
 8001424:	4603      	mov	r3, r0
 8001426:	460c      	mov	r4, r1
 8001428:	4618      	mov	r0, r3
 800142a:	4621      	mov	r1, r4
 800142c:	f7ff fbb4 	bl	8000b98 <__aeabi_d2iz>
 8001430:	ee07 0a90 	vmov	s15, r0
 8001434:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001438:	edc7 7a03 	vstr	s15, [r7, #12]
	return (float) value / 100;
 800143c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001440:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001458 <round+0x5c>
 8001444:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001448:	eef0 7a66 	vmov.f32	s15, s13
}
 800144c:	eeb0 0a67 	vmov.f32	s0, s15
 8001450:	3714      	adds	r7, #20
 8001452:	46bd      	mov	sp, r7
 8001454:	bd90      	pop	{r4, r7, pc}
 8001456:	bf00      	nop
 8001458:	42c80000 	.word	0x42c80000
 800145c:	3fe00000 	.word	0x3fe00000

08001460 <convertAyToPWMSignal>:

uint8_t convertAyToPWMSignal(void)
{
 8001460:	b480      	push	{r7}
 8001462:	b085      	sub	sp, #20
 8001464:	af00      	add	r7, sp, #0
	uint8_t convert2Positive = (uint8_t) (Ay+2);
 8001466:	4b0c      	ldr	r3, [pc, #48]	; (8001498 <convertAyToPWMSignal+0x38>)
 8001468:	edd3 7a00 	vldr	s15, [r3]
 800146c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001470:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001474:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001478:	edc7 7a01 	vstr	s15, [r7, #4]
 800147c:	793b      	ldrb	r3, [r7, #4]
 800147e:	73fb      	strb	r3, [r7, #15]
	return 40*convert2Positive;
 8001480:	7bfb      	ldrb	r3, [r7, #15]
 8001482:	461a      	mov	r2, r3
 8001484:	0092      	lsls	r2, r2, #2
 8001486:	4413      	add	r3, r2
 8001488:	00db      	lsls	r3, r3, #3
 800148a:	b2db      	uxtb	r3, r3
}
 800148c:	4618      	mov	r0, r3
 800148e:	3714      	adds	r7, #20
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr
 8001498:	20000268 	.word	0x20000268

0800149c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13){
 80014a6:	88fb      	ldrh	r3, [r7, #6]
 80014a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80014ac:	d106      	bne.n	80014bc <HAL_GPIO_EXTI_Callback+0x20>
		htim1.Instance->CCR1 = convertAyToPWMSignal();
 80014ae:	f7ff ffd7 	bl	8001460 <convertAyToPWMSignal>
 80014b2:	4603      	mov	r3, r0
 80014b4:	461a      	mov	r2, r3
 80014b6:	4b03      	ldr	r3, [pc, #12]	; (80014c4 <HAL_GPIO_EXTI_Callback+0x28>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 80014bc:	bf00      	nop
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	20000274 	.word	0x20000274

080014c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014c8:	b590      	push	{r4, r7, lr}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014ce:	f000 febb 	bl	8002248 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014d2:	f000 fb07 	bl	8001ae4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014d6:	f000 fc6d 	bl	8001db4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80014da:	f000 fc41 	bl	8001d60 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80014de:	f000 fb6f 	bl	8001bc0 <MX_I2C1_Init>
  MX_TIM1_Init();
 80014e2:	f000 fb9b 	bl	8001c1c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80014e6:	2100      	movs	r1, #0
 80014e8:	48bb      	ldr	r0, [pc, #748]	; (80017d8 <main+0x310>)
 80014ea:	f003 f8bb 	bl	8004664 <HAL_TIM_PWM_Start>

	lcd_init();
 80014ee:	f7ff fde1 	bl	80010b4 <lcd_init>
	MPU6050_Init();
 80014f2:	f7ff fe31 	bl	8001158 <MPU6050_Init>

	lcd_send_string("Starting...");
 80014f6:	48b9      	ldr	r0, [pc, #740]	; (80017dc <main+0x314>)
 80014f8:	f7ff fe19 	bl	800112e <lcd_send_string>

	HAL_Delay(1000);
 80014fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001500:	f000 ff14 	bl	800232c <HAL_Delay>

	lcd_clear();
 8001504:	f7ff fdc0 	bl	8001088 <lcd_clear>

	lcd_send_cmd(0x80 | 0x04);
 8001508:	2084      	movs	r0, #132	; 0x84
 800150a:	f7ff fd5d 	bl	8000fc8 <lcd_send_cmd>
	lcd_send_string("MPU6050");
 800150e:	48b4      	ldr	r0, [pc, #720]	; (80017e0 <main+0x318>)
 8001510:	f7ff fe0d 	bl	800112e <lcd_send_string>

	lcd_clear();
 8001514:	f7ff fdb8 	bl	8001088 <lcd_clear>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		MPU6050_Read_Accel();
 8001518:	f7ff fe74 	bl	8001204 <MPU6050_Read_Accel>
		MPU6050_Read_Gyro();
 800151c:	f7ff fef0 	bl	8001300 <MPU6050_Read_Gyro>

		lcd_send_cmd(0x80 | 0x00);
 8001520:	2080      	movs	r0, #128	; 0x80
 8001522:	f7ff fd51 	bl	8000fc8 <lcd_send_cmd>
		lcd_send_string("Ax");
 8001526:	48af      	ldr	r0, [pc, #700]	; (80017e4 <main+0x31c>)
 8001528:	f7ff fe01 	bl	800112e <lcd_send_string>

//		lcd_send_cmd(0x80 | 0x06);
//		lcd_send_string("Ay");

		lcd_send_cmd(0x80 | 0x0C);
 800152c:	208c      	movs	r0, #140	; 0x8c
 800152e:	f7ff fd4b 	bl	8000fc8 <lcd_send_cmd>
		lcd_send_string("Ay");
 8001532:	48ad      	ldr	r0, [pc, #692]	; (80017e8 <main+0x320>)
 8001534:	f7ff fdfb 	bl	800112e <lcd_send_string>

		/////////////////////////////

		lcd_send_cmd(0x80 | 0x40);
 8001538:	20c0      	movs	r0, #192	; 0xc0
 800153a:	f7ff fd45 	bl	8000fc8 <lcd_send_cmd>
		sprintf(buf, "%.1f", Ax);
 800153e:	4bab      	ldr	r3, [pc, #684]	; (80017ec <main+0x324>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4618      	mov	r0, r3
 8001544:	f7ff f820 	bl	8000588 <__aeabi_f2d>
 8001548:	4603      	mov	r3, r0
 800154a:	460c      	mov	r4, r1
 800154c:	1d38      	adds	r0, r7, #4
 800154e:	461a      	mov	r2, r3
 8001550:	4623      	mov	r3, r4
 8001552:	49a7      	ldr	r1, [pc, #668]	; (80017f0 <main+0x328>)
 8001554:	f005 f860 	bl	8006618 <siprintf>
		lcd_send_string(buf);
 8001558:	1d3b      	adds	r3, r7, #4
 800155a:	4618      	mov	r0, r3
 800155c:	f7ff fde7 	bl	800112e <lcd_send_string>

//		lcd_send_cmd(0x80 | 0x46);
//		sprintf(buf, "%.1f", Ay);
//		lcd_send_string(buf);

		lcd_send_cmd(0x80 | 0x4C);
 8001560:	20cc      	movs	r0, #204	; 0xcc
 8001562:	f7ff fd31 	bl	8000fc8 <lcd_send_cmd>
		sprintf(buf, "%.1f", Ay);
 8001566:	4ba3      	ldr	r3, [pc, #652]	; (80017f4 <main+0x32c>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4618      	mov	r0, r3
 800156c:	f7ff f80c 	bl	8000588 <__aeabi_f2d>
 8001570:	4603      	mov	r3, r0
 8001572:	460c      	mov	r4, r1
 8001574:	1d38      	adds	r0, r7, #4
 8001576:	461a      	mov	r2, r3
 8001578:	4623      	mov	r3, r4
 800157a:	499d      	ldr	r1, [pc, #628]	; (80017f0 <main+0x328>)
 800157c:	f005 f84c 	bl	8006618 <siprintf>
		lcd_send_string(buf);
 8001580:	1d3b      	adds	r3, r7, #4
 8001582:	4618      	mov	r0, r3
 8001584:	f7ff fdd3 	bl	800112e <lcd_send_string>

		if (round(Ax) >= 0.01 && round(Ay) >= 0.01) {
 8001588:	4b98      	ldr	r3, [pc, #608]	; (80017ec <main+0x324>)
 800158a:	edd3 7a00 	vldr	s15, [r3]
 800158e:	eeb0 0a67 	vmov.f32	s0, s15
 8001592:	f7ff ff33 	bl	80013fc <round>
 8001596:	ee10 3a10 	vmov	r3, s0
 800159a:	4618      	mov	r0, r3
 800159c:	f7fe fff4 	bl	8000588 <__aeabi_f2d>
 80015a0:	a385      	add	r3, pc, #532	; (adr r3, 80017b8 <main+0x2f0>)
 80015a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a6:	f7ff facd 	bl	8000b44 <__aeabi_dcmpge>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d02c      	beq.n	800160a <main+0x142>
 80015b0:	4b90      	ldr	r3, [pc, #576]	; (80017f4 <main+0x32c>)
 80015b2:	edd3 7a00 	vldr	s15, [r3]
 80015b6:	eeb0 0a67 	vmov.f32	s0, s15
 80015ba:	f7ff ff1f 	bl	80013fc <round>
 80015be:	ee10 3a10 	vmov	r3, s0
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7fe ffe0 	bl	8000588 <__aeabi_f2d>
 80015c8:	a37b      	add	r3, pc, #492	; (adr r3, 80017b8 <main+0x2f0>)
 80015ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ce:	f7ff fab9 	bl	8000b44 <__aeabi_dcmpge>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d018      	beq.n	800160a <main+0x142>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 80015d8:	2201      	movs	r2, #1
 80015da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015de:	4886      	ldr	r0, [pc, #536]	; (80017f8 <main+0x330>)
 80015e0:	f001 f96a 	bl	80028b8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 80015e4:	2201      	movs	r2, #1
 80015e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015ea:	4883      	ldr	r0, [pc, #524]	; (80017f8 <main+0x330>)
 80015ec:	f001 f964 	bl	80028b8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);
 80015f0:	2201      	movs	r2, #1
 80015f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015f6:	4880      	ldr	r0, [pc, #512]	; (80017f8 <main+0x330>)
 80015f8:	f001 f95e 	bl	80028b8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 80015fc:	2200      	movs	r2, #0
 80015fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001602:	487d      	ldr	r0, [pc, #500]	; (80017f8 <main+0x330>)
 8001604:	f001 f958 	bl	80028b8 <HAL_GPIO_WritePin>
 8001608:	e250      	b.n	8001aac <main+0x5e4>
		} else if (round(Ax) >= 0.01 && round(Ay) <= -0.01) {
 800160a:	4b78      	ldr	r3, [pc, #480]	; (80017ec <main+0x324>)
 800160c:	edd3 7a00 	vldr	s15, [r3]
 8001610:	eeb0 0a67 	vmov.f32	s0, s15
 8001614:	f7ff fef2 	bl	80013fc <round>
 8001618:	ee10 3a10 	vmov	r3, s0
 800161c:	4618      	mov	r0, r3
 800161e:	f7fe ffb3 	bl	8000588 <__aeabi_f2d>
 8001622:	a365      	add	r3, pc, #404	; (adr r3, 80017b8 <main+0x2f0>)
 8001624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001628:	f7ff fa8c 	bl	8000b44 <__aeabi_dcmpge>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d02c      	beq.n	800168c <main+0x1c4>
 8001632:	4b70      	ldr	r3, [pc, #448]	; (80017f4 <main+0x32c>)
 8001634:	edd3 7a00 	vldr	s15, [r3]
 8001638:	eeb0 0a67 	vmov.f32	s0, s15
 800163c:	f7ff fede 	bl	80013fc <round>
 8001640:	ee10 3a10 	vmov	r3, s0
 8001644:	4618      	mov	r0, r3
 8001646:	f7fe ff9f 	bl	8000588 <__aeabi_f2d>
 800164a:	a35d      	add	r3, pc, #372	; (adr r3, 80017c0 <main+0x2f8>)
 800164c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001650:	f7ff fa6e 	bl	8000b30 <__aeabi_dcmple>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d018      	beq.n	800168c <main+0x1c4>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800165a:	2201      	movs	r2, #1
 800165c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001660:	4865      	ldr	r0, [pc, #404]	; (80017f8 <main+0x330>)
 8001662:	f001 f929 	bl	80028b8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8001666:	2201      	movs	r2, #1
 8001668:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800166c:	4862      	ldr	r0, [pc, #392]	; (80017f8 <main+0x330>)
 800166e:	f001 f923 	bl	80028b8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);
 8001672:	2201      	movs	r2, #1
 8001674:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001678:	485f      	ldr	r0, [pc, #380]	; (80017f8 <main+0x330>)
 800167a:	f001 f91d 	bl	80028b8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 800167e:	2200      	movs	r2, #0
 8001680:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001684:	485c      	ldr	r0, [pc, #368]	; (80017f8 <main+0x330>)
 8001686:	f001 f917 	bl	80028b8 <HAL_GPIO_WritePin>
 800168a:	e20f      	b.n	8001aac <main+0x5e4>
		} else if (round(Ax) >= 0.01
 800168c:	4b57      	ldr	r3, [pc, #348]	; (80017ec <main+0x324>)
 800168e:	edd3 7a00 	vldr	s15, [r3]
 8001692:	eeb0 0a67 	vmov.f32	s0, s15
 8001696:	f7ff feb1 	bl	80013fc <round>
 800169a:	ee10 3a10 	vmov	r3, s0
 800169e:	4618      	mov	r0, r3
 80016a0:	f7fe ff72 	bl	8000588 <__aeabi_f2d>
 80016a4:	a344      	add	r3, pc, #272	; (adr r3, 80017b8 <main+0x2f0>)
 80016a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016aa:	f7ff fa4b 	bl	8000b44 <__aeabi_dcmpge>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d040      	beq.n	8001736 <main+0x26e>
				&& (round(Ay) < 0.009 || round(Ay) > -0.009)) {
 80016b4:	4b4f      	ldr	r3, [pc, #316]	; (80017f4 <main+0x32c>)
 80016b6:	edd3 7a00 	vldr	s15, [r3]
 80016ba:	eeb0 0a67 	vmov.f32	s0, s15
 80016be:	f7ff fe9d 	bl	80013fc <round>
 80016c2:	ee10 3a10 	vmov	r3, s0
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7fe ff5e 	bl	8000588 <__aeabi_f2d>
 80016cc:	a33e      	add	r3, pc, #248	; (adr r3, 80017c8 <main+0x300>)
 80016ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d2:	f7ff fa23 	bl	8000b1c <__aeabi_dcmplt>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d113      	bne.n	8001704 <main+0x23c>
 80016dc:	4b45      	ldr	r3, [pc, #276]	; (80017f4 <main+0x32c>)
 80016de:	edd3 7a00 	vldr	s15, [r3]
 80016e2:	eeb0 0a67 	vmov.f32	s0, s15
 80016e6:	f7ff fe89 	bl	80013fc <round>
 80016ea:	ee10 3a10 	vmov	r3, s0
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7fe ff4a 	bl	8000588 <__aeabi_f2d>
 80016f4:	a336      	add	r3, pc, #216	; (adr r3, 80017d0 <main+0x308>)
 80016f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016fa:	f7ff fa2d 	bl	8000b58 <__aeabi_dcmpgt>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d018      	beq.n	8001736 <main+0x26e>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8001704:	2201      	movs	r2, #1
 8001706:	f44f 7100 	mov.w	r1, #512	; 0x200
 800170a:	483b      	ldr	r0, [pc, #236]	; (80017f8 <main+0x330>)
 800170c:	f001 f8d4 	bl	80028b8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8001710:	2201      	movs	r2, #1
 8001712:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001716:	4838      	ldr	r0, [pc, #224]	; (80017f8 <main+0x330>)
 8001718:	f001 f8ce 	bl	80028b8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 800171c:	2200      	movs	r2, #0
 800171e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001722:	4835      	ldr	r0, [pc, #212]	; (80017f8 <main+0x330>)
 8001724:	f001 f8c8 	bl	80028b8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8001728:	2200      	movs	r2, #0
 800172a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800172e:	4832      	ldr	r0, [pc, #200]	; (80017f8 <main+0x330>)
 8001730:	f001 f8c2 	bl	80028b8 <HAL_GPIO_WritePin>
 8001734:	e1ba      	b.n	8001aac <main+0x5e4>
		} else if (round(Ax) <= -0.01 && round(Ay) >= 0.01) {
 8001736:	4b2d      	ldr	r3, [pc, #180]	; (80017ec <main+0x324>)
 8001738:	edd3 7a00 	vldr	s15, [r3]
 800173c:	eeb0 0a67 	vmov.f32	s0, s15
 8001740:	f7ff fe5c 	bl	80013fc <round>
 8001744:	ee10 3a10 	vmov	r3, s0
 8001748:	4618      	mov	r0, r3
 800174a:	f7fe ff1d 	bl	8000588 <__aeabi_f2d>
 800174e:	a31c      	add	r3, pc, #112	; (adr r3, 80017c0 <main+0x2f8>)
 8001750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001754:	f7ff f9ec 	bl	8000b30 <__aeabi_dcmple>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d04e      	beq.n	80017fc <main+0x334>
 800175e:	4b25      	ldr	r3, [pc, #148]	; (80017f4 <main+0x32c>)
 8001760:	edd3 7a00 	vldr	s15, [r3]
 8001764:	eeb0 0a67 	vmov.f32	s0, s15
 8001768:	f7ff fe48 	bl	80013fc <round>
 800176c:	ee10 3a10 	vmov	r3, s0
 8001770:	4618      	mov	r0, r3
 8001772:	f7fe ff09 	bl	8000588 <__aeabi_f2d>
 8001776:	a310      	add	r3, pc, #64	; (adr r3, 80017b8 <main+0x2f0>)
 8001778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800177c:	f7ff f9e2 	bl	8000b44 <__aeabi_dcmpge>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d03a      	beq.n	80017fc <main+0x334>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8001786:	2201      	movs	r2, #1
 8001788:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800178c:	481a      	ldr	r0, [pc, #104]	; (80017f8 <main+0x330>)
 800178e:	f001 f893 	bl	80028b8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);
 8001792:	2201      	movs	r2, #1
 8001794:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001798:	4817      	ldr	r0, [pc, #92]	; (80017f8 <main+0x330>)
 800179a:	f001 f88d 	bl	80028b8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);
 800179e:	2201      	movs	r2, #1
 80017a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017a4:	4814      	ldr	r0, [pc, #80]	; (80017f8 <main+0x330>)
 80017a6:	f001 f887 	bl	80028b8 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 80017aa:	2200      	movs	r2, #0
 80017ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017b0:	4811      	ldr	r0, [pc, #68]	; (80017f8 <main+0x330>)
 80017b2:	f001 f881 	bl	80028b8 <HAL_GPIO_WritePin>
 80017b6:	e179      	b.n	8001aac <main+0x5e4>
 80017b8:	47ae147b 	.word	0x47ae147b
 80017bc:	3f847ae1 	.word	0x3f847ae1
 80017c0:	47ae147b 	.word	0x47ae147b
 80017c4:	bf847ae1 	.word	0xbf847ae1
 80017c8:	8d4fdf3b 	.word	0x8d4fdf3b
 80017cc:	3f826e97 	.word	0x3f826e97
 80017d0:	8d4fdf3b 	.word	0x8d4fdf3b
 80017d4:	bf826e97 	.word	0xbf826e97
 80017d8:	20000274 	.word	0x20000274
 80017dc:	08009418 	.word	0x08009418
 80017e0:	08009424 	.word	0x08009424
 80017e4:	0800942c 	.word	0x0800942c
 80017e8:	08009430 	.word	0x08009430
 80017ec:	20000270 	.word	0x20000270
 80017f0:	08009434 	.word	0x08009434
 80017f4:	20000268 	.word	0x20000268
 80017f8:	40020800 	.word	0x40020800
		} else if (round(Ax) <= -0.01 && round(Ay) <= -0.01) {
 80017fc:	4bb6      	ldr	r3, [pc, #728]	; (8001ad8 <main+0x610>)
 80017fe:	edd3 7a00 	vldr	s15, [r3]
 8001802:	eeb0 0a67 	vmov.f32	s0, s15
 8001806:	f7ff fdf9 	bl	80013fc <round>
 800180a:	ee10 3a10 	vmov	r3, s0
 800180e:	4618      	mov	r0, r3
 8001810:	f7fe feba 	bl	8000588 <__aeabi_f2d>
 8001814:	a3a8      	add	r3, pc, #672	; (adr r3, 8001ab8 <main+0x5f0>)
 8001816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800181a:	f7ff f989 	bl	8000b30 <__aeabi_dcmple>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d02c      	beq.n	800187e <main+0x3b6>
 8001824:	4bad      	ldr	r3, [pc, #692]	; (8001adc <main+0x614>)
 8001826:	edd3 7a00 	vldr	s15, [r3]
 800182a:	eeb0 0a67 	vmov.f32	s0, s15
 800182e:	f7ff fde5 	bl	80013fc <round>
 8001832:	ee10 3a10 	vmov	r3, s0
 8001836:	4618      	mov	r0, r3
 8001838:	f7fe fea6 	bl	8000588 <__aeabi_f2d>
 800183c:	a39e      	add	r3, pc, #632	; (adr r3, 8001ab8 <main+0x5f0>)
 800183e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001842:	f7ff f975 	bl	8000b30 <__aeabi_dcmple>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d018      	beq.n	800187e <main+0x3b6>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);
 800184c:	2201      	movs	r2, #1
 800184e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001852:	48a3      	ldr	r0, [pc, #652]	; (8001ae0 <main+0x618>)
 8001854:	f001 f830 	bl	80028b8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);
 8001858:	2201      	movs	r2, #1
 800185a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800185e:	48a0      	ldr	r0, [pc, #640]	; (8001ae0 <main+0x618>)
 8001860:	f001 f82a 	bl	80028b8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8001864:	2201      	movs	r2, #1
 8001866:	f44f 7100 	mov.w	r1, #512	; 0x200
 800186a:	489d      	ldr	r0, [pc, #628]	; (8001ae0 <main+0x618>)
 800186c:	f001 f824 	bl	80028b8 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8001870:	2200      	movs	r2, #0
 8001872:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001876:	489a      	ldr	r0, [pc, #616]	; (8001ae0 <main+0x618>)
 8001878:	f001 f81e 	bl	80028b8 <HAL_GPIO_WritePin>
 800187c:	e116      	b.n	8001aac <main+0x5e4>
		} else if (round(Ax) <= -0.01
 800187e:	4b96      	ldr	r3, [pc, #600]	; (8001ad8 <main+0x610>)
 8001880:	edd3 7a00 	vldr	s15, [r3]
 8001884:	eeb0 0a67 	vmov.f32	s0, s15
 8001888:	f7ff fdb8 	bl	80013fc <round>
 800188c:	ee10 3a10 	vmov	r3, s0
 8001890:	4618      	mov	r0, r3
 8001892:	f7fe fe79 	bl	8000588 <__aeabi_f2d>
 8001896:	a388      	add	r3, pc, #544	; (adr r3, 8001ab8 <main+0x5f0>)
 8001898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800189c:	f7ff f948 	bl	8000b30 <__aeabi_dcmple>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d040      	beq.n	8001928 <main+0x460>
				&& (round(Ay) < 0.009 || round(Ay) > -0.009)) {
 80018a6:	4b8d      	ldr	r3, [pc, #564]	; (8001adc <main+0x614>)
 80018a8:	edd3 7a00 	vldr	s15, [r3]
 80018ac:	eeb0 0a67 	vmov.f32	s0, s15
 80018b0:	f7ff fda4 	bl	80013fc <round>
 80018b4:	ee10 3a10 	vmov	r3, s0
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7fe fe65 	bl	8000588 <__aeabi_f2d>
 80018be:	a380      	add	r3, pc, #512	; (adr r3, 8001ac0 <main+0x5f8>)
 80018c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c4:	f7ff f92a 	bl	8000b1c <__aeabi_dcmplt>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d113      	bne.n	80018f6 <main+0x42e>
 80018ce:	4b83      	ldr	r3, [pc, #524]	; (8001adc <main+0x614>)
 80018d0:	edd3 7a00 	vldr	s15, [r3]
 80018d4:	eeb0 0a67 	vmov.f32	s0, s15
 80018d8:	f7ff fd90 	bl	80013fc <round>
 80018dc:	ee10 3a10 	vmov	r3, s0
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7fe fe51 	bl	8000588 <__aeabi_f2d>
 80018e6:	a378      	add	r3, pc, #480	; (adr r3, 8001ac8 <main+0x600>)
 80018e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ec:	f7ff f934 	bl	8000b58 <__aeabi_dcmpgt>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d018      	beq.n	8001928 <main+0x460>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);
 80018f6:	2201      	movs	r2, #1
 80018f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018fc:	4878      	ldr	r0, [pc, #480]	; (8001ae0 <main+0x618>)
 80018fe:	f000 ffdb 	bl	80028b8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);
 8001902:	2201      	movs	r2, #1
 8001904:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001908:	4875      	ldr	r0, [pc, #468]	; (8001ae0 <main+0x618>)
 800190a:	f000 ffd5 	bl	80028b8 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 800190e:	2200      	movs	r2, #0
 8001910:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001914:	4872      	ldr	r0, [pc, #456]	; (8001ae0 <main+0x618>)
 8001916:	f000 ffcf 	bl	80028b8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800191a:	2200      	movs	r2, #0
 800191c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001920:	486f      	ldr	r0, [pc, #444]	; (8001ae0 <main+0x618>)
 8001922:	f000 ffc9 	bl	80028b8 <HAL_GPIO_WritePin>
 8001926:	e0c1      	b.n	8001aac <main+0x5e4>
		} else if ((round(Ax) < 0.009 || round(Ax) > -0.009)
 8001928:	4b6b      	ldr	r3, [pc, #428]	; (8001ad8 <main+0x610>)
 800192a:	edd3 7a00 	vldr	s15, [r3]
 800192e:	eeb0 0a67 	vmov.f32	s0, s15
 8001932:	f7ff fd63 	bl	80013fc <round>
 8001936:	ee10 3a10 	vmov	r3, s0
 800193a:	4618      	mov	r0, r3
 800193c:	f7fe fe24 	bl	8000588 <__aeabi_f2d>
 8001940:	a35f      	add	r3, pc, #380	; (adr r3, 8001ac0 <main+0x5f8>)
 8001942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001946:	f7ff f8e9 	bl	8000b1c <__aeabi_dcmplt>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d113      	bne.n	8001978 <main+0x4b0>
 8001950:	4b61      	ldr	r3, [pc, #388]	; (8001ad8 <main+0x610>)
 8001952:	edd3 7a00 	vldr	s15, [r3]
 8001956:	eeb0 0a67 	vmov.f32	s0, s15
 800195a:	f7ff fd4f 	bl	80013fc <round>
 800195e:	ee10 3a10 	vmov	r3, s0
 8001962:	4618      	mov	r0, r3
 8001964:	f7fe fe10 	bl	8000588 <__aeabi_f2d>
 8001968:	a357      	add	r3, pc, #348	; (adr r3, 8001ac8 <main+0x600>)
 800196a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800196e:	f7ff f8f3 	bl	8000b58 <__aeabi_dcmpgt>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d02c      	beq.n	80019d2 <main+0x50a>
				&& round(Ay) > 0.01) {
 8001978:	4b58      	ldr	r3, [pc, #352]	; (8001adc <main+0x614>)
 800197a:	edd3 7a00 	vldr	s15, [r3]
 800197e:	eeb0 0a67 	vmov.f32	s0, s15
 8001982:	f7ff fd3b 	bl	80013fc <round>
 8001986:	ee10 3a10 	vmov	r3, s0
 800198a:	4618      	mov	r0, r3
 800198c:	f7fe fdfc 	bl	8000588 <__aeabi_f2d>
 8001990:	a34f      	add	r3, pc, #316	; (adr r3, 8001ad0 <main+0x608>)
 8001992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001996:	f7ff f8df 	bl	8000b58 <__aeabi_dcmpgt>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d018      	beq.n	80019d2 <main+0x50a>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);
 80019a0:	2201      	movs	r2, #1
 80019a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019a6:	484e      	ldr	r0, [pc, #312]	; (8001ae0 <main+0x618>)
 80019a8:	f000 ff86 	bl	80028b8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 80019ac:	2201      	movs	r2, #1
 80019ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019b2:	484b      	ldr	r0, [pc, #300]	; (8001ae0 <main+0x618>)
 80019b4:	f000 ff80 	bl	80028b8 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 80019b8:	2200      	movs	r2, #0
 80019ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019be:	4848      	ldr	r0, [pc, #288]	; (8001ae0 <main+0x618>)
 80019c0:	f000 ff7a 	bl	80028b8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 80019c4:	2200      	movs	r2, #0
 80019c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019ca:	4845      	ldr	r0, [pc, #276]	; (8001ae0 <main+0x618>)
 80019cc:	f000 ff74 	bl	80028b8 <HAL_GPIO_WritePin>
 80019d0:	e06c      	b.n	8001aac <main+0x5e4>
		} else if ((round(Ax) < 0.009 || round(Ax) > -0.009)
 80019d2:	4b41      	ldr	r3, [pc, #260]	; (8001ad8 <main+0x610>)
 80019d4:	edd3 7a00 	vldr	s15, [r3]
 80019d8:	eeb0 0a67 	vmov.f32	s0, s15
 80019dc:	f7ff fd0e 	bl	80013fc <round>
 80019e0:	ee10 3a10 	vmov	r3, s0
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7fe fdcf 	bl	8000588 <__aeabi_f2d>
 80019ea:	a335      	add	r3, pc, #212	; (adr r3, 8001ac0 <main+0x5f8>)
 80019ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f0:	f7ff f894 	bl	8000b1c <__aeabi_dcmplt>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d113      	bne.n	8001a22 <main+0x55a>
 80019fa:	4b37      	ldr	r3, [pc, #220]	; (8001ad8 <main+0x610>)
 80019fc:	edd3 7a00 	vldr	s15, [r3]
 8001a00:	eeb0 0a67 	vmov.f32	s0, s15
 8001a04:	f7ff fcfa 	bl	80013fc <round>
 8001a08:	ee10 3a10 	vmov	r3, s0
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7fe fdbb 	bl	8000588 <__aeabi_f2d>
 8001a12:	a32d      	add	r3, pc, #180	; (adr r3, 8001ac8 <main+0x600>)
 8001a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a18:	f7ff f89e 	bl	8000b58 <__aeabi_dcmpgt>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d02c      	beq.n	8001a7c <main+0x5b4>
				&& round(Ay) < -0.01) {
 8001a22:	4b2e      	ldr	r3, [pc, #184]	; (8001adc <main+0x614>)
 8001a24:	edd3 7a00 	vldr	s15, [r3]
 8001a28:	eeb0 0a67 	vmov.f32	s0, s15
 8001a2c:	f7ff fce6 	bl	80013fc <round>
 8001a30:	ee10 3a10 	vmov	r3, s0
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7fe fda7 	bl	8000588 <__aeabi_f2d>
 8001a3a:	a31f      	add	r3, pc, #124	; (adr r3, 8001ab8 <main+0x5f0>)
 8001a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a40:	f7ff f86c 	bl	8000b1c <__aeabi_dcmplt>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d018      	beq.n	8001a7c <main+0x5b4>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a50:	4823      	ldr	r0, [pc, #140]	; (8001ae0 <main+0x618>)
 8001a52:	f000 ff31 	bl	80028b8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8001a56:	2200      	movs	r2, #0
 8001a58:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a5c:	4820      	ldr	r0, [pc, #128]	; (8001ae0 <main+0x618>)
 8001a5e:	f000 ff2b 	bl	80028b8 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);
 8001a62:	2201      	movs	r2, #1
 8001a64:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a68:	481d      	ldr	r0, [pc, #116]	; (8001ae0 <main+0x618>)
 8001a6a:	f000 ff25 	bl	80028b8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8001a6e:	2201      	movs	r2, #1
 8001a70:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a74:	481a      	ldr	r0, [pc, #104]	; (8001ae0 <main+0x618>)
 8001a76:	f000 ff1f 	bl	80028b8 <HAL_GPIO_WritePin>
 8001a7a:	e017      	b.n	8001aac <main+0x5e4>
		} else {
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a82:	4817      	ldr	r0, [pc, #92]	; (8001ae0 <main+0x618>)
 8001a84:	f000 ff18 	bl	80028b8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a8e:	4814      	ldr	r0, [pc, #80]	; (8001ae0 <main+0x618>)
 8001a90:	f000 ff12 	bl	80028b8 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8001a94:	2200      	movs	r2, #0
 8001a96:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a9a:	4811      	ldr	r0, [pc, #68]	; (8001ae0 <main+0x618>)
 8001a9c:	f000 ff0c 	bl	80028b8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001aa6:	480e      	ldr	r0, [pc, #56]	; (8001ae0 <main+0x618>)
 8001aa8:	f000 ff06 	bl	80028b8 <HAL_GPIO_WritePin>
//
//		lcd_send_cmd(0x80 | 0x4B);
//		sprintf(buf, "%.1f", Gz);
//		lcd_send_string(buf);

		HAL_Delay(250);
 8001aac:	20fa      	movs	r0, #250	; 0xfa
 8001aae:	f000 fc3d 	bl	800232c <HAL_Delay>
	while (1) {
 8001ab2:	e531      	b.n	8001518 <main+0x50>
 8001ab4:	f3af 8000 	nop.w
 8001ab8:	47ae147b 	.word	0x47ae147b
 8001abc:	bf847ae1 	.word	0xbf847ae1
 8001ac0:	8d4fdf3b 	.word	0x8d4fdf3b
 8001ac4:	3f826e97 	.word	0x3f826e97
 8001ac8:	8d4fdf3b 	.word	0x8d4fdf3b
 8001acc:	bf826e97 	.word	0xbf826e97
 8001ad0:	47ae147b 	.word	0x47ae147b
 8001ad4:	3f847ae1 	.word	0x3f847ae1
 8001ad8:	20000270 	.word	0x20000270
 8001adc:	20000268 	.word	0x20000268
 8001ae0:	40020800 	.word	0x40020800

08001ae4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b094      	sub	sp, #80	; 0x50
 8001ae8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001aea:	f107 031c 	add.w	r3, r7, #28
 8001aee:	2234      	movs	r2, #52	; 0x34
 8001af0:	2100      	movs	r1, #0
 8001af2:	4618      	mov	r0, r3
 8001af4:	f003 ff44 	bl	8005980 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001af8:	f107 0308 	add.w	r3, r7, #8
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	605a      	str	r2, [r3, #4]
 8001b02:	609a      	str	r2, [r3, #8]
 8001b04:	60da      	str	r2, [r3, #12]
 8001b06:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b08:	2300      	movs	r3, #0
 8001b0a:	607b      	str	r3, [r7, #4]
 8001b0c:	4b2a      	ldr	r3, [pc, #168]	; (8001bb8 <SystemClock_Config+0xd4>)
 8001b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b10:	4a29      	ldr	r2, [pc, #164]	; (8001bb8 <SystemClock_Config+0xd4>)
 8001b12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b16:	6413      	str	r3, [r2, #64]	; 0x40
 8001b18:	4b27      	ldr	r3, [pc, #156]	; (8001bb8 <SystemClock_Config+0xd4>)
 8001b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b20:	607b      	str	r3, [r7, #4]
 8001b22:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001b24:	2300      	movs	r3, #0
 8001b26:	603b      	str	r3, [r7, #0]
 8001b28:	4b24      	ldr	r3, [pc, #144]	; (8001bbc <SystemClock_Config+0xd8>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001b30:	4a22      	ldr	r2, [pc, #136]	; (8001bbc <SystemClock_Config+0xd8>)
 8001b32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b36:	6013      	str	r3, [r2, #0]
 8001b38:	4b20      	ldr	r3, [pc, #128]	; (8001bbc <SystemClock_Config+0xd8>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b40:	603b      	str	r3, [r7, #0]
 8001b42:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b44:	2301      	movs	r3, #1
 8001b46:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b4c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b4e:	2302      	movs	r3, #2
 8001b50:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b52:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b56:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001b58:	2304      	movs	r3, #4
 8001b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 50;
 8001b5c:	2332      	movs	r3, #50	; 0x32
 8001b5e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b60:	2302      	movs	r3, #2
 8001b62:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001b64:	2302      	movs	r3, #2
 8001b66:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001b68:	2302      	movs	r3, #2
 8001b6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b6c:	f107 031c 	add.w	r3, r7, #28
 8001b70:	4618      	mov	r0, r3
 8001b72:	f002 fabd 	bl	80040f0 <HAL_RCC_OscConfig>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001b7c:	f000 f9a6 	bl	8001ecc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b80:	230f      	movs	r3, #15
 8001b82:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b84:	2302      	movs	r3, #2
 8001b86:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b90:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b96:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001b98:	f107 0308 	add.w	r3, r7, #8
 8001b9c:	2101      	movs	r1, #1
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f001 ffec 	bl	8003b7c <HAL_RCC_ClockConfig>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001baa:	f000 f98f 	bl	8001ecc <Error_Handler>
  }
}
 8001bae:	bf00      	nop
 8001bb0:	3750      	adds	r7, #80	; 0x50
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	40023800 	.word	0x40023800
 8001bbc:	40007000 	.word	0x40007000

08001bc0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001bc4:	4b12      	ldr	r3, [pc, #72]	; (8001c10 <MX_I2C1_Init+0x50>)
 8001bc6:	4a13      	ldr	r2, [pc, #76]	; (8001c14 <MX_I2C1_Init+0x54>)
 8001bc8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001bca:	4b11      	ldr	r3, [pc, #68]	; (8001c10 <MX_I2C1_Init+0x50>)
 8001bcc:	4a12      	ldr	r2, [pc, #72]	; (8001c18 <MX_I2C1_Init+0x58>)
 8001bce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001bd0:	4b0f      	ldr	r3, [pc, #60]	; (8001c10 <MX_I2C1_Init+0x50>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001bd6:	4b0e      	ldr	r3, [pc, #56]	; (8001c10 <MX_I2C1_Init+0x50>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bdc:	4b0c      	ldr	r3, [pc, #48]	; (8001c10 <MX_I2C1_Init+0x50>)
 8001bde:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001be2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001be4:	4b0a      	ldr	r3, [pc, #40]	; (8001c10 <MX_I2C1_Init+0x50>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001bea:	4b09      	ldr	r3, [pc, #36]	; (8001c10 <MX_I2C1_Init+0x50>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bf0:	4b07      	ldr	r3, [pc, #28]	; (8001c10 <MX_I2C1_Init+0x50>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bf6:	4b06      	ldr	r3, [pc, #24]	; (8001c10 <MX_I2C1_Init+0x50>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001bfc:	4804      	ldr	r0, [pc, #16]	; (8001c10 <MX_I2C1_Init+0x50>)
 8001bfe:	f000 fe8d 	bl	800291c <HAL_I2C_Init>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001c08:	f000 f960 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c0c:	bf00      	nop
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	20000214 	.word	0x20000214
 8001c14:	40005400 	.word	0x40005400
 8001c18:	000186a0 	.word	0x000186a0

08001c1c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b096      	sub	sp, #88	; 0x58
 8001c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c22:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001c26:	2200      	movs	r2, #0
 8001c28:	601a      	str	r2, [r3, #0]
 8001c2a:	605a      	str	r2, [r3, #4]
 8001c2c:	609a      	str	r2, [r3, #8]
 8001c2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c30:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c3e:	2200      	movs	r2, #0
 8001c40:	601a      	str	r2, [r3, #0]
 8001c42:	605a      	str	r2, [r3, #4]
 8001c44:	609a      	str	r2, [r3, #8]
 8001c46:	60da      	str	r2, [r3, #12]
 8001c48:	611a      	str	r2, [r3, #16]
 8001c4a:	615a      	str	r2, [r3, #20]
 8001c4c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c4e:	1d3b      	adds	r3, r7, #4
 8001c50:	2220      	movs	r2, #32
 8001c52:	2100      	movs	r1, #0
 8001c54:	4618      	mov	r0, r3
 8001c56:	f003 fe93 	bl	8005980 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c5a:	4b3f      	ldr	r3, [pc, #252]	; (8001d58 <MX_TIM1_Init+0x13c>)
 8001c5c:	4a3f      	ldr	r2, [pc, #252]	; (8001d5c <MX_TIM1_Init+0x140>)
 8001c5e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1000-1;
 8001c60:	4b3d      	ldr	r3, [pc, #244]	; (8001d58 <MX_TIM1_Init+0x13c>)
 8001c62:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c66:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c68:	4b3b      	ldr	r3, [pc, #236]	; (8001d58 <MX_TIM1_Init+0x13c>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8001c6e:	4b3a      	ldr	r3, [pc, #232]	; (8001d58 <MX_TIM1_Init+0x13c>)
 8001c70:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c74:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c76:	4b38      	ldr	r3, [pc, #224]	; (8001d58 <MX_TIM1_Init+0x13c>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c7c:	4b36      	ldr	r3, [pc, #216]	; (8001d58 <MX_TIM1_Init+0x13c>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c82:	4b35      	ldr	r3, [pc, #212]	; (8001d58 <MX_TIM1_Init+0x13c>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001c88:	4833      	ldr	r0, [pc, #204]	; (8001d58 <MX_TIM1_Init+0x13c>)
 8001c8a:	f002 fc8b 	bl	80045a4 <HAL_TIM_Base_Init>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001c94:	f000 f91a 	bl	8001ecc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c9c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001c9e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	482c      	ldr	r0, [pc, #176]	; (8001d58 <MX_TIM1_Init+0x13c>)
 8001ca6:	f002 fde1 	bl	800486c <HAL_TIM_ConfigClockSource>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001cb0:	f000 f90c 	bl	8001ecc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001cb4:	4828      	ldr	r0, [pc, #160]	; (8001d58 <MX_TIM1_Init+0x13c>)
 8001cb6:	f002 fca0 	bl	80045fa <HAL_TIM_PWM_Init>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001cc0:	f000 f904 	bl	8001ecc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ccc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4821      	ldr	r0, [pc, #132]	; (8001d58 <MX_TIM1_Init+0x13c>)
 8001cd4:	f003 f992 	bl	8004ffc <HAL_TIMEx_MasterConfigSynchronization>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8001cde:	f000 f8f5 	bl	8001ecc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ce2:	2360      	movs	r3, #96	; 0x60
 8001ce4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cea:	2300      	movs	r3, #0
 8001cec:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d02:	2200      	movs	r2, #0
 8001d04:	4619      	mov	r1, r3
 8001d06:	4814      	ldr	r0, [pc, #80]	; (8001d58 <MX_TIM1_Init+0x13c>)
 8001d08:	f002 fcea 	bl	80046e0 <HAL_TIM_PWM_ConfigChannel>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8001d12:	f000 f8db 	bl	8001ecc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d16:	2300      	movs	r3, #0
 8001d18:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d22:	2300      	movs	r3, #0
 8001d24:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d26:	2300      	movs	r3, #0
 8001d28:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d2e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d30:	2300      	movs	r3, #0
 8001d32:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001d34:	1d3b      	adds	r3, r7, #4
 8001d36:	4619      	mov	r1, r3
 8001d38:	4807      	ldr	r0, [pc, #28]	; (8001d58 <MX_TIM1_Init+0x13c>)
 8001d3a:	f003 f9db 	bl	80050f4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8001d44:	f000 f8c2 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001d48:	4803      	ldr	r0, [pc, #12]	; (8001d58 <MX_TIM1_Init+0x13c>)
 8001d4a:	f000 f959 	bl	8002000 <HAL_TIM_MspPostInit>

}
 8001d4e:	bf00      	nop
 8001d50:	3758      	adds	r7, #88	; 0x58
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	20000274 	.word	0x20000274
 8001d5c:	40010000 	.word	0x40010000

08001d60 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d64:	4b11      	ldr	r3, [pc, #68]	; (8001dac <MX_USART2_UART_Init+0x4c>)
 8001d66:	4a12      	ldr	r2, [pc, #72]	; (8001db0 <MX_USART2_UART_Init+0x50>)
 8001d68:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d6a:	4b10      	ldr	r3, [pc, #64]	; (8001dac <MX_USART2_UART_Init+0x4c>)
 8001d6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d70:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d72:	4b0e      	ldr	r3, [pc, #56]	; (8001dac <MX_USART2_UART_Init+0x4c>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d78:	4b0c      	ldr	r3, [pc, #48]	; (8001dac <MX_USART2_UART_Init+0x4c>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d7e:	4b0b      	ldr	r3, [pc, #44]	; (8001dac <MX_USART2_UART_Init+0x4c>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d84:	4b09      	ldr	r3, [pc, #36]	; (8001dac <MX_USART2_UART_Init+0x4c>)
 8001d86:	220c      	movs	r2, #12
 8001d88:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d8a:	4b08      	ldr	r3, [pc, #32]	; (8001dac <MX_USART2_UART_Init+0x4c>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d90:	4b06      	ldr	r3, [pc, #24]	; (8001dac <MX_USART2_UART_Init+0x4c>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d96:	4805      	ldr	r0, [pc, #20]	; (8001dac <MX_USART2_UART_Init+0x4c>)
 8001d98:	f003 f9fe 	bl	8005198 <HAL_UART_Init>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001da2:	f000 f893 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001da6:	bf00      	nop
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	200002b8 	.word	0x200002b8
 8001db0:	40004400 	.word	0x40004400

08001db4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b08a      	sub	sp, #40	; 0x28
 8001db8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dba:	f107 0314 	add.w	r3, r7, #20
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	601a      	str	r2, [r3, #0]
 8001dc2:	605a      	str	r2, [r3, #4]
 8001dc4:	609a      	str	r2, [r3, #8]
 8001dc6:	60da      	str	r2, [r3, #12]
 8001dc8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dca:	2300      	movs	r3, #0
 8001dcc:	613b      	str	r3, [r7, #16]
 8001dce:	4b3b      	ldr	r3, [pc, #236]	; (8001ebc <MX_GPIO_Init+0x108>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd2:	4a3a      	ldr	r2, [pc, #232]	; (8001ebc <MX_GPIO_Init+0x108>)
 8001dd4:	f043 0304 	orr.w	r3, r3, #4
 8001dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dda:	4b38      	ldr	r3, [pc, #224]	; (8001ebc <MX_GPIO_Init+0x108>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dde:	f003 0304 	and.w	r3, r3, #4
 8001de2:	613b      	str	r3, [r7, #16]
 8001de4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001de6:	2300      	movs	r3, #0
 8001de8:	60fb      	str	r3, [r7, #12]
 8001dea:	4b34      	ldr	r3, [pc, #208]	; (8001ebc <MX_GPIO_Init+0x108>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dee:	4a33      	ldr	r2, [pc, #204]	; (8001ebc <MX_GPIO_Init+0x108>)
 8001df0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001df4:	6313      	str	r3, [r2, #48]	; 0x30
 8001df6:	4b31      	ldr	r3, [pc, #196]	; (8001ebc <MX_GPIO_Init+0x108>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dfe:	60fb      	str	r3, [r7, #12]
 8001e00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e02:	2300      	movs	r3, #0
 8001e04:	60bb      	str	r3, [r7, #8]
 8001e06:	4b2d      	ldr	r3, [pc, #180]	; (8001ebc <MX_GPIO_Init+0x108>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0a:	4a2c      	ldr	r2, [pc, #176]	; (8001ebc <MX_GPIO_Init+0x108>)
 8001e0c:	f043 0301 	orr.w	r3, r3, #1
 8001e10:	6313      	str	r3, [r2, #48]	; 0x30
 8001e12:	4b2a      	ldr	r3, [pc, #168]	; (8001ebc <MX_GPIO_Init+0x108>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	60bb      	str	r3, [r7, #8]
 8001e1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e1e:	2300      	movs	r3, #0
 8001e20:	607b      	str	r3, [r7, #4]
 8001e22:	4b26      	ldr	r3, [pc, #152]	; (8001ebc <MX_GPIO_Init+0x108>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e26:	4a25      	ldr	r2, [pc, #148]	; (8001ebc <MX_GPIO_Init+0x108>)
 8001e28:	f043 0302 	orr.w	r3, r3, #2
 8001e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e2e:	4b23      	ldr	r3, [pc, #140]	; (8001ebc <MX_GPIO_Init+0x108>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e32:	f003 0302 	and.w	r3, r3, #2
 8001e36:	607b      	str	r3, [r7, #4]
 8001e38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	2120      	movs	r1, #32
 8001e3e:	4820      	ldr	r0, [pc, #128]	; (8001ec0 <MX_GPIO_Init+0x10c>)
 8001e40:	f000 fd3a 	bl	80028b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8001e44:	2200      	movs	r2, #0
 8001e46:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
 8001e4a:	481e      	ldr	r0, [pc, #120]	; (8001ec4 <MX_GPIO_Init+0x110>)
 8001e4c:	f000 fd34 	bl	80028b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001e50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e56:	4b1c      	ldr	r3, [pc, #112]	; (8001ec8 <MX_GPIO_Init+0x114>)
 8001e58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001e5e:	f107 0314 	add.w	r3, r7, #20
 8001e62:	4619      	mov	r1, r3
 8001e64:	4817      	ldr	r0, [pc, #92]	; (8001ec4 <MX_GPIO_Init+0x110>)
 8001e66:	f000 fb95 	bl	8002594 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001e6a:	2320      	movs	r3, #32
 8001e6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e72:	2300      	movs	r3, #0
 8001e74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e76:	2300      	movs	r3, #0
 8001e78:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001e7a:	f107 0314 	add.w	r3, r7, #20
 8001e7e:	4619      	mov	r1, r3
 8001e80:	480f      	ldr	r0, [pc, #60]	; (8001ec0 <MX_GPIO_Init+0x10c>)
 8001e82:	f000 fb87 	bl	8002594 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001e86:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8001e8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e90:	2300      	movs	r3, #0
 8001e92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e94:	2300      	movs	r3, #0
 8001e96:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e98:	f107 0314 	add.w	r3, r7, #20
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	4809      	ldr	r0, [pc, #36]	; (8001ec4 <MX_GPIO_Init+0x110>)
 8001ea0:	f000 fb78 	bl	8002594 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	2100      	movs	r1, #0
 8001ea8:	2028      	movs	r0, #40	; 0x28
 8001eaa:	f000 fb3c 	bl	8002526 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001eae:	2028      	movs	r0, #40	; 0x28
 8001eb0:	f000 fb55 	bl	800255e <HAL_NVIC_EnableIRQ>

}
 8001eb4:	bf00      	nop
 8001eb6:	3728      	adds	r7, #40	; 0x28
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	40023800 	.word	0x40023800
 8001ec0:	40020000 	.word	0x40020000
 8001ec4:	40020800 	.word	0x40020800
 8001ec8:	10210000 	.word	0x10210000

08001ecc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001ed0:	bf00      	nop
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
	...

08001edc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	607b      	str	r3, [r7, #4]
 8001ee6:	4b10      	ldr	r3, [pc, #64]	; (8001f28 <HAL_MspInit+0x4c>)
 8001ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eea:	4a0f      	ldr	r2, [pc, #60]	; (8001f28 <HAL_MspInit+0x4c>)
 8001eec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ef0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ef2:	4b0d      	ldr	r3, [pc, #52]	; (8001f28 <HAL_MspInit+0x4c>)
 8001ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001efa:	607b      	str	r3, [r7, #4]
 8001efc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001efe:	2300      	movs	r3, #0
 8001f00:	603b      	str	r3, [r7, #0]
 8001f02:	4b09      	ldr	r3, [pc, #36]	; (8001f28 <HAL_MspInit+0x4c>)
 8001f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f06:	4a08      	ldr	r2, [pc, #32]	; (8001f28 <HAL_MspInit+0x4c>)
 8001f08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f0e:	4b06      	ldr	r3, [pc, #24]	; (8001f28 <HAL_MspInit+0x4c>)
 8001f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f16:	603b      	str	r3, [r7, #0]
 8001f18:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001f1a:	2007      	movs	r0, #7
 8001f1c:	f000 faf8 	bl	8002510 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f20:	bf00      	nop
 8001f22:	3708      	adds	r7, #8
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	40023800 	.word	0x40023800

08001f2c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b08a      	sub	sp, #40	; 0x28
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f34:	f107 0314 	add.w	r3, r7, #20
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	605a      	str	r2, [r3, #4]
 8001f3e:	609a      	str	r2, [r3, #8]
 8001f40:	60da      	str	r2, [r3, #12]
 8001f42:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a19      	ldr	r2, [pc, #100]	; (8001fb0 <HAL_I2C_MspInit+0x84>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d12c      	bne.n	8001fa8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f4e:	2300      	movs	r3, #0
 8001f50:	613b      	str	r3, [r7, #16]
 8001f52:	4b18      	ldr	r3, [pc, #96]	; (8001fb4 <HAL_I2C_MspInit+0x88>)
 8001f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f56:	4a17      	ldr	r2, [pc, #92]	; (8001fb4 <HAL_I2C_MspInit+0x88>)
 8001f58:	f043 0302 	orr.w	r3, r3, #2
 8001f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f5e:	4b15      	ldr	r3, [pc, #84]	; (8001fb4 <HAL_I2C_MspInit+0x88>)
 8001f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	613b      	str	r3, [r7, #16]
 8001f68:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f6a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f70:	2312      	movs	r3, #18
 8001f72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f74:	2301      	movs	r3, #1
 8001f76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f7c:	2304      	movs	r3, #4
 8001f7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f80:	f107 0314 	add.w	r3, r7, #20
 8001f84:	4619      	mov	r1, r3
 8001f86:	480c      	ldr	r0, [pc, #48]	; (8001fb8 <HAL_I2C_MspInit+0x8c>)
 8001f88:	f000 fb04 	bl	8002594 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	60fb      	str	r3, [r7, #12]
 8001f90:	4b08      	ldr	r3, [pc, #32]	; (8001fb4 <HAL_I2C_MspInit+0x88>)
 8001f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f94:	4a07      	ldr	r2, [pc, #28]	; (8001fb4 <HAL_I2C_MspInit+0x88>)
 8001f96:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f9a:	6413      	str	r3, [r2, #64]	; 0x40
 8001f9c:	4b05      	ldr	r3, [pc, #20]	; (8001fb4 <HAL_I2C_MspInit+0x88>)
 8001f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fa4:	60fb      	str	r3, [r7, #12]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001fa8:	bf00      	nop
 8001faa:	3728      	adds	r7, #40	; 0x28
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	40005400 	.word	0x40005400
 8001fb4:	40023800 	.word	0x40023800
 8001fb8:	40020400 	.word	0x40020400

08001fbc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b085      	sub	sp, #20
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a0b      	ldr	r2, [pc, #44]	; (8001ff8 <HAL_TIM_Base_MspInit+0x3c>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d10d      	bne.n	8001fea <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001fce:	2300      	movs	r3, #0
 8001fd0:	60fb      	str	r3, [r7, #12]
 8001fd2:	4b0a      	ldr	r3, [pc, #40]	; (8001ffc <HAL_TIM_Base_MspInit+0x40>)
 8001fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd6:	4a09      	ldr	r2, [pc, #36]	; (8001ffc <HAL_TIM_Base_MspInit+0x40>)
 8001fd8:	f043 0301 	orr.w	r3, r3, #1
 8001fdc:	6453      	str	r3, [r2, #68]	; 0x44
 8001fde:	4b07      	ldr	r3, [pc, #28]	; (8001ffc <HAL_TIM_Base_MspInit+0x40>)
 8001fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe2:	f003 0301 	and.w	r3, r3, #1
 8001fe6:	60fb      	str	r3, [r7, #12]
 8001fe8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001fea:	bf00      	nop
 8001fec:	3714      	adds	r7, #20
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	40010000 	.word	0x40010000
 8001ffc:	40023800 	.word	0x40023800

08002000 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b088      	sub	sp, #32
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002008:	f107 030c 	add.w	r3, r7, #12
 800200c:	2200      	movs	r2, #0
 800200e:	601a      	str	r2, [r3, #0]
 8002010:	605a      	str	r2, [r3, #4]
 8002012:	609a      	str	r2, [r3, #8]
 8002014:	60da      	str	r2, [r3, #12]
 8002016:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a12      	ldr	r2, [pc, #72]	; (8002068 <HAL_TIM_MspPostInit+0x68>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d11e      	bne.n	8002060 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002022:	2300      	movs	r3, #0
 8002024:	60bb      	str	r3, [r7, #8]
 8002026:	4b11      	ldr	r3, [pc, #68]	; (800206c <HAL_TIM_MspPostInit+0x6c>)
 8002028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202a:	4a10      	ldr	r2, [pc, #64]	; (800206c <HAL_TIM_MspPostInit+0x6c>)
 800202c:	f043 0301 	orr.w	r3, r3, #1
 8002030:	6313      	str	r3, [r2, #48]	; 0x30
 8002032:	4b0e      	ldr	r3, [pc, #56]	; (800206c <HAL_TIM_MspPostInit+0x6c>)
 8002034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	60bb      	str	r3, [r7, #8]
 800203c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800203e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002042:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002044:	2302      	movs	r3, #2
 8002046:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002048:	2300      	movs	r3, #0
 800204a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800204c:	2300      	movs	r3, #0
 800204e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002050:	2301      	movs	r3, #1
 8002052:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002054:	f107 030c 	add.w	r3, r7, #12
 8002058:	4619      	mov	r1, r3
 800205a:	4805      	ldr	r0, [pc, #20]	; (8002070 <HAL_TIM_MspPostInit+0x70>)
 800205c:	f000 fa9a 	bl	8002594 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002060:	bf00      	nop
 8002062:	3720      	adds	r7, #32
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	40010000 	.word	0x40010000
 800206c:	40023800 	.word	0x40023800
 8002070:	40020000 	.word	0x40020000

08002074 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b08a      	sub	sp, #40	; 0x28
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800207c:	f107 0314 	add.w	r3, r7, #20
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]
 8002084:	605a      	str	r2, [r3, #4]
 8002086:	609a      	str	r2, [r3, #8]
 8002088:	60da      	str	r2, [r3, #12]
 800208a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a19      	ldr	r2, [pc, #100]	; (80020f8 <HAL_UART_MspInit+0x84>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d12b      	bne.n	80020ee <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002096:	2300      	movs	r3, #0
 8002098:	613b      	str	r3, [r7, #16]
 800209a:	4b18      	ldr	r3, [pc, #96]	; (80020fc <HAL_UART_MspInit+0x88>)
 800209c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209e:	4a17      	ldr	r2, [pc, #92]	; (80020fc <HAL_UART_MspInit+0x88>)
 80020a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020a4:	6413      	str	r3, [r2, #64]	; 0x40
 80020a6:	4b15      	ldr	r3, [pc, #84]	; (80020fc <HAL_UART_MspInit+0x88>)
 80020a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ae:	613b      	str	r3, [r7, #16]
 80020b0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020b2:	2300      	movs	r3, #0
 80020b4:	60fb      	str	r3, [r7, #12]
 80020b6:	4b11      	ldr	r3, [pc, #68]	; (80020fc <HAL_UART_MspInit+0x88>)
 80020b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ba:	4a10      	ldr	r2, [pc, #64]	; (80020fc <HAL_UART_MspInit+0x88>)
 80020bc:	f043 0301 	orr.w	r3, r3, #1
 80020c0:	6313      	str	r3, [r2, #48]	; 0x30
 80020c2:	4b0e      	ldr	r3, [pc, #56]	; (80020fc <HAL_UART_MspInit+0x88>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	60fb      	str	r3, [r7, #12]
 80020cc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80020ce:	230c      	movs	r3, #12
 80020d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d2:	2302      	movs	r3, #2
 80020d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d6:	2300      	movs	r3, #0
 80020d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020da:	2303      	movs	r3, #3
 80020dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020de:	2307      	movs	r3, #7
 80020e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020e2:	f107 0314 	add.w	r3, r7, #20
 80020e6:	4619      	mov	r1, r3
 80020e8:	4805      	ldr	r0, [pc, #20]	; (8002100 <HAL_UART_MspInit+0x8c>)
 80020ea:	f000 fa53 	bl	8002594 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80020ee:	bf00      	nop
 80020f0:	3728      	adds	r7, #40	; 0x28
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	40004400 	.word	0x40004400
 80020fc:	40023800 	.word	0x40023800
 8002100:	40020000 	.word	0x40020000

08002104 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002108:	bf00      	nop
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr

08002112 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002112:	b480      	push	{r7}
 8002114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002116:	e7fe      	b.n	8002116 <HardFault_Handler+0x4>

08002118 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800211c:	e7fe      	b.n	800211c <MemManage_Handler+0x4>

0800211e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800211e:	b480      	push	{r7}
 8002120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002122:	e7fe      	b.n	8002122 <BusFault_Handler+0x4>

08002124 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002128:	e7fe      	b.n	8002128 <UsageFault_Handler+0x4>

0800212a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800212a:	b480      	push	{r7}
 800212c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800212e:	bf00      	nop
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800213c:	bf00      	nop
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr

08002146 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002146:	b480      	push	{r7}
 8002148:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800214a:	bf00      	nop
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002158:	f000 f8c8 	bl	80022ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800215c:	bf00      	nop
 800215e:	bd80      	pop	{r7, pc}

08002160 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002164:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002168:	f000 fbc0 	bl	80028ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800216c:	bf00      	nop
 800216e:	bd80      	pop	{r7, pc}

08002170 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002178:	4b11      	ldr	r3, [pc, #68]	; (80021c0 <_sbrk+0x50>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d102      	bne.n	8002186 <_sbrk+0x16>
		heap_end = &end;
 8002180:	4b0f      	ldr	r3, [pc, #60]	; (80021c0 <_sbrk+0x50>)
 8002182:	4a10      	ldr	r2, [pc, #64]	; (80021c4 <_sbrk+0x54>)
 8002184:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002186:	4b0e      	ldr	r3, [pc, #56]	; (80021c0 <_sbrk+0x50>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800218c:	4b0c      	ldr	r3, [pc, #48]	; (80021c0 <_sbrk+0x50>)
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4413      	add	r3, r2
 8002194:	466a      	mov	r2, sp
 8002196:	4293      	cmp	r3, r2
 8002198:	d907      	bls.n	80021aa <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800219a:	f003 fbc7 	bl	800592c <__errno>
 800219e:	4602      	mov	r2, r0
 80021a0:	230c      	movs	r3, #12
 80021a2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80021a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021a8:	e006      	b.n	80021b8 <_sbrk+0x48>
	}

	heap_end += incr;
 80021aa:	4b05      	ldr	r3, [pc, #20]	; (80021c0 <_sbrk+0x50>)
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4413      	add	r3, r2
 80021b2:	4a03      	ldr	r2, [pc, #12]	; (80021c0 <_sbrk+0x50>)
 80021b4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80021b6:	68fb      	ldr	r3, [r7, #12]
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3710      	adds	r7, #16
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	20000204 	.word	0x20000204
 80021c4:	20000308 	.word	0x20000308

080021c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021cc:	4b08      	ldr	r3, [pc, #32]	; (80021f0 <SystemInit+0x28>)
 80021ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021d2:	4a07      	ldr	r2, [pc, #28]	; (80021f0 <SystemInit+0x28>)
 80021d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80021dc:	4b04      	ldr	r3, [pc, #16]	; (80021f0 <SystemInit+0x28>)
 80021de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80021e2:	609a      	str	r2, [r3, #8]
#endif
}
 80021e4:	bf00      	nop
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	e000ed00 	.word	0xe000ed00

080021f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80021f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800222c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80021f8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80021fa:	e003      	b.n	8002204 <LoopCopyDataInit>

080021fc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80021fc:	4b0c      	ldr	r3, [pc, #48]	; (8002230 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80021fe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002200:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002202:	3104      	adds	r1, #4

08002204 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002204:	480b      	ldr	r0, [pc, #44]	; (8002234 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002206:	4b0c      	ldr	r3, [pc, #48]	; (8002238 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002208:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800220a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800220c:	d3f6      	bcc.n	80021fc <CopyDataInit>
  ldr  r2, =_sbss
 800220e:	4a0b      	ldr	r2, [pc, #44]	; (800223c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002210:	e002      	b.n	8002218 <LoopFillZerobss>

08002212 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002212:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002214:	f842 3b04 	str.w	r3, [r2], #4

08002218 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002218:	4b09      	ldr	r3, [pc, #36]	; (8002240 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800221a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800221c:	d3f9      	bcc.n	8002212 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800221e:	f7ff ffd3 	bl	80021c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002222:	f003 fb89 	bl	8005938 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002226:	f7ff f94f 	bl	80014c8 <main>
  bx  lr    
 800222a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800222c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002230:	08009718 	.word	0x08009718
  ldr  r0, =_sdata
 8002234:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002238:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 800223c:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8002240:	20000304 	.word	0x20000304

08002244 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002244:	e7fe      	b.n	8002244 <ADC_IRQHandler>
	...

08002248 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800224c:	4b0e      	ldr	r3, [pc, #56]	; (8002288 <HAL_Init+0x40>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a0d      	ldr	r2, [pc, #52]	; (8002288 <HAL_Init+0x40>)
 8002252:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002256:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002258:	4b0b      	ldr	r3, [pc, #44]	; (8002288 <HAL_Init+0x40>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a0a      	ldr	r2, [pc, #40]	; (8002288 <HAL_Init+0x40>)
 800225e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002262:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002264:	4b08      	ldr	r3, [pc, #32]	; (8002288 <HAL_Init+0x40>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a07      	ldr	r2, [pc, #28]	; (8002288 <HAL_Init+0x40>)
 800226a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800226e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002270:	2003      	movs	r0, #3
 8002272:	f000 f94d 	bl	8002510 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002276:	2000      	movs	r0, #0
 8002278:	f000 f808 	bl	800228c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800227c:	f7ff fe2e 	bl	8001edc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	40023c00 	.word	0x40023c00

0800228c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002294:	4b12      	ldr	r3, [pc, #72]	; (80022e0 <HAL_InitTick+0x54>)
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	4b12      	ldr	r3, [pc, #72]	; (80022e4 <HAL_InitTick+0x58>)
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	4619      	mov	r1, r3
 800229e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80022a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022aa:	4618      	mov	r0, r3
 80022ac:	f000 f965 	bl	800257a <HAL_SYSTICK_Config>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e00e      	b.n	80022d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2b0f      	cmp	r3, #15
 80022be:	d80a      	bhi.n	80022d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022c0:	2200      	movs	r2, #0
 80022c2:	6879      	ldr	r1, [r7, #4]
 80022c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80022c8:	f000 f92d 	bl	8002526 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022cc:	4a06      	ldr	r2, [pc, #24]	; (80022e8 <HAL_InitTick+0x5c>)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022d2:	2300      	movs	r3, #0
 80022d4:	e000      	b.n	80022d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3708      	adds	r7, #8
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	20000000 	.word	0x20000000
 80022e4:	20000008 	.word	0x20000008
 80022e8:	20000004 	.word	0x20000004

080022ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022f0:	4b06      	ldr	r3, [pc, #24]	; (800230c <HAL_IncTick+0x20>)
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	461a      	mov	r2, r3
 80022f6:	4b06      	ldr	r3, [pc, #24]	; (8002310 <HAL_IncTick+0x24>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4413      	add	r3, r2
 80022fc:	4a04      	ldr	r2, [pc, #16]	; (8002310 <HAL_IncTick+0x24>)
 80022fe:	6013      	str	r3, [r2, #0]
}
 8002300:	bf00      	nop
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	20000008 	.word	0x20000008
 8002310:	200002fc 	.word	0x200002fc

08002314 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
  return uwTick;
 8002318:	4b03      	ldr	r3, [pc, #12]	; (8002328 <HAL_GetTick+0x14>)
 800231a:	681b      	ldr	r3, [r3, #0]
}
 800231c:	4618      	mov	r0, r3
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	200002fc 	.word	0x200002fc

0800232c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002334:	f7ff ffee 	bl	8002314 <HAL_GetTick>
 8002338:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002344:	d005      	beq.n	8002352 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002346:	4b09      	ldr	r3, [pc, #36]	; (800236c <HAL_Delay+0x40>)
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	461a      	mov	r2, r3
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	4413      	add	r3, r2
 8002350:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002352:	bf00      	nop
 8002354:	f7ff ffde 	bl	8002314 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	68fa      	ldr	r2, [r7, #12]
 8002360:	429a      	cmp	r2, r3
 8002362:	d8f7      	bhi.n	8002354 <HAL_Delay+0x28>
  {
  }
}
 8002364:	bf00      	nop
 8002366:	3710      	adds	r7, #16
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	20000008 	.word	0x20000008

08002370 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002370:	b480      	push	{r7}
 8002372:	b085      	sub	sp, #20
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f003 0307 	and.w	r3, r3, #7
 800237e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002380:	4b0c      	ldr	r3, [pc, #48]	; (80023b4 <__NVIC_SetPriorityGrouping+0x44>)
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002386:	68ba      	ldr	r2, [r7, #8]
 8002388:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800238c:	4013      	ands	r3, r2
 800238e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002398:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800239c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023a2:	4a04      	ldr	r2, [pc, #16]	; (80023b4 <__NVIC_SetPriorityGrouping+0x44>)
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	60d3      	str	r3, [r2, #12]
}
 80023a8:	bf00      	nop
 80023aa:	3714      	adds	r7, #20
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr
 80023b4:	e000ed00 	.word	0xe000ed00

080023b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023bc:	4b04      	ldr	r3, [pc, #16]	; (80023d0 <__NVIC_GetPriorityGrouping+0x18>)
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	0a1b      	lsrs	r3, r3, #8
 80023c2:	f003 0307 	and.w	r3, r3, #7
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr
 80023d0:	e000ed00 	.word	0xe000ed00

080023d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	4603      	mov	r3, r0
 80023dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	db0b      	blt.n	80023fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023e6:	79fb      	ldrb	r3, [r7, #7]
 80023e8:	f003 021f 	and.w	r2, r3, #31
 80023ec:	4907      	ldr	r1, [pc, #28]	; (800240c <__NVIC_EnableIRQ+0x38>)
 80023ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f2:	095b      	lsrs	r3, r3, #5
 80023f4:	2001      	movs	r0, #1
 80023f6:	fa00 f202 	lsl.w	r2, r0, r2
 80023fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023fe:	bf00      	nop
 8002400:	370c      	adds	r7, #12
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	e000e100 	.word	0xe000e100

08002410 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	4603      	mov	r3, r0
 8002418:	6039      	str	r1, [r7, #0]
 800241a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800241c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002420:	2b00      	cmp	r3, #0
 8002422:	db0a      	blt.n	800243a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	b2da      	uxtb	r2, r3
 8002428:	490c      	ldr	r1, [pc, #48]	; (800245c <__NVIC_SetPriority+0x4c>)
 800242a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242e:	0112      	lsls	r2, r2, #4
 8002430:	b2d2      	uxtb	r2, r2
 8002432:	440b      	add	r3, r1
 8002434:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002438:	e00a      	b.n	8002450 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	b2da      	uxtb	r2, r3
 800243e:	4908      	ldr	r1, [pc, #32]	; (8002460 <__NVIC_SetPriority+0x50>)
 8002440:	79fb      	ldrb	r3, [r7, #7]
 8002442:	f003 030f 	and.w	r3, r3, #15
 8002446:	3b04      	subs	r3, #4
 8002448:	0112      	lsls	r2, r2, #4
 800244a:	b2d2      	uxtb	r2, r2
 800244c:	440b      	add	r3, r1
 800244e:	761a      	strb	r2, [r3, #24]
}
 8002450:	bf00      	nop
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr
 800245c:	e000e100 	.word	0xe000e100
 8002460:	e000ed00 	.word	0xe000ed00

08002464 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002464:	b480      	push	{r7}
 8002466:	b089      	sub	sp, #36	; 0x24
 8002468:	af00      	add	r7, sp, #0
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	60b9      	str	r1, [r7, #8]
 800246e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f003 0307 	and.w	r3, r3, #7
 8002476:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	f1c3 0307 	rsb	r3, r3, #7
 800247e:	2b04      	cmp	r3, #4
 8002480:	bf28      	it	cs
 8002482:	2304      	movcs	r3, #4
 8002484:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	3304      	adds	r3, #4
 800248a:	2b06      	cmp	r3, #6
 800248c:	d902      	bls.n	8002494 <NVIC_EncodePriority+0x30>
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	3b03      	subs	r3, #3
 8002492:	e000      	b.n	8002496 <NVIC_EncodePriority+0x32>
 8002494:	2300      	movs	r3, #0
 8002496:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002498:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	fa02 f303 	lsl.w	r3, r2, r3
 80024a2:	43da      	mvns	r2, r3
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	401a      	ands	r2, r3
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	fa01 f303 	lsl.w	r3, r1, r3
 80024b6:	43d9      	mvns	r1, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024bc:	4313      	orrs	r3, r2
         );
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3724      	adds	r7, #36	; 0x24
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
	...

080024cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	3b01      	subs	r3, #1
 80024d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024dc:	d301      	bcc.n	80024e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024de:	2301      	movs	r3, #1
 80024e0:	e00f      	b.n	8002502 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024e2:	4a0a      	ldr	r2, [pc, #40]	; (800250c <SysTick_Config+0x40>)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	3b01      	subs	r3, #1
 80024e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024ea:	210f      	movs	r1, #15
 80024ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80024f0:	f7ff ff8e 	bl	8002410 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024f4:	4b05      	ldr	r3, [pc, #20]	; (800250c <SysTick_Config+0x40>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024fa:	4b04      	ldr	r3, [pc, #16]	; (800250c <SysTick_Config+0x40>)
 80024fc:	2207      	movs	r2, #7
 80024fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	3708      	adds	r7, #8
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	e000e010 	.word	0xe000e010

08002510 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f7ff ff29 	bl	8002370 <__NVIC_SetPriorityGrouping>
}
 800251e:	bf00      	nop
 8002520:	3708      	adds	r7, #8
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}

08002526 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002526:	b580      	push	{r7, lr}
 8002528:	b086      	sub	sp, #24
 800252a:	af00      	add	r7, sp, #0
 800252c:	4603      	mov	r3, r0
 800252e:	60b9      	str	r1, [r7, #8]
 8002530:	607a      	str	r2, [r7, #4]
 8002532:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002534:	2300      	movs	r3, #0
 8002536:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002538:	f7ff ff3e 	bl	80023b8 <__NVIC_GetPriorityGrouping>
 800253c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	68b9      	ldr	r1, [r7, #8]
 8002542:	6978      	ldr	r0, [r7, #20]
 8002544:	f7ff ff8e 	bl	8002464 <NVIC_EncodePriority>
 8002548:	4602      	mov	r2, r0
 800254a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800254e:	4611      	mov	r1, r2
 8002550:	4618      	mov	r0, r3
 8002552:	f7ff ff5d 	bl	8002410 <__NVIC_SetPriority>
}
 8002556:	bf00      	nop
 8002558:	3718      	adds	r7, #24
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}

0800255e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800255e:	b580      	push	{r7, lr}
 8002560:	b082      	sub	sp, #8
 8002562:	af00      	add	r7, sp, #0
 8002564:	4603      	mov	r3, r0
 8002566:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002568:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800256c:	4618      	mov	r0, r3
 800256e:	f7ff ff31 	bl	80023d4 <__NVIC_EnableIRQ>
}
 8002572:	bf00      	nop
 8002574:	3708      	adds	r7, #8
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}

0800257a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800257a:	b580      	push	{r7, lr}
 800257c:	b082      	sub	sp, #8
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f7ff ffa2 	bl	80024cc <SysTick_Config>
 8002588:	4603      	mov	r3, r0
}
 800258a:	4618      	mov	r0, r3
 800258c:	3708      	adds	r7, #8
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
	...

08002594 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002594:	b480      	push	{r7}
 8002596:	b089      	sub	sp, #36	; 0x24
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800259e:	2300      	movs	r3, #0
 80025a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025a2:	2300      	movs	r3, #0
 80025a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025a6:	2300      	movs	r3, #0
 80025a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025aa:	2300      	movs	r3, #0
 80025ac:	61fb      	str	r3, [r7, #28]
 80025ae:	e165      	b.n	800287c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025b0:	2201      	movs	r2, #1
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	697a      	ldr	r2, [r7, #20]
 80025c0:	4013      	ands	r3, r2
 80025c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025c4:	693a      	ldr	r2, [r7, #16]
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	f040 8154 	bne.w	8002876 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d00b      	beq.n	80025ee <HAL_GPIO_Init+0x5a>
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d007      	beq.n	80025ee <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80025e2:	2b11      	cmp	r3, #17
 80025e4:	d003      	beq.n	80025ee <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	2b12      	cmp	r3, #18
 80025ec:	d130      	bne.n	8002650 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	005b      	lsls	r3, r3, #1
 80025f8:	2203      	movs	r2, #3
 80025fa:	fa02 f303 	lsl.w	r3, r2, r3
 80025fe:	43db      	mvns	r3, r3
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	4013      	ands	r3, r2
 8002604:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	68da      	ldr	r2, [r3, #12]
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	005b      	lsls	r3, r3, #1
 800260e:	fa02 f303 	lsl.w	r3, r2, r3
 8002612:	69ba      	ldr	r2, [r7, #24]
 8002614:	4313      	orrs	r3, r2
 8002616:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	69ba      	ldr	r2, [r7, #24]
 800261c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002624:	2201      	movs	r2, #1
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	fa02 f303 	lsl.w	r3, r2, r3
 800262c:	43db      	mvns	r3, r3
 800262e:	69ba      	ldr	r2, [r7, #24]
 8002630:	4013      	ands	r3, r2
 8002632:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	091b      	lsrs	r3, r3, #4
 800263a:	f003 0201 	and.w	r2, r3, #1
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	fa02 f303 	lsl.w	r3, r2, r3
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	4313      	orrs	r3, r2
 8002648:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	69ba      	ldr	r2, [r7, #24]
 800264e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	2203      	movs	r2, #3
 800265c:	fa02 f303 	lsl.w	r3, r2, r3
 8002660:	43db      	mvns	r3, r3
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	4013      	ands	r3, r2
 8002666:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	689a      	ldr	r2, [r3, #8]
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	4313      	orrs	r3, r2
 8002678:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	2b02      	cmp	r3, #2
 8002686:	d003      	beq.n	8002690 <HAL_GPIO_Init+0xfc>
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	2b12      	cmp	r3, #18
 800268e:	d123      	bne.n	80026d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	08da      	lsrs	r2, r3, #3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	3208      	adds	r2, #8
 8002698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800269c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	f003 0307 	and.w	r3, r3, #7
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	220f      	movs	r2, #15
 80026a8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ac:	43db      	mvns	r3, r3
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	4013      	ands	r3, r2
 80026b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	691a      	ldr	r2, [r3, #16]
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	f003 0307 	and.w	r3, r3, #7
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	fa02 f303 	lsl.w	r3, r2, r3
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	08da      	lsrs	r2, r3, #3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	3208      	adds	r2, #8
 80026d2:	69b9      	ldr	r1, [r7, #24]
 80026d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	005b      	lsls	r3, r3, #1
 80026e2:	2203      	movs	r2, #3
 80026e4:	fa02 f303 	lsl.w	r3, r2, r3
 80026e8:	43db      	mvns	r3, r3
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	4013      	ands	r3, r2
 80026ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f003 0203 	and.w	r2, r3, #3
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	005b      	lsls	r3, r3, #1
 80026fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	4313      	orrs	r3, r2
 8002704:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002714:	2b00      	cmp	r3, #0
 8002716:	f000 80ae 	beq.w	8002876 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800271a:	2300      	movs	r3, #0
 800271c:	60fb      	str	r3, [r7, #12]
 800271e:	4b5c      	ldr	r3, [pc, #368]	; (8002890 <HAL_GPIO_Init+0x2fc>)
 8002720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002722:	4a5b      	ldr	r2, [pc, #364]	; (8002890 <HAL_GPIO_Init+0x2fc>)
 8002724:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002728:	6453      	str	r3, [r2, #68]	; 0x44
 800272a:	4b59      	ldr	r3, [pc, #356]	; (8002890 <HAL_GPIO_Init+0x2fc>)
 800272c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800272e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002732:	60fb      	str	r3, [r7, #12]
 8002734:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002736:	4a57      	ldr	r2, [pc, #348]	; (8002894 <HAL_GPIO_Init+0x300>)
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	089b      	lsrs	r3, r3, #2
 800273c:	3302      	adds	r3, #2
 800273e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002742:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	f003 0303 	and.w	r3, r3, #3
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	220f      	movs	r2, #15
 800274e:	fa02 f303 	lsl.w	r3, r2, r3
 8002752:	43db      	mvns	r3, r3
 8002754:	69ba      	ldr	r2, [r7, #24]
 8002756:	4013      	ands	r3, r2
 8002758:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a4e      	ldr	r2, [pc, #312]	; (8002898 <HAL_GPIO_Init+0x304>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d025      	beq.n	80027ae <HAL_GPIO_Init+0x21a>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a4d      	ldr	r2, [pc, #308]	; (800289c <HAL_GPIO_Init+0x308>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d01f      	beq.n	80027aa <HAL_GPIO_Init+0x216>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a4c      	ldr	r2, [pc, #304]	; (80028a0 <HAL_GPIO_Init+0x30c>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d019      	beq.n	80027a6 <HAL_GPIO_Init+0x212>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a4b      	ldr	r2, [pc, #300]	; (80028a4 <HAL_GPIO_Init+0x310>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d013      	beq.n	80027a2 <HAL_GPIO_Init+0x20e>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a4a      	ldr	r2, [pc, #296]	; (80028a8 <HAL_GPIO_Init+0x314>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d00d      	beq.n	800279e <HAL_GPIO_Init+0x20a>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a49      	ldr	r2, [pc, #292]	; (80028ac <HAL_GPIO_Init+0x318>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d007      	beq.n	800279a <HAL_GPIO_Init+0x206>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a48      	ldr	r2, [pc, #288]	; (80028b0 <HAL_GPIO_Init+0x31c>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d101      	bne.n	8002796 <HAL_GPIO_Init+0x202>
 8002792:	2306      	movs	r3, #6
 8002794:	e00c      	b.n	80027b0 <HAL_GPIO_Init+0x21c>
 8002796:	2307      	movs	r3, #7
 8002798:	e00a      	b.n	80027b0 <HAL_GPIO_Init+0x21c>
 800279a:	2305      	movs	r3, #5
 800279c:	e008      	b.n	80027b0 <HAL_GPIO_Init+0x21c>
 800279e:	2304      	movs	r3, #4
 80027a0:	e006      	b.n	80027b0 <HAL_GPIO_Init+0x21c>
 80027a2:	2303      	movs	r3, #3
 80027a4:	e004      	b.n	80027b0 <HAL_GPIO_Init+0x21c>
 80027a6:	2302      	movs	r3, #2
 80027a8:	e002      	b.n	80027b0 <HAL_GPIO_Init+0x21c>
 80027aa:	2301      	movs	r3, #1
 80027ac:	e000      	b.n	80027b0 <HAL_GPIO_Init+0x21c>
 80027ae:	2300      	movs	r3, #0
 80027b0:	69fa      	ldr	r2, [r7, #28]
 80027b2:	f002 0203 	and.w	r2, r2, #3
 80027b6:	0092      	lsls	r2, r2, #2
 80027b8:	4093      	lsls	r3, r2
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	4313      	orrs	r3, r2
 80027be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027c0:	4934      	ldr	r1, [pc, #208]	; (8002894 <HAL_GPIO_Init+0x300>)
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	089b      	lsrs	r3, r3, #2
 80027c6:	3302      	adds	r3, #2
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027ce:	4b39      	ldr	r3, [pc, #228]	; (80028b4 <HAL_GPIO_Init+0x320>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	43db      	mvns	r3, r3
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	4013      	ands	r3, r2
 80027dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d003      	beq.n	80027f2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027f2:	4a30      	ldr	r2, [pc, #192]	; (80028b4 <HAL_GPIO_Init+0x320>)
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80027f8:	4b2e      	ldr	r3, [pc, #184]	; (80028b4 <HAL_GPIO_Init+0x320>)
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	43db      	mvns	r3, r3
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	4013      	ands	r3, r2
 8002806:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d003      	beq.n	800281c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	4313      	orrs	r3, r2
 800281a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800281c:	4a25      	ldr	r2, [pc, #148]	; (80028b4 <HAL_GPIO_Init+0x320>)
 800281e:	69bb      	ldr	r3, [r7, #24]
 8002820:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002822:	4b24      	ldr	r3, [pc, #144]	; (80028b4 <HAL_GPIO_Init+0x320>)
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	43db      	mvns	r3, r3
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	4013      	ands	r3, r2
 8002830:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d003      	beq.n	8002846 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800283e:	69ba      	ldr	r2, [r7, #24]
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	4313      	orrs	r3, r2
 8002844:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002846:	4a1b      	ldr	r2, [pc, #108]	; (80028b4 <HAL_GPIO_Init+0x320>)
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800284c:	4b19      	ldr	r3, [pc, #100]	; (80028b4 <HAL_GPIO_Init+0x320>)
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	43db      	mvns	r3, r3
 8002856:	69ba      	ldr	r2, [r7, #24]
 8002858:	4013      	ands	r3, r2
 800285a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002864:	2b00      	cmp	r3, #0
 8002866:	d003      	beq.n	8002870 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	4313      	orrs	r3, r2
 800286e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002870:	4a10      	ldr	r2, [pc, #64]	; (80028b4 <HAL_GPIO_Init+0x320>)
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	3301      	adds	r3, #1
 800287a:	61fb      	str	r3, [r7, #28]
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	2b0f      	cmp	r3, #15
 8002880:	f67f ae96 	bls.w	80025b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002884:	bf00      	nop
 8002886:	3724      	adds	r7, #36	; 0x24
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr
 8002890:	40023800 	.word	0x40023800
 8002894:	40013800 	.word	0x40013800
 8002898:	40020000 	.word	0x40020000
 800289c:	40020400 	.word	0x40020400
 80028a0:	40020800 	.word	0x40020800
 80028a4:	40020c00 	.word	0x40020c00
 80028a8:	40021000 	.word	0x40021000
 80028ac:	40021400 	.word	0x40021400
 80028b0:	40021800 	.word	0x40021800
 80028b4:	40013c00 	.word	0x40013c00

080028b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	460b      	mov	r3, r1
 80028c2:	807b      	strh	r3, [r7, #2]
 80028c4:	4613      	mov	r3, r2
 80028c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028c8:	787b      	ldrb	r3, [r7, #1]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d003      	beq.n	80028d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028ce:	887a      	ldrh	r2, [r7, #2]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028d4:	e003      	b.n	80028de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028d6:	887b      	ldrh	r3, [r7, #2]
 80028d8:	041a      	lsls	r2, r3, #16
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	619a      	str	r2, [r3, #24]
}
 80028de:	bf00      	nop
 80028e0:	370c      	adds	r7, #12
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
	...

080028ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	4603      	mov	r3, r0
 80028f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80028f6:	4b08      	ldr	r3, [pc, #32]	; (8002918 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028f8:	695a      	ldr	r2, [r3, #20]
 80028fa:	88fb      	ldrh	r3, [r7, #6]
 80028fc:	4013      	ands	r3, r2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d006      	beq.n	8002910 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002902:	4a05      	ldr	r2, [pc, #20]	; (8002918 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002904:	88fb      	ldrh	r3, [r7, #6]
 8002906:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002908:	88fb      	ldrh	r3, [r7, #6]
 800290a:	4618      	mov	r0, r3
 800290c:	f7fe fdc6 	bl	800149c <HAL_GPIO_EXTI_Callback>
  }
}
 8002910:	bf00      	nop
 8002912:	3708      	adds	r7, #8
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	40013c00 	.word	0x40013c00

0800291c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d101      	bne.n	800292e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e11f      	b.n	8002b6e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002934:	b2db      	uxtb	r3, r3
 8002936:	2b00      	cmp	r3, #0
 8002938:	d106      	bne.n	8002948 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f7ff faf2 	bl	8001f2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2224      	movs	r2, #36	; 0x24
 800294c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f022 0201 	bic.w	r2, r2, #1
 800295e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800296e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800297e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002980:	f001 f9ee 	bl	8003d60 <HAL_RCC_GetPCLK1Freq>
 8002984:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	4a7b      	ldr	r2, [pc, #492]	; (8002b78 <HAL_I2C_Init+0x25c>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d807      	bhi.n	80029a0 <HAL_I2C_Init+0x84>
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	4a7a      	ldr	r2, [pc, #488]	; (8002b7c <HAL_I2C_Init+0x260>)
 8002994:	4293      	cmp	r3, r2
 8002996:	bf94      	ite	ls
 8002998:	2301      	movls	r3, #1
 800299a:	2300      	movhi	r3, #0
 800299c:	b2db      	uxtb	r3, r3
 800299e:	e006      	b.n	80029ae <HAL_I2C_Init+0x92>
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	4a77      	ldr	r2, [pc, #476]	; (8002b80 <HAL_I2C_Init+0x264>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	bf94      	ite	ls
 80029a8:	2301      	movls	r3, #1
 80029aa:	2300      	movhi	r3, #0
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d001      	beq.n	80029b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e0db      	b.n	8002b6e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	4a72      	ldr	r2, [pc, #456]	; (8002b84 <HAL_I2C_Init+0x268>)
 80029ba:	fba2 2303 	umull	r2, r3, r2, r3
 80029be:	0c9b      	lsrs	r3, r3, #18
 80029c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68ba      	ldr	r2, [r7, #8]
 80029d2:	430a      	orrs	r2, r1
 80029d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	6a1b      	ldr	r3, [r3, #32]
 80029dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	4a64      	ldr	r2, [pc, #400]	; (8002b78 <HAL_I2C_Init+0x25c>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d802      	bhi.n	80029f0 <HAL_I2C_Init+0xd4>
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	3301      	adds	r3, #1
 80029ee:	e009      	b.n	8002a04 <HAL_I2C_Init+0xe8>
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80029f6:	fb02 f303 	mul.w	r3, r2, r3
 80029fa:	4a63      	ldr	r2, [pc, #396]	; (8002b88 <HAL_I2C_Init+0x26c>)
 80029fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002a00:	099b      	lsrs	r3, r3, #6
 8002a02:	3301      	adds	r3, #1
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	6812      	ldr	r2, [r2, #0]
 8002a08:	430b      	orrs	r3, r1
 8002a0a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	69db      	ldr	r3, [r3, #28]
 8002a12:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002a16:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	4956      	ldr	r1, [pc, #344]	; (8002b78 <HAL_I2C_Init+0x25c>)
 8002a20:	428b      	cmp	r3, r1
 8002a22:	d80d      	bhi.n	8002a40 <HAL_I2C_Init+0x124>
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	1e59      	subs	r1, r3, #1
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	005b      	lsls	r3, r3, #1
 8002a2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a32:	3301      	adds	r3, #1
 8002a34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a38:	2b04      	cmp	r3, #4
 8002a3a:	bf38      	it	cc
 8002a3c:	2304      	movcc	r3, #4
 8002a3e:	e04f      	b.n	8002ae0 <HAL_I2C_Init+0x1c4>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d111      	bne.n	8002a6c <HAL_I2C_Init+0x150>
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	1e58      	subs	r0, r3, #1
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6859      	ldr	r1, [r3, #4]
 8002a50:	460b      	mov	r3, r1
 8002a52:	005b      	lsls	r3, r3, #1
 8002a54:	440b      	add	r3, r1
 8002a56:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	bf0c      	ite	eq
 8002a64:	2301      	moveq	r3, #1
 8002a66:	2300      	movne	r3, #0
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	e012      	b.n	8002a92 <HAL_I2C_Init+0x176>
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	1e58      	subs	r0, r3, #1
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6859      	ldr	r1, [r3, #4]
 8002a74:	460b      	mov	r3, r1
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	440b      	add	r3, r1
 8002a7a:	0099      	lsls	r1, r3, #2
 8002a7c:	440b      	add	r3, r1
 8002a7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a82:	3301      	adds	r3, #1
 8002a84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	bf0c      	ite	eq
 8002a8c:	2301      	moveq	r3, #1
 8002a8e:	2300      	movne	r3, #0
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d001      	beq.n	8002a9a <HAL_I2C_Init+0x17e>
 8002a96:	2301      	movs	r3, #1
 8002a98:	e022      	b.n	8002ae0 <HAL_I2C_Init+0x1c4>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d10e      	bne.n	8002ac0 <HAL_I2C_Init+0x1a4>
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	1e58      	subs	r0, r3, #1
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6859      	ldr	r1, [r3, #4]
 8002aaa:	460b      	mov	r3, r1
 8002aac:	005b      	lsls	r3, r3, #1
 8002aae:	440b      	add	r3, r1
 8002ab0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002abe:	e00f      	b.n	8002ae0 <HAL_I2C_Init+0x1c4>
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	1e58      	subs	r0, r3, #1
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6859      	ldr	r1, [r3, #4]
 8002ac8:	460b      	mov	r3, r1
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	440b      	add	r3, r1
 8002ace:	0099      	lsls	r1, r3, #2
 8002ad0:	440b      	add	r3, r1
 8002ad2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002adc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ae0:	6879      	ldr	r1, [r7, #4]
 8002ae2:	6809      	ldr	r1, [r1, #0]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	69da      	ldr	r2, [r3, #28]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a1b      	ldr	r3, [r3, #32]
 8002afa:	431a      	orrs	r2, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	430a      	orrs	r2, r1
 8002b02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002b0e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	6911      	ldr	r1, [r2, #16]
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	68d2      	ldr	r2, [r2, #12]
 8002b1a:	4311      	orrs	r1, r2
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	6812      	ldr	r2, [r2, #0]
 8002b20:	430b      	orrs	r3, r1
 8002b22:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	695a      	ldr	r2, [r3, #20]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	699b      	ldr	r3, [r3, #24]
 8002b36:	431a      	orrs	r2, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	430a      	orrs	r2, r1
 8002b3e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f042 0201 	orr.w	r2, r2, #1
 8002b4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2220      	movs	r2, #32
 8002b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3710      	adds	r7, #16
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	000186a0 	.word	0x000186a0
 8002b7c:	001e847f 	.word	0x001e847f
 8002b80:	003d08ff 	.word	0x003d08ff
 8002b84:	431bde83 	.word	0x431bde83
 8002b88:	10624dd3 	.word	0x10624dd3

08002b8c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b088      	sub	sp, #32
 8002b90:	af02      	add	r7, sp, #8
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	607a      	str	r2, [r7, #4]
 8002b96:	461a      	mov	r2, r3
 8002b98:	460b      	mov	r3, r1
 8002b9a:	817b      	strh	r3, [r7, #10]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ba0:	f7ff fbb8 	bl	8002314 <HAL_GetTick>
 8002ba4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2b20      	cmp	r3, #32
 8002bb0:	f040 80e0 	bne.w	8002d74 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	9300      	str	r3, [sp, #0]
 8002bb8:	2319      	movs	r3, #25
 8002bba:	2201      	movs	r2, #1
 8002bbc:	4970      	ldr	r1, [pc, #448]	; (8002d80 <HAL_I2C_Master_Transmit+0x1f4>)
 8002bbe:	68f8      	ldr	r0, [r7, #12]
 8002bc0:	f000 fdfe 	bl	80037c0 <I2C_WaitOnFlagUntilTimeout>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d001      	beq.n	8002bce <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002bca:	2302      	movs	r3, #2
 8002bcc:	e0d3      	b.n	8002d76 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d101      	bne.n	8002bdc <HAL_I2C_Master_Transmit+0x50>
 8002bd8:	2302      	movs	r3, #2
 8002bda:	e0cc      	b.n	8002d76 <HAL_I2C_Master_Transmit+0x1ea>
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0301 	and.w	r3, r3, #1
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d007      	beq.n	8002c02 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f042 0201 	orr.w	r2, r2, #1
 8002c00:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c10:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2221      	movs	r2, #33	; 0x21
 8002c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2210      	movs	r2, #16
 8002c1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2200      	movs	r2, #0
 8002c26:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	893a      	ldrh	r2, [r7, #8]
 8002c32:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c38:	b29a      	uxth	r2, r3
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	4a50      	ldr	r2, [pc, #320]	; (8002d84 <HAL_I2C_Master_Transmit+0x1f8>)
 8002c42:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002c44:	8979      	ldrh	r1, [r7, #10]
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	6a3a      	ldr	r2, [r7, #32]
 8002c4a:	68f8      	ldr	r0, [r7, #12]
 8002c4c:	f000 fbbc 	bl	80033c8 <I2C_MasterRequestWrite>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e08d      	b.n	8002d76 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	613b      	str	r3, [r7, #16]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	695b      	ldr	r3, [r3, #20]
 8002c64:	613b      	str	r3, [r7, #16]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	699b      	ldr	r3, [r3, #24]
 8002c6c:	613b      	str	r3, [r7, #16]
 8002c6e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002c70:	e066      	b.n	8002d40 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c72:	697a      	ldr	r2, [r7, #20]
 8002c74:	6a39      	ldr	r1, [r7, #32]
 8002c76:	68f8      	ldr	r0, [r7, #12]
 8002c78:	f000 fe78 	bl	800396c <I2C_WaitOnTXEFlagUntilTimeout>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d00d      	beq.n	8002c9e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c86:	2b04      	cmp	r3, #4
 8002c88:	d107      	bne.n	8002c9a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c98:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e06b      	b.n	8002d76 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca2:	781a      	ldrb	r2, [r3, #0]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cae:	1c5a      	adds	r2, r3, #1
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	3b01      	subs	r3, #1
 8002cbc:	b29a      	uxth	r2, r3
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	b29a      	uxth	r2, r3
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	695b      	ldr	r3, [r3, #20]
 8002cd4:	f003 0304 	and.w	r3, r3, #4
 8002cd8:	2b04      	cmp	r3, #4
 8002cda:	d11b      	bne.n	8002d14 <HAL_I2C_Master_Transmit+0x188>
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d017      	beq.n	8002d14 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce8:	781a      	ldrb	r2, [r3, #0]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf4:	1c5a      	adds	r2, r3, #1
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	3b01      	subs	r3, #1
 8002d02:	b29a      	uxth	r2, r3
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d0c:	3b01      	subs	r3, #1
 8002d0e:	b29a      	uxth	r2, r3
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d14:	697a      	ldr	r2, [r7, #20]
 8002d16:	6a39      	ldr	r1, [r7, #32]
 8002d18:	68f8      	ldr	r0, [r7, #12]
 8002d1a:	f000 fe68 	bl	80039ee <I2C_WaitOnBTFFlagUntilTimeout>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d00d      	beq.n	8002d40 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d28:	2b04      	cmp	r3, #4
 8002d2a:	d107      	bne.n	8002d3c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d3a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e01a      	b.n	8002d76 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d194      	bne.n	8002c72 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2220      	movs	r2, #32
 8002d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2200      	movs	r2, #0
 8002d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d70:	2300      	movs	r3, #0
 8002d72:	e000      	b.n	8002d76 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002d74:	2302      	movs	r3, #2
  }
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3718      	adds	r7, #24
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	00100002 	.word	0x00100002
 8002d84:	ffff0000 	.word	0xffff0000

08002d88 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b088      	sub	sp, #32
 8002d8c:	af02      	add	r7, sp, #8
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	4608      	mov	r0, r1
 8002d92:	4611      	mov	r1, r2
 8002d94:	461a      	mov	r2, r3
 8002d96:	4603      	mov	r3, r0
 8002d98:	817b      	strh	r3, [r7, #10]
 8002d9a:	460b      	mov	r3, r1
 8002d9c:	813b      	strh	r3, [r7, #8]
 8002d9e:	4613      	mov	r3, r2
 8002da0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002da2:	f7ff fab7 	bl	8002314 <HAL_GetTick>
 8002da6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	2b20      	cmp	r3, #32
 8002db2:	f040 80d9 	bne.w	8002f68 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	9300      	str	r3, [sp, #0]
 8002dba:	2319      	movs	r3, #25
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	496d      	ldr	r1, [pc, #436]	; (8002f74 <HAL_I2C_Mem_Write+0x1ec>)
 8002dc0:	68f8      	ldr	r0, [r7, #12]
 8002dc2:	f000 fcfd 	bl	80037c0 <I2C_WaitOnFlagUntilTimeout>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d001      	beq.n	8002dd0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002dcc:	2302      	movs	r3, #2
 8002dce:	e0cc      	b.n	8002f6a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d101      	bne.n	8002dde <HAL_I2C_Mem_Write+0x56>
 8002dda:	2302      	movs	r3, #2
 8002ddc:	e0c5      	b.n	8002f6a <HAL_I2C_Mem_Write+0x1e2>
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2201      	movs	r2, #1
 8002de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0301 	and.w	r3, r3, #1
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d007      	beq.n	8002e04 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f042 0201 	orr.w	r2, r2, #1
 8002e02:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e12:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2221      	movs	r2, #33	; 0x21
 8002e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2240      	movs	r2, #64	; 0x40
 8002e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2200      	movs	r2, #0
 8002e28:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6a3a      	ldr	r2, [r7, #32]
 8002e2e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002e34:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e3a:	b29a      	uxth	r2, r3
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	4a4d      	ldr	r2, [pc, #308]	; (8002f78 <HAL_I2C_Mem_Write+0x1f0>)
 8002e44:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e46:	88f8      	ldrh	r0, [r7, #6]
 8002e48:	893a      	ldrh	r2, [r7, #8]
 8002e4a:	8979      	ldrh	r1, [r7, #10]
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	9301      	str	r3, [sp, #4]
 8002e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e52:	9300      	str	r3, [sp, #0]
 8002e54:	4603      	mov	r3, r0
 8002e56:	68f8      	ldr	r0, [r7, #12]
 8002e58:	f000 fb38 	bl	80034cc <I2C_RequestMemoryWrite>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d052      	beq.n	8002f08 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e081      	b.n	8002f6a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e66:	697a      	ldr	r2, [r7, #20]
 8002e68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e6a:	68f8      	ldr	r0, [r7, #12]
 8002e6c:	f000 fd7e 	bl	800396c <I2C_WaitOnTXEFlagUntilTimeout>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d00d      	beq.n	8002e92 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7a:	2b04      	cmp	r3, #4
 8002e7c:	d107      	bne.n	8002e8e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e8c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e06b      	b.n	8002f6a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e96:	781a      	ldrb	r2, [r3, #0]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea2:	1c5a      	adds	r2, r3, #1
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eac:	3b01      	subs	r3, #1
 8002eae:	b29a      	uxth	r2, r3
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	b29a      	uxth	r2, r3
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	695b      	ldr	r3, [r3, #20]
 8002ec8:	f003 0304 	and.w	r3, r3, #4
 8002ecc:	2b04      	cmp	r3, #4
 8002ece:	d11b      	bne.n	8002f08 <HAL_I2C_Mem_Write+0x180>
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d017      	beq.n	8002f08 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002edc:	781a      	ldrb	r2, [r3, #0]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee8:	1c5a      	adds	r2, r3, #1
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ef2:	3b01      	subs	r3, #1
 8002ef4:	b29a      	uxth	r2, r3
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	3b01      	subs	r3, #1
 8002f02:	b29a      	uxth	r2, r3
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d1aa      	bne.n	8002e66 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f10:	697a      	ldr	r2, [r7, #20]
 8002f12:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f14:	68f8      	ldr	r0, [r7, #12]
 8002f16:	f000 fd6a 	bl	80039ee <I2C_WaitOnBTFFlagUntilTimeout>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d00d      	beq.n	8002f3c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f24:	2b04      	cmp	r3, #4
 8002f26:	d107      	bne.n	8002f38 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f36:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e016      	b.n	8002f6a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2220      	movs	r2, #32
 8002f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002f64:	2300      	movs	r3, #0
 8002f66:	e000      	b.n	8002f6a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002f68:	2302      	movs	r3, #2
  }
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3718      	adds	r7, #24
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	00100002 	.word	0x00100002
 8002f78:	ffff0000 	.word	0xffff0000

08002f7c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b08c      	sub	sp, #48	; 0x30
 8002f80:	af02      	add	r7, sp, #8
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	4608      	mov	r0, r1
 8002f86:	4611      	mov	r1, r2
 8002f88:	461a      	mov	r2, r3
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	817b      	strh	r3, [r7, #10]
 8002f8e:	460b      	mov	r3, r1
 8002f90:	813b      	strh	r3, [r7, #8]
 8002f92:	4613      	mov	r3, r2
 8002f94:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f96:	f7ff f9bd 	bl	8002314 <HAL_GetTick>
 8002f9a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	2b20      	cmp	r3, #32
 8002fa6:	f040 8208 	bne.w	80033ba <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fac:	9300      	str	r3, [sp, #0]
 8002fae:	2319      	movs	r3, #25
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	497b      	ldr	r1, [pc, #492]	; (80031a0 <HAL_I2C_Mem_Read+0x224>)
 8002fb4:	68f8      	ldr	r0, [r7, #12]
 8002fb6:	f000 fc03 	bl	80037c0 <I2C_WaitOnFlagUntilTimeout>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d001      	beq.n	8002fc4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002fc0:	2302      	movs	r3, #2
 8002fc2:	e1fb      	b.n	80033bc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d101      	bne.n	8002fd2 <HAL_I2C_Mem_Read+0x56>
 8002fce:	2302      	movs	r3, #2
 8002fd0:	e1f4      	b.n	80033bc <HAL_I2C_Mem_Read+0x440>
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0301 	and.w	r3, r3, #1
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d007      	beq.n	8002ff8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f042 0201 	orr.w	r2, r2, #1
 8002ff6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003006:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2222      	movs	r2, #34	; 0x22
 800300c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2240      	movs	r2, #64	; 0x40
 8003014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2200      	movs	r2, #0
 800301c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003022:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003028:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800302e:	b29a      	uxth	r2, r3
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	4a5b      	ldr	r2, [pc, #364]	; (80031a4 <HAL_I2C_Mem_Read+0x228>)
 8003038:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800303a:	88f8      	ldrh	r0, [r7, #6]
 800303c:	893a      	ldrh	r2, [r7, #8]
 800303e:	8979      	ldrh	r1, [r7, #10]
 8003040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003042:	9301      	str	r3, [sp, #4]
 8003044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003046:	9300      	str	r3, [sp, #0]
 8003048:	4603      	mov	r3, r0
 800304a:	68f8      	ldr	r0, [r7, #12]
 800304c:	f000 fad2 	bl	80035f4 <I2C_RequestMemoryRead>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d001      	beq.n	800305a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e1b0      	b.n	80033bc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800305e:	2b00      	cmp	r3, #0
 8003060:	d113      	bne.n	800308a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003062:	2300      	movs	r3, #0
 8003064:	623b      	str	r3, [r7, #32]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	695b      	ldr	r3, [r3, #20]
 800306c:	623b      	str	r3, [r7, #32]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	699b      	ldr	r3, [r3, #24]
 8003074:	623b      	str	r3, [r7, #32]
 8003076:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003086:	601a      	str	r2, [r3, #0]
 8003088:	e184      	b.n	8003394 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800308e:	2b01      	cmp	r3, #1
 8003090:	d11b      	bne.n	80030ca <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030a2:	2300      	movs	r3, #0
 80030a4:	61fb      	str	r3, [r7, #28]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	695b      	ldr	r3, [r3, #20]
 80030ac:	61fb      	str	r3, [r7, #28]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	699b      	ldr	r3, [r3, #24]
 80030b4:	61fb      	str	r3, [r7, #28]
 80030b6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030c6:	601a      	str	r2, [r3, #0]
 80030c8:	e164      	b.n	8003394 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d11b      	bne.n	800310a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030e0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030f0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030f2:	2300      	movs	r3, #0
 80030f4:	61bb      	str	r3, [r7, #24]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	695b      	ldr	r3, [r3, #20]
 80030fc:	61bb      	str	r3, [r7, #24]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	699b      	ldr	r3, [r3, #24]
 8003104:	61bb      	str	r3, [r7, #24]
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	e144      	b.n	8003394 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800310a:	2300      	movs	r3, #0
 800310c:	617b      	str	r3, [r7, #20]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	695b      	ldr	r3, [r3, #20]
 8003114:	617b      	str	r3, [r7, #20]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	699b      	ldr	r3, [r3, #24]
 800311c:	617b      	str	r3, [r7, #20]
 800311e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003120:	e138      	b.n	8003394 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003126:	2b03      	cmp	r3, #3
 8003128:	f200 80f1 	bhi.w	800330e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003130:	2b01      	cmp	r3, #1
 8003132:	d123      	bne.n	800317c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003134:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003136:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003138:	68f8      	ldr	r0, [r7, #12]
 800313a:	f000 fc99 	bl	8003a70 <I2C_WaitOnRXNEFlagUntilTimeout>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d001      	beq.n	8003148 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e139      	b.n	80033bc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	691a      	ldr	r2, [r3, #16]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003152:	b2d2      	uxtb	r2, r2
 8003154:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315a:	1c5a      	adds	r2, r3, #1
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003164:	3b01      	subs	r3, #1
 8003166:	b29a      	uxth	r2, r3
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003170:	b29b      	uxth	r3, r3
 8003172:	3b01      	subs	r3, #1
 8003174:	b29a      	uxth	r2, r3
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	855a      	strh	r2, [r3, #42]	; 0x2a
 800317a:	e10b      	b.n	8003394 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003180:	2b02      	cmp	r3, #2
 8003182:	d14e      	bne.n	8003222 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003186:	9300      	str	r3, [sp, #0]
 8003188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800318a:	2200      	movs	r2, #0
 800318c:	4906      	ldr	r1, [pc, #24]	; (80031a8 <HAL_I2C_Mem_Read+0x22c>)
 800318e:	68f8      	ldr	r0, [r7, #12]
 8003190:	f000 fb16 	bl	80037c0 <I2C_WaitOnFlagUntilTimeout>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d008      	beq.n	80031ac <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e10e      	b.n	80033bc <HAL_I2C_Mem_Read+0x440>
 800319e:	bf00      	nop
 80031a0:	00100002 	.word	0x00100002
 80031a4:	ffff0000 	.word	0xffff0000
 80031a8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	691a      	ldr	r2, [r3, #16]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c6:	b2d2      	uxtb	r2, r2
 80031c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ce:	1c5a      	adds	r2, r3, #1
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031d8:	3b01      	subs	r3, #1
 80031da:	b29a      	uxth	r2, r3
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	3b01      	subs	r3, #1
 80031e8:	b29a      	uxth	r2, r3
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	691a      	ldr	r2, [r3, #16]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f8:	b2d2      	uxtb	r2, r2
 80031fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003200:	1c5a      	adds	r2, r3, #1
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800320a:	3b01      	subs	r3, #1
 800320c:	b29a      	uxth	r2, r3
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003216:	b29b      	uxth	r3, r3
 8003218:	3b01      	subs	r3, #1
 800321a:	b29a      	uxth	r2, r3
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003220:	e0b8      	b.n	8003394 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003224:	9300      	str	r3, [sp, #0]
 8003226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003228:	2200      	movs	r2, #0
 800322a:	4966      	ldr	r1, [pc, #408]	; (80033c4 <HAL_I2C_Mem_Read+0x448>)
 800322c:	68f8      	ldr	r0, [r7, #12]
 800322e:	f000 fac7 	bl	80037c0 <I2C_WaitOnFlagUntilTimeout>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d001      	beq.n	800323c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e0bf      	b.n	80033bc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800324a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	691a      	ldr	r2, [r3, #16]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003256:	b2d2      	uxtb	r2, r2
 8003258:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325e:	1c5a      	adds	r2, r3, #1
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003268:	3b01      	subs	r3, #1
 800326a:	b29a      	uxth	r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003274:	b29b      	uxth	r3, r3
 8003276:	3b01      	subs	r3, #1
 8003278:	b29a      	uxth	r2, r3
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800327e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003280:	9300      	str	r3, [sp, #0]
 8003282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003284:	2200      	movs	r2, #0
 8003286:	494f      	ldr	r1, [pc, #316]	; (80033c4 <HAL_I2C_Mem_Read+0x448>)
 8003288:	68f8      	ldr	r0, [r7, #12]
 800328a:	f000 fa99 	bl	80037c0 <I2C_WaitOnFlagUntilTimeout>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d001      	beq.n	8003298 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e091      	b.n	80033bc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	691a      	ldr	r2, [r3, #16]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b2:	b2d2      	uxtb	r2, r2
 80032b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ba:	1c5a      	adds	r2, r3, #1
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032c4:	3b01      	subs	r3, #1
 80032c6:	b29a      	uxth	r2, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	3b01      	subs	r3, #1
 80032d4:	b29a      	uxth	r2, r3
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	691a      	ldr	r2, [r3, #16]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e4:	b2d2      	uxtb	r2, r2
 80032e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ec:	1c5a      	adds	r2, r3, #1
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032f6:	3b01      	subs	r3, #1
 80032f8:	b29a      	uxth	r2, r3
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003302:	b29b      	uxth	r3, r3
 8003304:	3b01      	subs	r3, #1
 8003306:	b29a      	uxth	r2, r3
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800330c:	e042      	b.n	8003394 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800330e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003310:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003312:	68f8      	ldr	r0, [r7, #12]
 8003314:	f000 fbac 	bl	8003a70 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d001      	beq.n	8003322 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e04c      	b.n	80033bc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	691a      	ldr	r2, [r3, #16]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332c:	b2d2      	uxtb	r2, r2
 800332e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003334:	1c5a      	adds	r2, r3, #1
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800333e:	3b01      	subs	r3, #1
 8003340:	b29a      	uxth	r2, r3
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800334a:	b29b      	uxth	r3, r3
 800334c:	3b01      	subs	r3, #1
 800334e:	b29a      	uxth	r2, r3
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	695b      	ldr	r3, [r3, #20]
 800335a:	f003 0304 	and.w	r3, r3, #4
 800335e:	2b04      	cmp	r3, #4
 8003360:	d118      	bne.n	8003394 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	691a      	ldr	r2, [r3, #16]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336c:	b2d2      	uxtb	r2, r2
 800336e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003374:	1c5a      	adds	r2, r3, #1
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800337e:	3b01      	subs	r3, #1
 8003380:	b29a      	uxth	r2, r3
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800338a:	b29b      	uxth	r3, r3
 800338c:	3b01      	subs	r3, #1
 800338e:	b29a      	uxth	r2, r3
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003398:	2b00      	cmp	r3, #0
 800339a:	f47f aec2 	bne.w	8003122 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2220      	movs	r2, #32
 80033a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80033b6:	2300      	movs	r3, #0
 80033b8:	e000      	b.n	80033bc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80033ba:	2302      	movs	r3, #2
  }
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3728      	adds	r7, #40	; 0x28
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	00010004 	.word	0x00010004

080033c8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b088      	sub	sp, #32
 80033cc:	af02      	add	r7, sp, #8
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	607a      	str	r2, [r7, #4]
 80033d2:	603b      	str	r3, [r7, #0]
 80033d4:	460b      	mov	r3, r1
 80033d6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033dc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	2b08      	cmp	r3, #8
 80033e2:	d006      	beq.n	80033f2 <I2C_MasterRequestWrite+0x2a>
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d003      	beq.n	80033f2 <I2C_MasterRequestWrite+0x2a>
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80033f0:	d108      	bne.n	8003404 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003400:	601a      	str	r2, [r3, #0]
 8003402:	e00b      	b.n	800341c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003408:	2b12      	cmp	r3, #18
 800340a:	d107      	bne.n	800341c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800341a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	9300      	str	r3, [sp, #0]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003428:	68f8      	ldr	r0, [r7, #12]
 800342a:	f000 f9c9 	bl	80037c0 <I2C_WaitOnFlagUntilTimeout>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d00c      	beq.n	800344e <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800343e:	2b00      	cmp	r3, #0
 8003440:	d003      	beq.n	800344a <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003448:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e035      	b.n	80034ba <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003456:	d108      	bne.n	800346a <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003458:	897b      	ldrh	r3, [r7, #10]
 800345a:	b2db      	uxtb	r3, r3
 800345c:	461a      	mov	r2, r3
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003466:	611a      	str	r2, [r3, #16]
 8003468:	e01b      	b.n	80034a2 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800346a:	897b      	ldrh	r3, [r7, #10]
 800346c:	11db      	asrs	r3, r3, #7
 800346e:	b2db      	uxtb	r3, r3
 8003470:	f003 0306 	and.w	r3, r3, #6
 8003474:	b2db      	uxtb	r3, r3
 8003476:	f063 030f 	orn	r3, r3, #15
 800347a:	b2da      	uxtb	r2, r3
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	490f      	ldr	r1, [pc, #60]	; (80034c4 <I2C_MasterRequestWrite+0xfc>)
 8003488:	68f8      	ldr	r0, [r7, #12]
 800348a:	f000 f9f0 	bl	800386e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800348e:	4603      	mov	r3, r0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d001      	beq.n	8003498 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e010      	b.n	80034ba <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003498:	897b      	ldrh	r3, [r7, #10]
 800349a:	b2da      	uxtb	r2, r3
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	4908      	ldr	r1, [pc, #32]	; (80034c8 <I2C_MasterRequestWrite+0x100>)
 80034a8:	68f8      	ldr	r0, [r7, #12]
 80034aa:	f000 f9e0 	bl	800386e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d001      	beq.n	80034b8 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e000      	b.n	80034ba <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 80034b8:	2300      	movs	r3, #0
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3718      	adds	r7, #24
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	00010008 	.word	0x00010008
 80034c8:	00010002 	.word	0x00010002

080034cc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b088      	sub	sp, #32
 80034d0:	af02      	add	r7, sp, #8
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	4608      	mov	r0, r1
 80034d6:	4611      	mov	r1, r2
 80034d8:	461a      	mov	r2, r3
 80034da:	4603      	mov	r3, r0
 80034dc:	817b      	strh	r3, [r7, #10]
 80034de:	460b      	mov	r3, r1
 80034e0:	813b      	strh	r3, [r7, #8]
 80034e2:	4613      	mov	r3, r2
 80034e4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034f4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f8:	9300      	str	r3, [sp, #0]
 80034fa:	6a3b      	ldr	r3, [r7, #32]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003502:	68f8      	ldr	r0, [r7, #12]
 8003504:	f000 f95c 	bl	80037c0 <I2C_WaitOnFlagUntilTimeout>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d00c      	beq.n	8003528 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003518:	2b00      	cmp	r3, #0
 800351a:	d003      	beq.n	8003524 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003522:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e05f      	b.n	80035e8 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003528:	897b      	ldrh	r3, [r7, #10]
 800352a:	b2db      	uxtb	r3, r3
 800352c:	461a      	mov	r2, r3
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003536:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353a:	6a3a      	ldr	r2, [r7, #32]
 800353c:	492c      	ldr	r1, [pc, #176]	; (80035f0 <I2C_RequestMemoryWrite+0x124>)
 800353e:	68f8      	ldr	r0, [r7, #12]
 8003540:	f000 f995 	bl	800386e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d001      	beq.n	800354e <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e04c      	b.n	80035e8 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800354e:	2300      	movs	r3, #0
 8003550:	617b      	str	r3, [r7, #20]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	695b      	ldr	r3, [r3, #20]
 8003558:	617b      	str	r3, [r7, #20]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	699b      	ldr	r3, [r3, #24]
 8003560:	617b      	str	r3, [r7, #20]
 8003562:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003564:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003566:	6a39      	ldr	r1, [r7, #32]
 8003568:	68f8      	ldr	r0, [r7, #12]
 800356a:	f000 f9ff 	bl	800396c <I2C_WaitOnTXEFlagUntilTimeout>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d00d      	beq.n	8003590 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003578:	2b04      	cmp	r3, #4
 800357a:	d107      	bne.n	800358c <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800358a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e02b      	b.n	80035e8 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003590:	88fb      	ldrh	r3, [r7, #6]
 8003592:	2b01      	cmp	r3, #1
 8003594:	d105      	bne.n	80035a2 <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003596:	893b      	ldrh	r3, [r7, #8]
 8003598:	b2da      	uxtb	r2, r3
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	611a      	str	r2, [r3, #16]
 80035a0:	e021      	b.n	80035e6 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80035a2:	893b      	ldrh	r3, [r7, #8]
 80035a4:	0a1b      	lsrs	r3, r3, #8
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	b2da      	uxtb	r2, r3
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035b2:	6a39      	ldr	r1, [r7, #32]
 80035b4:	68f8      	ldr	r0, [r7, #12]
 80035b6:	f000 f9d9 	bl	800396c <I2C_WaitOnTXEFlagUntilTimeout>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d00d      	beq.n	80035dc <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c4:	2b04      	cmp	r3, #4
 80035c6:	d107      	bne.n	80035d8 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035d6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e005      	b.n	80035e8 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80035dc:	893b      	ldrh	r3, [r7, #8]
 80035de:	b2da      	uxtb	r2, r3
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80035e6:	2300      	movs	r3, #0
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3718      	adds	r7, #24
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	00010002 	.word	0x00010002

080035f4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b088      	sub	sp, #32
 80035f8:	af02      	add	r7, sp, #8
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	4608      	mov	r0, r1
 80035fe:	4611      	mov	r1, r2
 8003600:	461a      	mov	r2, r3
 8003602:	4603      	mov	r3, r0
 8003604:	817b      	strh	r3, [r7, #10]
 8003606:	460b      	mov	r3, r1
 8003608:	813b      	strh	r3, [r7, #8]
 800360a:	4613      	mov	r3, r2
 800360c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800361c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800362c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800362e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003630:	9300      	str	r3, [sp, #0]
 8003632:	6a3b      	ldr	r3, [r7, #32]
 8003634:	2200      	movs	r2, #0
 8003636:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800363a:	68f8      	ldr	r0, [r7, #12]
 800363c:	f000 f8c0 	bl	80037c0 <I2C_WaitOnFlagUntilTimeout>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d00c      	beq.n	8003660 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003650:	2b00      	cmp	r3, #0
 8003652:	d003      	beq.n	800365c <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f44f 7200 	mov.w	r2, #512	; 0x200
 800365a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800365c:	2303      	movs	r3, #3
 800365e:	e0a9      	b.n	80037b4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003660:	897b      	ldrh	r3, [r7, #10]
 8003662:	b2db      	uxtb	r3, r3
 8003664:	461a      	mov	r2, r3
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800366e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003672:	6a3a      	ldr	r2, [r7, #32]
 8003674:	4951      	ldr	r1, [pc, #324]	; (80037bc <I2C_RequestMemoryRead+0x1c8>)
 8003676:	68f8      	ldr	r0, [r7, #12]
 8003678:	f000 f8f9 	bl	800386e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d001      	beq.n	8003686 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e096      	b.n	80037b4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003686:	2300      	movs	r3, #0
 8003688:	617b      	str	r3, [r7, #20]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	695b      	ldr	r3, [r3, #20]
 8003690:	617b      	str	r3, [r7, #20]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	699b      	ldr	r3, [r3, #24]
 8003698:	617b      	str	r3, [r7, #20]
 800369a:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800369c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800369e:	6a39      	ldr	r1, [r7, #32]
 80036a0:	68f8      	ldr	r0, [r7, #12]
 80036a2:	f000 f963 	bl	800396c <I2C_WaitOnTXEFlagUntilTimeout>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d00d      	beq.n	80036c8 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b0:	2b04      	cmp	r3, #4
 80036b2:	d107      	bne.n	80036c4 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036c2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e075      	b.n	80037b4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80036c8:	88fb      	ldrh	r3, [r7, #6]
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d105      	bne.n	80036da <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80036ce:	893b      	ldrh	r3, [r7, #8]
 80036d0:	b2da      	uxtb	r2, r3
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	611a      	str	r2, [r3, #16]
 80036d8:	e021      	b.n	800371e <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80036da:	893b      	ldrh	r3, [r7, #8]
 80036dc:	0a1b      	lsrs	r3, r3, #8
 80036de:	b29b      	uxth	r3, r3
 80036e0:	b2da      	uxtb	r2, r3
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036ea:	6a39      	ldr	r1, [r7, #32]
 80036ec:	68f8      	ldr	r0, [r7, #12]
 80036ee:	f000 f93d 	bl	800396c <I2C_WaitOnTXEFlagUntilTimeout>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d00d      	beq.n	8003714 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fc:	2b04      	cmp	r3, #4
 80036fe:	d107      	bne.n	8003710 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800370e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e04f      	b.n	80037b4 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003714:	893b      	ldrh	r3, [r7, #8]
 8003716:	b2da      	uxtb	r2, r3
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800371e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003720:	6a39      	ldr	r1, [r7, #32]
 8003722:	68f8      	ldr	r0, [r7, #12]
 8003724:	f000 f922 	bl	800396c <I2C_WaitOnTXEFlagUntilTimeout>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d00d      	beq.n	800374a <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003732:	2b04      	cmp	r3, #4
 8003734:	d107      	bne.n	8003746 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003744:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e034      	b.n	80037b4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003758:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800375a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375c:	9300      	str	r3, [sp, #0]
 800375e:	6a3b      	ldr	r3, [r7, #32]
 8003760:	2200      	movs	r2, #0
 8003762:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003766:	68f8      	ldr	r0, [r7, #12]
 8003768:	f000 f82a 	bl	80037c0 <I2C_WaitOnFlagUntilTimeout>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00c      	beq.n	800378c <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800377c:	2b00      	cmp	r3, #0
 800377e:	d003      	beq.n	8003788 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003786:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003788:	2303      	movs	r3, #3
 800378a:	e013      	b.n	80037b4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800378c:	897b      	ldrh	r3, [r7, #10]
 800378e:	b2db      	uxtb	r3, r3
 8003790:	f043 0301 	orr.w	r3, r3, #1
 8003794:	b2da      	uxtb	r2, r3
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800379c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379e:	6a3a      	ldr	r2, [r7, #32]
 80037a0:	4906      	ldr	r1, [pc, #24]	; (80037bc <I2C_RequestMemoryRead+0x1c8>)
 80037a2:	68f8      	ldr	r0, [r7, #12]
 80037a4:	f000 f863 	bl	800386e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d001      	beq.n	80037b2 <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e000      	b.n	80037b4 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 80037b2:	2300      	movs	r3, #0
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3718      	adds	r7, #24
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	00010002 	.word	0x00010002

080037c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	60b9      	str	r1, [r7, #8]
 80037ca:	603b      	str	r3, [r7, #0]
 80037cc:	4613      	mov	r3, r2
 80037ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037d0:	e025      	b.n	800381e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037d8:	d021      	beq.n	800381e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037da:	f7fe fd9b 	bl	8002314 <HAL_GetTick>
 80037de:	4602      	mov	r2, r0
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	683a      	ldr	r2, [r7, #0]
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d302      	bcc.n	80037f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d116      	bne.n	800381e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2200      	movs	r2, #0
 80037f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2220      	movs	r2, #32
 80037fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2200      	movs	r2, #0
 8003802:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380a:	f043 0220 	orr.w	r2, r3, #32
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e023      	b.n	8003866 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	0c1b      	lsrs	r3, r3, #16
 8003822:	b2db      	uxtb	r3, r3
 8003824:	2b01      	cmp	r3, #1
 8003826:	d10d      	bne.n	8003844 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	695b      	ldr	r3, [r3, #20]
 800382e:	43da      	mvns	r2, r3
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	4013      	ands	r3, r2
 8003834:	b29b      	uxth	r3, r3
 8003836:	2b00      	cmp	r3, #0
 8003838:	bf0c      	ite	eq
 800383a:	2301      	moveq	r3, #1
 800383c:	2300      	movne	r3, #0
 800383e:	b2db      	uxtb	r3, r3
 8003840:	461a      	mov	r2, r3
 8003842:	e00c      	b.n	800385e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	699b      	ldr	r3, [r3, #24]
 800384a:	43da      	mvns	r2, r3
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	4013      	ands	r3, r2
 8003850:	b29b      	uxth	r3, r3
 8003852:	2b00      	cmp	r3, #0
 8003854:	bf0c      	ite	eq
 8003856:	2301      	moveq	r3, #1
 8003858:	2300      	movne	r3, #0
 800385a:	b2db      	uxtb	r3, r3
 800385c:	461a      	mov	r2, r3
 800385e:	79fb      	ldrb	r3, [r7, #7]
 8003860:	429a      	cmp	r2, r3
 8003862:	d0b6      	beq.n	80037d2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003864:	2300      	movs	r3, #0
}
 8003866:	4618      	mov	r0, r3
 8003868:	3710      	adds	r7, #16
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}

0800386e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800386e:	b580      	push	{r7, lr}
 8003870:	b084      	sub	sp, #16
 8003872:	af00      	add	r7, sp, #0
 8003874:	60f8      	str	r0, [r7, #12]
 8003876:	60b9      	str	r1, [r7, #8]
 8003878:	607a      	str	r2, [r7, #4]
 800387a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800387c:	e051      	b.n	8003922 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	695b      	ldr	r3, [r3, #20]
 8003884:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003888:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800388c:	d123      	bne.n	80038d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800389c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80038a6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2200      	movs	r2, #0
 80038ac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2220      	movs	r2, #32
 80038b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c2:	f043 0204 	orr.w	r2, r3, #4
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e046      	b.n	8003964 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038dc:	d021      	beq.n	8003922 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038de:	f7fe fd19 	bl	8002314 <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d302      	bcc.n	80038f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d116      	bne.n	8003922 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2200      	movs	r2, #0
 80038f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2220      	movs	r2, #32
 80038fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2200      	movs	r2, #0
 8003906:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390e:	f043 0220 	orr.w	r2, r3, #32
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e020      	b.n	8003964 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	0c1b      	lsrs	r3, r3, #16
 8003926:	b2db      	uxtb	r3, r3
 8003928:	2b01      	cmp	r3, #1
 800392a:	d10c      	bne.n	8003946 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	695b      	ldr	r3, [r3, #20]
 8003932:	43da      	mvns	r2, r3
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	4013      	ands	r3, r2
 8003938:	b29b      	uxth	r3, r3
 800393a:	2b00      	cmp	r3, #0
 800393c:	bf14      	ite	ne
 800393e:	2301      	movne	r3, #1
 8003940:	2300      	moveq	r3, #0
 8003942:	b2db      	uxtb	r3, r3
 8003944:	e00b      	b.n	800395e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	699b      	ldr	r3, [r3, #24]
 800394c:	43da      	mvns	r2, r3
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	4013      	ands	r3, r2
 8003952:	b29b      	uxth	r3, r3
 8003954:	2b00      	cmp	r3, #0
 8003956:	bf14      	ite	ne
 8003958:	2301      	movne	r3, #1
 800395a:	2300      	moveq	r3, #0
 800395c:	b2db      	uxtb	r3, r3
 800395e:	2b00      	cmp	r3, #0
 8003960:	d18d      	bne.n	800387e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003962:	2300      	movs	r3, #0
}
 8003964:	4618      	mov	r0, r3
 8003966:	3710      	adds	r7, #16
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	60b9      	str	r1, [r7, #8]
 8003976:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003978:	e02d      	b.n	80039d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800397a:	68f8      	ldr	r0, [r7, #12]
 800397c:	f000 f8ce 	bl	8003b1c <I2C_IsAcknowledgeFailed>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d001      	beq.n	800398a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e02d      	b.n	80039e6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003990:	d021      	beq.n	80039d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003992:	f7fe fcbf 	bl	8002314 <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	68ba      	ldr	r2, [r7, #8]
 800399e:	429a      	cmp	r2, r3
 80039a0:	d302      	bcc.n	80039a8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d116      	bne.n	80039d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2200      	movs	r2, #0
 80039ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2220      	movs	r2, #32
 80039b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c2:	f043 0220 	orr.w	r2, r3, #32
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2200      	movs	r2, #0
 80039ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e007      	b.n	80039e6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	695b      	ldr	r3, [r3, #20]
 80039dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039e0:	2b80      	cmp	r3, #128	; 0x80
 80039e2:	d1ca      	bne.n	800397a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3710      	adds	r7, #16
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}

080039ee <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039ee:	b580      	push	{r7, lr}
 80039f0:	b084      	sub	sp, #16
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	60f8      	str	r0, [r7, #12]
 80039f6:	60b9      	str	r1, [r7, #8]
 80039f8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80039fa:	e02d      	b.n	8003a58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80039fc:	68f8      	ldr	r0, [r7, #12]
 80039fe:	f000 f88d 	bl	8003b1c <I2C_IsAcknowledgeFailed>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d001      	beq.n	8003a0c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e02d      	b.n	8003a68 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a12:	d021      	beq.n	8003a58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a14:	f7fe fc7e 	bl	8002314 <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	68ba      	ldr	r2, [r7, #8]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d302      	bcc.n	8003a2a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d116      	bne.n	8003a58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2220      	movs	r2, #32
 8003a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a44:	f043 0220 	orr.w	r2, r3, #32
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e007      	b.n	8003a68 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	695b      	ldr	r3, [r3, #20]
 8003a5e:	f003 0304 	and.w	r3, r3, #4
 8003a62:	2b04      	cmp	r3, #4
 8003a64:	d1ca      	bne.n	80039fc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a66:	2300      	movs	r3, #0
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3710      	adds	r7, #16
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	60f8      	str	r0, [r7, #12]
 8003a78:	60b9      	str	r1, [r7, #8]
 8003a7a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a7c:	e042      	b.n	8003b04 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	695b      	ldr	r3, [r3, #20]
 8003a84:	f003 0310 	and.w	r3, r3, #16
 8003a88:	2b10      	cmp	r3, #16
 8003a8a:	d119      	bne.n	8003ac0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f06f 0210 	mvn.w	r2, #16
 8003a94:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2220      	movs	r2, #32
 8003aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e029      	b.n	8003b14 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ac0:	f7fe fc28 	bl	8002314 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	68ba      	ldr	r2, [r7, #8]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d302      	bcc.n	8003ad6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d116      	bne.n	8003b04 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2220      	movs	r2, #32
 8003ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af0:	f043 0220 	orr.w	r2, r3, #32
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e007      	b.n	8003b14 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	695b      	ldr	r3, [r3, #20]
 8003b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b0e:	2b40      	cmp	r3, #64	; 0x40
 8003b10:	d1b5      	bne.n	8003a7e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003b12:	2300      	movs	r3, #0
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3710      	adds	r7, #16
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	695b      	ldr	r3, [r3, #20]
 8003b2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b32:	d11b      	bne.n	8003b6c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b3c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2220      	movs	r2, #32
 8003b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b58:	f043 0204 	orr.w	r2, r3, #4
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e000      	b.n	8003b6e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	370c      	adds	r7, #12
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr
	...

08003b7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d101      	bne.n	8003b90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e0cc      	b.n	8003d2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b90:	4b68      	ldr	r3, [pc, #416]	; (8003d34 <HAL_RCC_ClockConfig+0x1b8>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 030f 	and.w	r3, r3, #15
 8003b98:	683a      	ldr	r2, [r7, #0]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d90c      	bls.n	8003bb8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b9e:	4b65      	ldr	r3, [pc, #404]	; (8003d34 <HAL_RCC_ClockConfig+0x1b8>)
 8003ba0:	683a      	ldr	r2, [r7, #0]
 8003ba2:	b2d2      	uxtb	r2, r2
 8003ba4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ba6:	4b63      	ldr	r3, [pc, #396]	; (8003d34 <HAL_RCC_ClockConfig+0x1b8>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 030f 	and.w	r3, r3, #15
 8003bae:	683a      	ldr	r2, [r7, #0]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d001      	beq.n	8003bb8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e0b8      	b.n	8003d2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0302 	and.w	r3, r3, #2
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d020      	beq.n	8003c06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0304 	and.w	r3, r3, #4
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d005      	beq.n	8003bdc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bd0:	4b59      	ldr	r3, [pc, #356]	; (8003d38 <HAL_RCC_ClockConfig+0x1bc>)
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	4a58      	ldr	r2, [pc, #352]	; (8003d38 <HAL_RCC_ClockConfig+0x1bc>)
 8003bd6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003bda:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0308 	and.w	r3, r3, #8
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d005      	beq.n	8003bf4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003be8:	4b53      	ldr	r3, [pc, #332]	; (8003d38 <HAL_RCC_ClockConfig+0x1bc>)
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	4a52      	ldr	r2, [pc, #328]	; (8003d38 <HAL_RCC_ClockConfig+0x1bc>)
 8003bee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003bf2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bf4:	4b50      	ldr	r3, [pc, #320]	; (8003d38 <HAL_RCC_ClockConfig+0x1bc>)
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	494d      	ldr	r1, [pc, #308]	; (8003d38 <HAL_RCC_ClockConfig+0x1bc>)
 8003c02:	4313      	orrs	r3, r2
 8003c04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0301 	and.w	r3, r3, #1
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d044      	beq.n	8003c9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d107      	bne.n	8003c2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c1a:	4b47      	ldr	r3, [pc, #284]	; (8003d38 <HAL_RCC_ClockConfig+0x1bc>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d119      	bne.n	8003c5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e07f      	b.n	8003d2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d003      	beq.n	8003c3a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c36:	2b03      	cmp	r3, #3
 8003c38:	d107      	bne.n	8003c4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c3a:	4b3f      	ldr	r3, [pc, #252]	; (8003d38 <HAL_RCC_ClockConfig+0x1bc>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d109      	bne.n	8003c5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e06f      	b.n	8003d2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c4a:	4b3b      	ldr	r3, [pc, #236]	; (8003d38 <HAL_RCC_ClockConfig+0x1bc>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0302 	and.w	r3, r3, #2
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d101      	bne.n	8003c5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e067      	b.n	8003d2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c5a:	4b37      	ldr	r3, [pc, #220]	; (8003d38 <HAL_RCC_ClockConfig+0x1bc>)
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	f023 0203 	bic.w	r2, r3, #3
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	4934      	ldr	r1, [pc, #208]	; (8003d38 <HAL_RCC_ClockConfig+0x1bc>)
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c6c:	f7fe fb52 	bl	8002314 <HAL_GetTick>
 8003c70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c72:	e00a      	b.n	8003c8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c74:	f7fe fb4e 	bl	8002314 <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d901      	bls.n	8003c8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e04f      	b.n	8003d2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c8a:	4b2b      	ldr	r3, [pc, #172]	; (8003d38 <HAL_RCC_ClockConfig+0x1bc>)
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	f003 020c 	and.w	r2, r3, #12
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d1eb      	bne.n	8003c74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c9c:	4b25      	ldr	r3, [pc, #148]	; (8003d34 <HAL_RCC_ClockConfig+0x1b8>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 030f 	and.w	r3, r3, #15
 8003ca4:	683a      	ldr	r2, [r7, #0]
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d20c      	bcs.n	8003cc4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003caa:	4b22      	ldr	r3, [pc, #136]	; (8003d34 <HAL_RCC_ClockConfig+0x1b8>)
 8003cac:	683a      	ldr	r2, [r7, #0]
 8003cae:	b2d2      	uxtb	r2, r2
 8003cb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cb2:	4b20      	ldr	r3, [pc, #128]	; (8003d34 <HAL_RCC_ClockConfig+0x1b8>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 030f 	and.w	r3, r3, #15
 8003cba:	683a      	ldr	r2, [r7, #0]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d001      	beq.n	8003cc4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e032      	b.n	8003d2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0304 	and.w	r3, r3, #4
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d008      	beq.n	8003ce2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cd0:	4b19      	ldr	r3, [pc, #100]	; (8003d38 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	4916      	ldr	r1, [pc, #88]	; (8003d38 <HAL_RCC_ClockConfig+0x1bc>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0308 	and.w	r3, r3, #8
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d009      	beq.n	8003d02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cee:	4b12      	ldr	r3, [pc, #72]	; (8003d38 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	00db      	lsls	r3, r3, #3
 8003cfc:	490e      	ldr	r1, [pc, #56]	; (8003d38 <HAL_RCC_ClockConfig+0x1bc>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d02:	f000 f855 	bl	8003db0 <HAL_RCC_GetSysClockFreq>
 8003d06:	4601      	mov	r1, r0
 8003d08:	4b0b      	ldr	r3, [pc, #44]	; (8003d38 <HAL_RCC_ClockConfig+0x1bc>)
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	091b      	lsrs	r3, r3, #4
 8003d0e:	f003 030f 	and.w	r3, r3, #15
 8003d12:	4a0a      	ldr	r2, [pc, #40]	; (8003d3c <HAL_RCC_ClockConfig+0x1c0>)
 8003d14:	5cd3      	ldrb	r3, [r2, r3]
 8003d16:	fa21 f303 	lsr.w	r3, r1, r3
 8003d1a:	4a09      	ldr	r2, [pc, #36]	; (8003d40 <HAL_RCC_ClockConfig+0x1c4>)
 8003d1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d1e:	4b09      	ldr	r3, [pc, #36]	; (8003d44 <HAL_RCC_ClockConfig+0x1c8>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4618      	mov	r0, r3
 8003d24:	f7fe fab2 	bl	800228c <HAL_InitTick>

  return HAL_OK;
 8003d28:	2300      	movs	r3, #0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3710      	adds	r7, #16
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	40023c00 	.word	0x40023c00
 8003d38:	40023800 	.word	0x40023800
 8003d3c:	0800943c 	.word	0x0800943c
 8003d40:	20000000 	.word	0x20000000
 8003d44:	20000004 	.word	0x20000004

08003d48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d4c:	4b03      	ldr	r3, [pc, #12]	; (8003d5c <HAL_RCC_GetHCLKFreq+0x14>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr
 8003d5a:	bf00      	nop
 8003d5c:	20000000 	.word	0x20000000

08003d60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d64:	f7ff fff0 	bl	8003d48 <HAL_RCC_GetHCLKFreq>
 8003d68:	4601      	mov	r1, r0
 8003d6a:	4b05      	ldr	r3, [pc, #20]	; (8003d80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	0a9b      	lsrs	r3, r3, #10
 8003d70:	f003 0307 	and.w	r3, r3, #7
 8003d74:	4a03      	ldr	r2, [pc, #12]	; (8003d84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d76:	5cd3      	ldrb	r3, [r2, r3]
 8003d78:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	40023800 	.word	0x40023800
 8003d84:	0800944c 	.word	0x0800944c

08003d88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d8c:	f7ff ffdc 	bl	8003d48 <HAL_RCC_GetHCLKFreq>
 8003d90:	4601      	mov	r1, r0
 8003d92:	4b05      	ldr	r3, [pc, #20]	; (8003da8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	0b5b      	lsrs	r3, r3, #13
 8003d98:	f003 0307 	and.w	r3, r3, #7
 8003d9c:	4a03      	ldr	r2, [pc, #12]	; (8003dac <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d9e:	5cd3      	ldrb	r3, [r2, r3]
 8003da0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	40023800 	.word	0x40023800
 8003dac:	0800944c 	.word	0x0800944c

08003db0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003db0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003db2:	b087      	sub	sp, #28
 8003db4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003db6:	2300      	movs	r3, #0
 8003db8:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003dca:	4bc6      	ldr	r3, [pc, #792]	; (80040e4 <HAL_RCC_GetSysClockFreq+0x334>)
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	f003 030c 	and.w	r3, r3, #12
 8003dd2:	2b0c      	cmp	r3, #12
 8003dd4:	f200 817e 	bhi.w	80040d4 <HAL_RCC_GetSysClockFreq+0x324>
 8003dd8:	a201      	add	r2, pc, #4	; (adr r2, 8003de0 <HAL_RCC_GetSysClockFreq+0x30>)
 8003dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dde:	bf00      	nop
 8003de0:	08003e15 	.word	0x08003e15
 8003de4:	080040d5 	.word	0x080040d5
 8003de8:	080040d5 	.word	0x080040d5
 8003dec:	080040d5 	.word	0x080040d5
 8003df0:	08003e1b 	.word	0x08003e1b
 8003df4:	080040d5 	.word	0x080040d5
 8003df8:	080040d5 	.word	0x080040d5
 8003dfc:	080040d5 	.word	0x080040d5
 8003e00:	08003e21 	.word	0x08003e21
 8003e04:	080040d5 	.word	0x080040d5
 8003e08:	080040d5 	.word	0x080040d5
 8003e0c:	080040d5 	.word	0x080040d5
 8003e10:	08003f7d 	.word	0x08003f7d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e14:	4bb4      	ldr	r3, [pc, #720]	; (80040e8 <HAL_RCC_GetSysClockFreq+0x338>)
 8003e16:	613b      	str	r3, [r7, #16]
       break;
 8003e18:	e15f      	b.n	80040da <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e1a:	4bb4      	ldr	r3, [pc, #720]	; (80040ec <HAL_RCC_GetSysClockFreq+0x33c>)
 8003e1c:	613b      	str	r3, [r7, #16]
      break;
 8003e1e:	e15c      	b.n	80040da <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e20:	4bb0      	ldr	r3, [pc, #704]	; (80040e4 <HAL_RCC_GetSysClockFreq+0x334>)
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e28:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e2a:	4bae      	ldr	r3, [pc, #696]	; (80040e4 <HAL_RCC_GetSysClockFreq+0x334>)
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d04a      	beq.n	8003ecc <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e36:	4bab      	ldr	r3, [pc, #684]	; (80040e4 <HAL_RCC_GetSysClockFreq+0x334>)
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	099b      	lsrs	r3, r3, #6
 8003e3c:	f04f 0400 	mov.w	r4, #0
 8003e40:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003e44:	f04f 0200 	mov.w	r2, #0
 8003e48:	ea03 0501 	and.w	r5, r3, r1
 8003e4c:	ea04 0602 	and.w	r6, r4, r2
 8003e50:	4629      	mov	r1, r5
 8003e52:	4632      	mov	r2, r6
 8003e54:	f04f 0300 	mov.w	r3, #0
 8003e58:	f04f 0400 	mov.w	r4, #0
 8003e5c:	0154      	lsls	r4, r2, #5
 8003e5e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003e62:	014b      	lsls	r3, r1, #5
 8003e64:	4619      	mov	r1, r3
 8003e66:	4622      	mov	r2, r4
 8003e68:	1b49      	subs	r1, r1, r5
 8003e6a:	eb62 0206 	sbc.w	r2, r2, r6
 8003e6e:	f04f 0300 	mov.w	r3, #0
 8003e72:	f04f 0400 	mov.w	r4, #0
 8003e76:	0194      	lsls	r4, r2, #6
 8003e78:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003e7c:	018b      	lsls	r3, r1, #6
 8003e7e:	1a5b      	subs	r3, r3, r1
 8003e80:	eb64 0402 	sbc.w	r4, r4, r2
 8003e84:	f04f 0100 	mov.w	r1, #0
 8003e88:	f04f 0200 	mov.w	r2, #0
 8003e8c:	00e2      	lsls	r2, r4, #3
 8003e8e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003e92:	00d9      	lsls	r1, r3, #3
 8003e94:	460b      	mov	r3, r1
 8003e96:	4614      	mov	r4, r2
 8003e98:	195b      	adds	r3, r3, r5
 8003e9a:	eb44 0406 	adc.w	r4, r4, r6
 8003e9e:	f04f 0100 	mov.w	r1, #0
 8003ea2:	f04f 0200 	mov.w	r2, #0
 8003ea6:	0262      	lsls	r2, r4, #9
 8003ea8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003eac:	0259      	lsls	r1, r3, #9
 8003eae:	460b      	mov	r3, r1
 8003eb0:	4614      	mov	r4, r2
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	4621      	mov	r1, r4
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f04f 0400 	mov.w	r4, #0
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	4623      	mov	r3, r4
 8003ec0:	f7fc ff02 	bl	8000cc8 <__aeabi_uldivmod>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	460c      	mov	r4, r1
 8003ec8:	617b      	str	r3, [r7, #20]
 8003eca:	e049      	b.n	8003f60 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ecc:	4b85      	ldr	r3, [pc, #532]	; (80040e4 <HAL_RCC_GetSysClockFreq+0x334>)
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	099b      	lsrs	r3, r3, #6
 8003ed2:	f04f 0400 	mov.w	r4, #0
 8003ed6:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003eda:	f04f 0200 	mov.w	r2, #0
 8003ede:	ea03 0501 	and.w	r5, r3, r1
 8003ee2:	ea04 0602 	and.w	r6, r4, r2
 8003ee6:	4629      	mov	r1, r5
 8003ee8:	4632      	mov	r2, r6
 8003eea:	f04f 0300 	mov.w	r3, #0
 8003eee:	f04f 0400 	mov.w	r4, #0
 8003ef2:	0154      	lsls	r4, r2, #5
 8003ef4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003ef8:	014b      	lsls	r3, r1, #5
 8003efa:	4619      	mov	r1, r3
 8003efc:	4622      	mov	r2, r4
 8003efe:	1b49      	subs	r1, r1, r5
 8003f00:	eb62 0206 	sbc.w	r2, r2, r6
 8003f04:	f04f 0300 	mov.w	r3, #0
 8003f08:	f04f 0400 	mov.w	r4, #0
 8003f0c:	0194      	lsls	r4, r2, #6
 8003f0e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003f12:	018b      	lsls	r3, r1, #6
 8003f14:	1a5b      	subs	r3, r3, r1
 8003f16:	eb64 0402 	sbc.w	r4, r4, r2
 8003f1a:	f04f 0100 	mov.w	r1, #0
 8003f1e:	f04f 0200 	mov.w	r2, #0
 8003f22:	00e2      	lsls	r2, r4, #3
 8003f24:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003f28:	00d9      	lsls	r1, r3, #3
 8003f2a:	460b      	mov	r3, r1
 8003f2c:	4614      	mov	r4, r2
 8003f2e:	195b      	adds	r3, r3, r5
 8003f30:	eb44 0406 	adc.w	r4, r4, r6
 8003f34:	f04f 0100 	mov.w	r1, #0
 8003f38:	f04f 0200 	mov.w	r2, #0
 8003f3c:	02a2      	lsls	r2, r4, #10
 8003f3e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003f42:	0299      	lsls	r1, r3, #10
 8003f44:	460b      	mov	r3, r1
 8003f46:	4614      	mov	r4, r2
 8003f48:	4618      	mov	r0, r3
 8003f4a:	4621      	mov	r1, r4
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f04f 0400 	mov.w	r4, #0
 8003f52:	461a      	mov	r2, r3
 8003f54:	4623      	mov	r3, r4
 8003f56:	f7fc feb7 	bl	8000cc8 <__aeabi_uldivmod>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	460c      	mov	r4, r1
 8003f5e:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f60:	4b60      	ldr	r3, [pc, #384]	; (80040e4 <HAL_RCC_GetSysClockFreq+0x334>)
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	0c1b      	lsrs	r3, r3, #16
 8003f66:	f003 0303 	and.w	r3, r3, #3
 8003f6a:	3301      	adds	r3, #1
 8003f6c:	005b      	lsls	r3, r3, #1
 8003f6e:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8003f70:	697a      	ldr	r2, [r7, #20]
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f78:	613b      	str	r3, [r7, #16]
      break;
 8003f7a:	e0ae      	b.n	80040da <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f7c:	4b59      	ldr	r3, [pc, #356]	; (80040e4 <HAL_RCC_GetSysClockFreq+0x334>)
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f84:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f86:	4b57      	ldr	r3, [pc, #348]	; (80040e4 <HAL_RCC_GetSysClockFreq+0x334>)
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d04a      	beq.n	8004028 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f92:	4b54      	ldr	r3, [pc, #336]	; (80040e4 <HAL_RCC_GetSysClockFreq+0x334>)
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	099b      	lsrs	r3, r3, #6
 8003f98:	f04f 0400 	mov.w	r4, #0
 8003f9c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003fa0:	f04f 0200 	mov.w	r2, #0
 8003fa4:	ea03 0501 	and.w	r5, r3, r1
 8003fa8:	ea04 0602 	and.w	r6, r4, r2
 8003fac:	4629      	mov	r1, r5
 8003fae:	4632      	mov	r2, r6
 8003fb0:	f04f 0300 	mov.w	r3, #0
 8003fb4:	f04f 0400 	mov.w	r4, #0
 8003fb8:	0154      	lsls	r4, r2, #5
 8003fba:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003fbe:	014b      	lsls	r3, r1, #5
 8003fc0:	4619      	mov	r1, r3
 8003fc2:	4622      	mov	r2, r4
 8003fc4:	1b49      	subs	r1, r1, r5
 8003fc6:	eb62 0206 	sbc.w	r2, r2, r6
 8003fca:	f04f 0300 	mov.w	r3, #0
 8003fce:	f04f 0400 	mov.w	r4, #0
 8003fd2:	0194      	lsls	r4, r2, #6
 8003fd4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003fd8:	018b      	lsls	r3, r1, #6
 8003fda:	1a5b      	subs	r3, r3, r1
 8003fdc:	eb64 0402 	sbc.w	r4, r4, r2
 8003fe0:	f04f 0100 	mov.w	r1, #0
 8003fe4:	f04f 0200 	mov.w	r2, #0
 8003fe8:	00e2      	lsls	r2, r4, #3
 8003fea:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003fee:	00d9      	lsls	r1, r3, #3
 8003ff0:	460b      	mov	r3, r1
 8003ff2:	4614      	mov	r4, r2
 8003ff4:	195b      	adds	r3, r3, r5
 8003ff6:	eb44 0406 	adc.w	r4, r4, r6
 8003ffa:	f04f 0100 	mov.w	r1, #0
 8003ffe:	f04f 0200 	mov.w	r2, #0
 8004002:	0262      	lsls	r2, r4, #9
 8004004:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004008:	0259      	lsls	r1, r3, #9
 800400a:	460b      	mov	r3, r1
 800400c:	4614      	mov	r4, r2
 800400e:	4618      	mov	r0, r3
 8004010:	4621      	mov	r1, r4
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f04f 0400 	mov.w	r4, #0
 8004018:	461a      	mov	r2, r3
 800401a:	4623      	mov	r3, r4
 800401c:	f7fc fe54 	bl	8000cc8 <__aeabi_uldivmod>
 8004020:	4603      	mov	r3, r0
 8004022:	460c      	mov	r4, r1
 8004024:	617b      	str	r3, [r7, #20]
 8004026:	e049      	b.n	80040bc <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004028:	4b2e      	ldr	r3, [pc, #184]	; (80040e4 <HAL_RCC_GetSysClockFreq+0x334>)
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	099b      	lsrs	r3, r3, #6
 800402e:	f04f 0400 	mov.w	r4, #0
 8004032:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004036:	f04f 0200 	mov.w	r2, #0
 800403a:	ea03 0501 	and.w	r5, r3, r1
 800403e:	ea04 0602 	and.w	r6, r4, r2
 8004042:	4629      	mov	r1, r5
 8004044:	4632      	mov	r2, r6
 8004046:	f04f 0300 	mov.w	r3, #0
 800404a:	f04f 0400 	mov.w	r4, #0
 800404e:	0154      	lsls	r4, r2, #5
 8004050:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004054:	014b      	lsls	r3, r1, #5
 8004056:	4619      	mov	r1, r3
 8004058:	4622      	mov	r2, r4
 800405a:	1b49      	subs	r1, r1, r5
 800405c:	eb62 0206 	sbc.w	r2, r2, r6
 8004060:	f04f 0300 	mov.w	r3, #0
 8004064:	f04f 0400 	mov.w	r4, #0
 8004068:	0194      	lsls	r4, r2, #6
 800406a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800406e:	018b      	lsls	r3, r1, #6
 8004070:	1a5b      	subs	r3, r3, r1
 8004072:	eb64 0402 	sbc.w	r4, r4, r2
 8004076:	f04f 0100 	mov.w	r1, #0
 800407a:	f04f 0200 	mov.w	r2, #0
 800407e:	00e2      	lsls	r2, r4, #3
 8004080:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004084:	00d9      	lsls	r1, r3, #3
 8004086:	460b      	mov	r3, r1
 8004088:	4614      	mov	r4, r2
 800408a:	195b      	adds	r3, r3, r5
 800408c:	eb44 0406 	adc.w	r4, r4, r6
 8004090:	f04f 0100 	mov.w	r1, #0
 8004094:	f04f 0200 	mov.w	r2, #0
 8004098:	02a2      	lsls	r2, r4, #10
 800409a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800409e:	0299      	lsls	r1, r3, #10
 80040a0:	460b      	mov	r3, r1
 80040a2:	4614      	mov	r4, r2
 80040a4:	4618      	mov	r0, r3
 80040a6:	4621      	mov	r1, r4
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f04f 0400 	mov.w	r4, #0
 80040ae:	461a      	mov	r2, r3
 80040b0:	4623      	mov	r3, r4
 80040b2:	f7fc fe09 	bl	8000cc8 <__aeabi_uldivmod>
 80040b6:	4603      	mov	r3, r0
 80040b8:	460c      	mov	r4, r1
 80040ba:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80040bc:	4b09      	ldr	r3, [pc, #36]	; (80040e4 <HAL_RCC_GetSysClockFreq+0x334>)
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	0f1b      	lsrs	r3, r3, #28
 80040c2:	f003 0307 	and.w	r3, r3, #7
 80040c6:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80040c8:	697a      	ldr	r2, [r7, #20]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80040d0:	613b      	str	r3, [r7, #16]
      break;
 80040d2:	e002      	b.n	80040da <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80040d4:	4b04      	ldr	r3, [pc, #16]	; (80040e8 <HAL_RCC_GetSysClockFreq+0x338>)
 80040d6:	613b      	str	r3, [r7, #16]
      break;
 80040d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040da:	693b      	ldr	r3, [r7, #16]
}
 80040dc:	4618      	mov	r0, r3
 80040de:	371c      	adds	r7, #28
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040e4:	40023800 	.word	0x40023800
 80040e8:	00f42400 	.word	0x00f42400
 80040ec:	007a1200 	.word	0x007a1200

080040f0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b086      	sub	sp, #24
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80040f8:	2300      	movs	r3, #0
 80040fa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0301 	and.w	r3, r3, #1
 8004104:	2b00      	cmp	r3, #0
 8004106:	f000 8083 	beq.w	8004210 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800410a:	4b95      	ldr	r3, [pc, #596]	; (8004360 <HAL_RCC_OscConfig+0x270>)
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	f003 030c 	and.w	r3, r3, #12
 8004112:	2b04      	cmp	r3, #4
 8004114:	d019      	beq.n	800414a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004116:	4b92      	ldr	r3, [pc, #584]	; (8004360 <HAL_RCC_OscConfig+0x270>)
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800411e:	2b08      	cmp	r3, #8
 8004120:	d106      	bne.n	8004130 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004122:	4b8f      	ldr	r3, [pc, #572]	; (8004360 <HAL_RCC_OscConfig+0x270>)
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800412a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800412e:	d00c      	beq.n	800414a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004130:	4b8b      	ldr	r3, [pc, #556]	; (8004360 <HAL_RCC_OscConfig+0x270>)
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004138:	2b0c      	cmp	r3, #12
 800413a:	d112      	bne.n	8004162 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800413c:	4b88      	ldr	r3, [pc, #544]	; (8004360 <HAL_RCC_OscConfig+0x270>)
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004144:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004148:	d10b      	bne.n	8004162 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800414a:	4b85      	ldr	r3, [pc, #532]	; (8004360 <HAL_RCC_OscConfig+0x270>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d05b      	beq.n	800420e <HAL_RCC_OscConfig+0x11e>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d157      	bne.n	800420e <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e216      	b.n	8004590 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800416a:	d106      	bne.n	800417a <HAL_RCC_OscConfig+0x8a>
 800416c:	4b7c      	ldr	r3, [pc, #496]	; (8004360 <HAL_RCC_OscConfig+0x270>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a7b      	ldr	r2, [pc, #492]	; (8004360 <HAL_RCC_OscConfig+0x270>)
 8004172:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004176:	6013      	str	r3, [r2, #0]
 8004178:	e01d      	b.n	80041b6 <HAL_RCC_OscConfig+0xc6>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004182:	d10c      	bne.n	800419e <HAL_RCC_OscConfig+0xae>
 8004184:	4b76      	ldr	r3, [pc, #472]	; (8004360 <HAL_RCC_OscConfig+0x270>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a75      	ldr	r2, [pc, #468]	; (8004360 <HAL_RCC_OscConfig+0x270>)
 800418a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800418e:	6013      	str	r3, [r2, #0]
 8004190:	4b73      	ldr	r3, [pc, #460]	; (8004360 <HAL_RCC_OscConfig+0x270>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a72      	ldr	r2, [pc, #456]	; (8004360 <HAL_RCC_OscConfig+0x270>)
 8004196:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800419a:	6013      	str	r3, [r2, #0]
 800419c:	e00b      	b.n	80041b6 <HAL_RCC_OscConfig+0xc6>
 800419e:	4b70      	ldr	r3, [pc, #448]	; (8004360 <HAL_RCC_OscConfig+0x270>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a6f      	ldr	r2, [pc, #444]	; (8004360 <HAL_RCC_OscConfig+0x270>)
 80041a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041a8:	6013      	str	r3, [r2, #0]
 80041aa:	4b6d      	ldr	r3, [pc, #436]	; (8004360 <HAL_RCC_OscConfig+0x270>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a6c      	ldr	r2, [pc, #432]	; (8004360 <HAL_RCC_OscConfig+0x270>)
 80041b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041b4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d013      	beq.n	80041e6 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041be:	f7fe f8a9 	bl	8002314 <HAL_GetTick>
 80041c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041c4:	e008      	b.n	80041d8 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041c6:	f7fe f8a5 	bl	8002314 <HAL_GetTick>
 80041ca:	4602      	mov	r2, r0
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	2b64      	cmp	r3, #100	; 0x64
 80041d2:	d901      	bls.n	80041d8 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e1db      	b.n	8004590 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041d8:	4b61      	ldr	r3, [pc, #388]	; (8004360 <HAL_RCC_OscConfig+0x270>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d0f0      	beq.n	80041c6 <HAL_RCC_OscConfig+0xd6>
 80041e4:	e014      	b.n	8004210 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041e6:	f7fe f895 	bl	8002314 <HAL_GetTick>
 80041ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041ec:	e008      	b.n	8004200 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041ee:	f7fe f891 	bl	8002314 <HAL_GetTick>
 80041f2:	4602      	mov	r2, r0
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	2b64      	cmp	r3, #100	; 0x64
 80041fa:	d901      	bls.n	8004200 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80041fc:	2303      	movs	r3, #3
 80041fe:	e1c7      	b.n	8004590 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004200:	4b57      	ldr	r3, [pc, #348]	; (8004360 <HAL_RCC_OscConfig+0x270>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004208:	2b00      	cmp	r3, #0
 800420a:	d1f0      	bne.n	80041ee <HAL_RCC_OscConfig+0xfe>
 800420c:	e000      	b.n	8004210 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800420e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0302 	and.w	r3, r3, #2
 8004218:	2b00      	cmp	r3, #0
 800421a:	d06f      	beq.n	80042fc <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800421c:	4b50      	ldr	r3, [pc, #320]	; (8004360 <HAL_RCC_OscConfig+0x270>)
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	f003 030c 	and.w	r3, r3, #12
 8004224:	2b00      	cmp	r3, #0
 8004226:	d017      	beq.n	8004258 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004228:	4b4d      	ldr	r3, [pc, #308]	; (8004360 <HAL_RCC_OscConfig+0x270>)
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004230:	2b08      	cmp	r3, #8
 8004232:	d105      	bne.n	8004240 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004234:	4b4a      	ldr	r3, [pc, #296]	; (8004360 <HAL_RCC_OscConfig+0x270>)
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800423c:	2b00      	cmp	r3, #0
 800423e:	d00b      	beq.n	8004258 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004240:	4b47      	ldr	r3, [pc, #284]	; (8004360 <HAL_RCC_OscConfig+0x270>)
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004248:	2b0c      	cmp	r3, #12
 800424a:	d11c      	bne.n	8004286 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800424c:	4b44      	ldr	r3, [pc, #272]	; (8004360 <HAL_RCC_OscConfig+0x270>)
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004254:	2b00      	cmp	r3, #0
 8004256:	d116      	bne.n	8004286 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004258:	4b41      	ldr	r3, [pc, #260]	; (8004360 <HAL_RCC_OscConfig+0x270>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0302 	and.w	r3, r3, #2
 8004260:	2b00      	cmp	r3, #0
 8004262:	d005      	beq.n	8004270 <HAL_RCC_OscConfig+0x180>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	2b01      	cmp	r3, #1
 800426a:	d001      	beq.n	8004270 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e18f      	b.n	8004590 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004270:	4b3b      	ldr	r3, [pc, #236]	; (8004360 <HAL_RCC_OscConfig+0x270>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	691b      	ldr	r3, [r3, #16]
 800427c:	00db      	lsls	r3, r3, #3
 800427e:	4938      	ldr	r1, [pc, #224]	; (8004360 <HAL_RCC_OscConfig+0x270>)
 8004280:	4313      	orrs	r3, r2
 8004282:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004284:	e03a      	b.n	80042fc <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d020      	beq.n	80042d0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800428e:	4b35      	ldr	r3, [pc, #212]	; (8004364 <HAL_RCC_OscConfig+0x274>)
 8004290:	2201      	movs	r2, #1
 8004292:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004294:	f7fe f83e 	bl	8002314 <HAL_GetTick>
 8004298:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800429a:	e008      	b.n	80042ae <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800429c:	f7fe f83a 	bl	8002314 <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d901      	bls.n	80042ae <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e170      	b.n	8004590 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042ae:	4b2c      	ldr	r3, [pc, #176]	; (8004360 <HAL_RCC_OscConfig+0x270>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0302 	and.w	r3, r3, #2
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d0f0      	beq.n	800429c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042ba:	4b29      	ldr	r3, [pc, #164]	; (8004360 <HAL_RCC_OscConfig+0x270>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	00db      	lsls	r3, r3, #3
 80042c8:	4925      	ldr	r1, [pc, #148]	; (8004360 <HAL_RCC_OscConfig+0x270>)
 80042ca:	4313      	orrs	r3, r2
 80042cc:	600b      	str	r3, [r1, #0]
 80042ce:	e015      	b.n	80042fc <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042d0:	4b24      	ldr	r3, [pc, #144]	; (8004364 <HAL_RCC_OscConfig+0x274>)
 80042d2:	2200      	movs	r2, #0
 80042d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042d6:	f7fe f81d 	bl	8002314 <HAL_GetTick>
 80042da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042dc:	e008      	b.n	80042f0 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042de:	f7fe f819 	bl	8002314 <HAL_GetTick>
 80042e2:	4602      	mov	r2, r0
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	1ad3      	subs	r3, r2, r3
 80042e8:	2b02      	cmp	r3, #2
 80042ea:	d901      	bls.n	80042f0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80042ec:	2303      	movs	r3, #3
 80042ee:	e14f      	b.n	8004590 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042f0:	4b1b      	ldr	r3, [pc, #108]	; (8004360 <HAL_RCC_OscConfig+0x270>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 0302 	and.w	r3, r3, #2
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d1f0      	bne.n	80042de <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0308 	and.w	r3, r3, #8
 8004304:	2b00      	cmp	r3, #0
 8004306:	d037      	beq.n	8004378 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	695b      	ldr	r3, [r3, #20]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d016      	beq.n	800433e <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004310:	4b15      	ldr	r3, [pc, #84]	; (8004368 <HAL_RCC_OscConfig+0x278>)
 8004312:	2201      	movs	r2, #1
 8004314:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004316:	f7fd fffd 	bl	8002314 <HAL_GetTick>
 800431a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800431c:	e008      	b.n	8004330 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800431e:	f7fd fff9 	bl	8002314 <HAL_GetTick>
 8004322:	4602      	mov	r2, r0
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	2b02      	cmp	r3, #2
 800432a:	d901      	bls.n	8004330 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	e12f      	b.n	8004590 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004330:	4b0b      	ldr	r3, [pc, #44]	; (8004360 <HAL_RCC_OscConfig+0x270>)
 8004332:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004334:	f003 0302 	and.w	r3, r3, #2
 8004338:	2b00      	cmp	r3, #0
 800433a:	d0f0      	beq.n	800431e <HAL_RCC_OscConfig+0x22e>
 800433c:	e01c      	b.n	8004378 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800433e:	4b0a      	ldr	r3, [pc, #40]	; (8004368 <HAL_RCC_OscConfig+0x278>)
 8004340:	2200      	movs	r2, #0
 8004342:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004344:	f7fd ffe6 	bl	8002314 <HAL_GetTick>
 8004348:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800434a:	e00f      	b.n	800436c <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800434c:	f7fd ffe2 	bl	8002314 <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	2b02      	cmp	r3, #2
 8004358:	d908      	bls.n	800436c <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e118      	b.n	8004590 <HAL_RCC_OscConfig+0x4a0>
 800435e:	bf00      	nop
 8004360:	40023800 	.word	0x40023800
 8004364:	42470000 	.word	0x42470000
 8004368:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800436c:	4b8a      	ldr	r3, [pc, #552]	; (8004598 <HAL_RCC_OscConfig+0x4a8>)
 800436e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004370:	f003 0302 	and.w	r3, r3, #2
 8004374:	2b00      	cmp	r3, #0
 8004376:	d1e9      	bne.n	800434c <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0304 	and.w	r3, r3, #4
 8004380:	2b00      	cmp	r3, #0
 8004382:	f000 8097 	beq.w	80044b4 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004386:	2300      	movs	r3, #0
 8004388:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800438a:	4b83      	ldr	r3, [pc, #524]	; (8004598 <HAL_RCC_OscConfig+0x4a8>)
 800438c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d10f      	bne.n	80043b6 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004396:	2300      	movs	r3, #0
 8004398:	60fb      	str	r3, [r7, #12]
 800439a:	4b7f      	ldr	r3, [pc, #508]	; (8004598 <HAL_RCC_OscConfig+0x4a8>)
 800439c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439e:	4a7e      	ldr	r2, [pc, #504]	; (8004598 <HAL_RCC_OscConfig+0x4a8>)
 80043a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043a4:	6413      	str	r3, [r2, #64]	; 0x40
 80043a6:	4b7c      	ldr	r3, [pc, #496]	; (8004598 <HAL_RCC_OscConfig+0x4a8>)
 80043a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043ae:	60fb      	str	r3, [r7, #12]
 80043b0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80043b2:	2301      	movs	r3, #1
 80043b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043b6:	4b79      	ldr	r3, [pc, #484]	; (800459c <HAL_RCC_OscConfig+0x4ac>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d118      	bne.n	80043f4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043c2:	4b76      	ldr	r3, [pc, #472]	; (800459c <HAL_RCC_OscConfig+0x4ac>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a75      	ldr	r2, [pc, #468]	; (800459c <HAL_RCC_OscConfig+0x4ac>)
 80043c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043ce:	f7fd ffa1 	bl	8002314 <HAL_GetTick>
 80043d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043d4:	e008      	b.n	80043e8 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043d6:	f7fd ff9d 	bl	8002314 <HAL_GetTick>
 80043da:	4602      	mov	r2, r0
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	1ad3      	subs	r3, r2, r3
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	d901      	bls.n	80043e8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80043e4:	2303      	movs	r3, #3
 80043e6:	e0d3      	b.n	8004590 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043e8:	4b6c      	ldr	r3, [pc, #432]	; (800459c <HAL_RCC_OscConfig+0x4ac>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d0f0      	beq.n	80043d6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d106      	bne.n	800440a <HAL_RCC_OscConfig+0x31a>
 80043fc:	4b66      	ldr	r3, [pc, #408]	; (8004598 <HAL_RCC_OscConfig+0x4a8>)
 80043fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004400:	4a65      	ldr	r2, [pc, #404]	; (8004598 <HAL_RCC_OscConfig+0x4a8>)
 8004402:	f043 0301 	orr.w	r3, r3, #1
 8004406:	6713      	str	r3, [r2, #112]	; 0x70
 8004408:	e01c      	b.n	8004444 <HAL_RCC_OscConfig+0x354>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	2b05      	cmp	r3, #5
 8004410:	d10c      	bne.n	800442c <HAL_RCC_OscConfig+0x33c>
 8004412:	4b61      	ldr	r3, [pc, #388]	; (8004598 <HAL_RCC_OscConfig+0x4a8>)
 8004414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004416:	4a60      	ldr	r2, [pc, #384]	; (8004598 <HAL_RCC_OscConfig+0x4a8>)
 8004418:	f043 0304 	orr.w	r3, r3, #4
 800441c:	6713      	str	r3, [r2, #112]	; 0x70
 800441e:	4b5e      	ldr	r3, [pc, #376]	; (8004598 <HAL_RCC_OscConfig+0x4a8>)
 8004420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004422:	4a5d      	ldr	r2, [pc, #372]	; (8004598 <HAL_RCC_OscConfig+0x4a8>)
 8004424:	f043 0301 	orr.w	r3, r3, #1
 8004428:	6713      	str	r3, [r2, #112]	; 0x70
 800442a:	e00b      	b.n	8004444 <HAL_RCC_OscConfig+0x354>
 800442c:	4b5a      	ldr	r3, [pc, #360]	; (8004598 <HAL_RCC_OscConfig+0x4a8>)
 800442e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004430:	4a59      	ldr	r2, [pc, #356]	; (8004598 <HAL_RCC_OscConfig+0x4a8>)
 8004432:	f023 0301 	bic.w	r3, r3, #1
 8004436:	6713      	str	r3, [r2, #112]	; 0x70
 8004438:	4b57      	ldr	r3, [pc, #348]	; (8004598 <HAL_RCC_OscConfig+0x4a8>)
 800443a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800443c:	4a56      	ldr	r2, [pc, #344]	; (8004598 <HAL_RCC_OscConfig+0x4a8>)
 800443e:	f023 0304 	bic.w	r3, r3, #4
 8004442:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d015      	beq.n	8004478 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800444c:	f7fd ff62 	bl	8002314 <HAL_GetTick>
 8004450:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004452:	e00a      	b.n	800446a <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004454:	f7fd ff5e 	bl	8002314 <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004462:	4293      	cmp	r3, r2
 8004464:	d901      	bls.n	800446a <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e092      	b.n	8004590 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800446a:	4b4b      	ldr	r3, [pc, #300]	; (8004598 <HAL_RCC_OscConfig+0x4a8>)
 800446c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800446e:	f003 0302 	and.w	r3, r3, #2
 8004472:	2b00      	cmp	r3, #0
 8004474:	d0ee      	beq.n	8004454 <HAL_RCC_OscConfig+0x364>
 8004476:	e014      	b.n	80044a2 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004478:	f7fd ff4c 	bl	8002314 <HAL_GetTick>
 800447c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800447e:	e00a      	b.n	8004496 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004480:	f7fd ff48 	bl	8002314 <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	f241 3288 	movw	r2, #5000	; 0x1388
 800448e:	4293      	cmp	r3, r2
 8004490:	d901      	bls.n	8004496 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e07c      	b.n	8004590 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004496:	4b40      	ldr	r3, [pc, #256]	; (8004598 <HAL_RCC_OscConfig+0x4a8>)
 8004498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800449a:	f003 0302 	and.w	r3, r3, #2
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d1ee      	bne.n	8004480 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044a2:	7dfb      	ldrb	r3, [r7, #23]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d105      	bne.n	80044b4 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044a8:	4b3b      	ldr	r3, [pc, #236]	; (8004598 <HAL_RCC_OscConfig+0x4a8>)
 80044aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ac:	4a3a      	ldr	r2, [pc, #232]	; (8004598 <HAL_RCC_OscConfig+0x4a8>)
 80044ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044b2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	699b      	ldr	r3, [r3, #24]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d068      	beq.n	800458e <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80044bc:	4b36      	ldr	r3, [pc, #216]	; (8004598 <HAL_RCC_OscConfig+0x4a8>)
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	f003 030c 	and.w	r3, r3, #12
 80044c4:	2b08      	cmp	r3, #8
 80044c6:	d060      	beq.n	800458a <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	699b      	ldr	r3, [r3, #24]
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d145      	bne.n	800455c <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044d0:	4b33      	ldr	r3, [pc, #204]	; (80045a0 <HAL_RCC_OscConfig+0x4b0>)
 80044d2:	2200      	movs	r2, #0
 80044d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044d6:	f7fd ff1d 	bl	8002314 <HAL_GetTick>
 80044da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044dc:	e008      	b.n	80044f0 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044de:	f7fd ff19 	bl	8002314 <HAL_GetTick>
 80044e2:	4602      	mov	r2, r0
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	1ad3      	subs	r3, r2, r3
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d901      	bls.n	80044f0 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 80044ec:	2303      	movs	r3, #3
 80044ee:	e04f      	b.n	8004590 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044f0:	4b29      	ldr	r3, [pc, #164]	; (8004598 <HAL_RCC_OscConfig+0x4a8>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d1f0      	bne.n	80044de <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	69da      	ldr	r2, [r3, #28]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6a1b      	ldr	r3, [r3, #32]
 8004504:	431a      	orrs	r2, r3
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450a:	019b      	lsls	r3, r3, #6
 800450c:	431a      	orrs	r2, r3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004512:	085b      	lsrs	r3, r3, #1
 8004514:	3b01      	subs	r3, #1
 8004516:	041b      	lsls	r3, r3, #16
 8004518:	431a      	orrs	r2, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800451e:	061b      	lsls	r3, r3, #24
 8004520:	431a      	orrs	r2, r3
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004526:	071b      	lsls	r3, r3, #28
 8004528:	491b      	ldr	r1, [pc, #108]	; (8004598 <HAL_RCC_OscConfig+0x4a8>)
 800452a:	4313      	orrs	r3, r2
 800452c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800452e:	4b1c      	ldr	r3, [pc, #112]	; (80045a0 <HAL_RCC_OscConfig+0x4b0>)
 8004530:	2201      	movs	r2, #1
 8004532:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004534:	f7fd feee 	bl	8002314 <HAL_GetTick>
 8004538:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800453a:	e008      	b.n	800454e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800453c:	f7fd feea 	bl	8002314 <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	2b02      	cmp	r3, #2
 8004548:	d901      	bls.n	800454e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	e020      	b.n	8004590 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800454e:	4b12      	ldr	r3, [pc, #72]	; (8004598 <HAL_RCC_OscConfig+0x4a8>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004556:	2b00      	cmp	r3, #0
 8004558:	d0f0      	beq.n	800453c <HAL_RCC_OscConfig+0x44c>
 800455a:	e018      	b.n	800458e <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800455c:	4b10      	ldr	r3, [pc, #64]	; (80045a0 <HAL_RCC_OscConfig+0x4b0>)
 800455e:	2200      	movs	r2, #0
 8004560:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004562:	f7fd fed7 	bl	8002314 <HAL_GetTick>
 8004566:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004568:	e008      	b.n	800457c <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800456a:	f7fd fed3 	bl	8002314 <HAL_GetTick>
 800456e:	4602      	mov	r2, r0
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	2b02      	cmp	r3, #2
 8004576:	d901      	bls.n	800457c <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8004578:	2303      	movs	r3, #3
 800457a:	e009      	b.n	8004590 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800457c:	4b06      	ldr	r3, [pc, #24]	; (8004598 <HAL_RCC_OscConfig+0x4a8>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004584:	2b00      	cmp	r3, #0
 8004586:	d1f0      	bne.n	800456a <HAL_RCC_OscConfig+0x47a>
 8004588:	e001      	b.n	800458e <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e000      	b.n	8004590 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 800458e:	2300      	movs	r3, #0
}
 8004590:	4618      	mov	r0, r3
 8004592:	3718      	adds	r7, #24
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}
 8004598:	40023800 	.word	0x40023800
 800459c:	40007000 	.word	0x40007000
 80045a0:	42470060 	.word	0x42470060

080045a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b082      	sub	sp, #8
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d101      	bne.n	80045b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e01d      	b.n	80045f2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d106      	bne.n	80045d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f7fd fcf6 	bl	8001fbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2202      	movs	r2, #2
 80045d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	3304      	adds	r3, #4
 80045e0:	4619      	mov	r1, r3
 80045e2:	4610      	mov	r0, r2
 80045e4:	f000 f9fa 	bl	80049dc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045f0:	2300      	movs	r3, #0
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3708      	adds	r7, #8
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}

080045fa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80045fa:	b580      	push	{r7, lr}
 80045fc:	b082      	sub	sp, #8
 80045fe:	af00      	add	r7, sp, #0
 8004600:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d101      	bne.n	800460c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e01d      	b.n	8004648 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004612:	b2db      	uxtb	r3, r3
 8004614:	2b00      	cmp	r3, #0
 8004616:	d106      	bne.n	8004626 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f000 f815 	bl	8004650 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2202      	movs	r2, #2
 800462a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	3304      	adds	r3, #4
 8004636:	4619      	mov	r1, r3
 8004638:	4610      	mov	r0, r2
 800463a:	f000 f9cf 	bl	80049dc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2201      	movs	r2, #1
 8004642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004646:	2300      	movs	r3, #0
}
 8004648:	4618      	mov	r0, r3
 800464a:	3708      	adds	r7, #8
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}

08004650 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004650:	b480      	push	{r7}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004658:	bf00      	nop
 800465a:	370c      	adds	r7, #12
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr

08004664 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b084      	sub	sp, #16
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	2201      	movs	r2, #1
 8004674:	6839      	ldr	r1, [r7, #0]
 8004676:	4618      	mov	r0, r3
 8004678:	f000 fc9a 	bl	8004fb0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a15      	ldr	r2, [pc, #84]	; (80046d8 <HAL_TIM_PWM_Start+0x74>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d004      	beq.n	8004690 <HAL_TIM_PWM_Start+0x2c>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a14      	ldr	r2, [pc, #80]	; (80046dc <HAL_TIM_PWM_Start+0x78>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d101      	bne.n	8004694 <HAL_TIM_PWM_Start+0x30>
 8004690:	2301      	movs	r3, #1
 8004692:	e000      	b.n	8004696 <HAL_TIM_PWM_Start+0x32>
 8004694:	2300      	movs	r3, #0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d007      	beq.n	80046aa <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046a8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	f003 0307 	and.w	r3, r3, #7
 80046b4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2b06      	cmp	r3, #6
 80046ba:	d007      	beq.n	80046cc <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f042 0201 	orr.w	r2, r2, #1
 80046ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046cc:	2300      	movs	r3, #0
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3710      	adds	r7, #16
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	40010000 	.word	0x40010000
 80046dc:	40010400 	.word	0x40010400

080046e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d101      	bne.n	80046fa <HAL_TIM_PWM_ConfigChannel+0x1a>
 80046f6:	2302      	movs	r3, #2
 80046f8:	e0b4      	b.n	8004864 <HAL_TIM_PWM_ConfigChannel+0x184>
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2201      	movs	r2, #1
 80046fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2202      	movs	r2, #2
 8004706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2b0c      	cmp	r3, #12
 800470e:	f200 809f 	bhi.w	8004850 <HAL_TIM_PWM_ConfigChannel+0x170>
 8004712:	a201      	add	r2, pc, #4	; (adr r2, 8004718 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004718:	0800474d 	.word	0x0800474d
 800471c:	08004851 	.word	0x08004851
 8004720:	08004851 	.word	0x08004851
 8004724:	08004851 	.word	0x08004851
 8004728:	0800478d 	.word	0x0800478d
 800472c:	08004851 	.word	0x08004851
 8004730:	08004851 	.word	0x08004851
 8004734:	08004851 	.word	0x08004851
 8004738:	080047cf 	.word	0x080047cf
 800473c:	08004851 	.word	0x08004851
 8004740:	08004851 	.word	0x08004851
 8004744:	08004851 	.word	0x08004851
 8004748:	0800480f 	.word	0x0800480f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	68b9      	ldr	r1, [r7, #8]
 8004752:	4618      	mov	r0, r3
 8004754:	f000 f9e2 	bl	8004b1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	699a      	ldr	r2, [r3, #24]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f042 0208 	orr.w	r2, r2, #8
 8004766:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	699a      	ldr	r2, [r3, #24]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f022 0204 	bic.w	r2, r2, #4
 8004776:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	6999      	ldr	r1, [r3, #24]
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	691a      	ldr	r2, [r3, #16]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	430a      	orrs	r2, r1
 8004788:	619a      	str	r2, [r3, #24]
      break;
 800478a:	e062      	b.n	8004852 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	68b9      	ldr	r1, [r7, #8]
 8004792:	4618      	mov	r0, r3
 8004794:	f000 fa32 	bl	8004bfc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	699a      	ldr	r2, [r3, #24]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	699a      	ldr	r2, [r3, #24]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	6999      	ldr	r1, [r3, #24]
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	691b      	ldr	r3, [r3, #16]
 80047c2:	021a      	lsls	r2, r3, #8
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	430a      	orrs	r2, r1
 80047ca:	619a      	str	r2, [r3, #24]
      break;
 80047cc:	e041      	b.n	8004852 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	68b9      	ldr	r1, [r7, #8]
 80047d4:	4618      	mov	r0, r3
 80047d6:	f000 fa87 	bl	8004ce8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	69da      	ldr	r2, [r3, #28]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f042 0208 	orr.w	r2, r2, #8
 80047e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	69da      	ldr	r2, [r3, #28]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f022 0204 	bic.w	r2, r2, #4
 80047f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	69d9      	ldr	r1, [r3, #28]
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	691a      	ldr	r2, [r3, #16]
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	430a      	orrs	r2, r1
 800480a:	61da      	str	r2, [r3, #28]
      break;
 800480c:	e021      	b.n	8004852 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	68b9      	ldr	r1, [r7, #8]
 8004814:	4618      	mov	r0, r3
 8004816:	f000 fadb 	bl	8004dd0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	69da      	ldr	r2, [r3, #28]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004828:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	69da      	ldr	r2, [r3, #28]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004838:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	69d9      	ldr	r1, [r3, #28]
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	691b      	ldr	r3, [r3, #16]
 8004844:	021a      	lsls	r2, r3, #8
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	430a      	orrs	r2, r1
 800484c:	61da      	str	r2, [r3, #28]
      break;
 800484e:	e000      	b.n	8004852 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8004850:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2201      	movs	r2, #1
 8004856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2200      	movs	r2, #0
 800485e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004862:	2300      	movs	r3, #0
}
 8004864:	4618      	mov	r0, r3
 8004866:	3710      	adds	r7, #16
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}

0800486c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b084      	sub	sp, #16
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800487c:	2b01      	cmp	r3, #1
 800487e:	d101      	bne.n	8004884 <HAL_TIM_ConfigClockSource+0x18>
 8004880:	2302      	movs	r3, #2
 8004882:	e0a6      	b.n	80049d2 <HAL_TIM_ConfigClockSource+0x166>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2201      	movs	r2, #1
 8004888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2202      	movs	r2, #2
 8004890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80048a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048aa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	68fa      	ldr	r2, [r7, #12]
 80048b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2b40      	cmp	r3, #64	; 0x40
 80048ba:	d067      	beq.n	800498c <HAL_TIM_ConfigClockSource+0x120>
 80048bc:	2b40      	cmp	r3, #64	; 0x40
 80048be:	d80b      	bhi.n	80048d8 <HAL_TIM_ConfigClockSource+0x6c>
 80048c0:	2b10      	cmp	r3, #16
 80048c2:	d073      	beq.n	80049ac <HAL_TIM_ConfigClockSource+0x140>
 80048c4:	2b10      	cmp	r3, #16
 80048c6:	d802      	bhi.n	80048ce <HAL_TIM_ConfigClockSource+0x62>
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d06f      	beq.n	80049ac <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80048cc:	e078      	b.n	80049c0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80048ce:	2b20      	cmp	r3, #32
 80048d0:	d06c      	beq.n	80049ac <HAL_TIM_ConfigClockSource+0x140>
 80048d2:	2b30      	cmp	r3, #48	; 0x30
 80048d4:	d06a      	beq.n	80049ac <HAL_TIM_ConfigClockSource+0x140>
      break;
 80048d6:	e073      	b.n	80049c0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80048d8:	2b70      	cmp	r3, #112	; 0x70
 80048da:	d00d      	beq.n	80048f8 <HAL_TIM_ConfigClockSource+0x8c>
 80048dc:	2b70      	cmp	r3, #112	; 0x70
 80048de:	d804      	bhi.n	80048ea <HAL_TIM_ConfigClockSource+0x7e>
 80048e0:	2b50      	cmp	r3, #80	; 0x50
 80048e2:	d033      	beq.n	800494c <HAL_TIM_ConfigClockSource+0xe0>
 80048e4:	2b60      	cmp	r3, #96	; 0x60
 80048e6:	d041      	beq.n	800496c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80048e8:	e06a      	b.n	80049c0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80048ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048ee:	d066      	beq.n	80049be <HAL_TIM_ConfigClockSource+0x152>
 80048f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048f4:	d017      	beq.n	8004926 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80048f6:	e063      	b.n	80049c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6818      	ldr	r0, [r3, #0]
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	6899      	ldr	r1, [r3, #8]
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	685a      	ldr	r2, [r3, #4]
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	f000 fb32 	bl	8004f70 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800491a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	68fa      	ldr	r2, [r7, #12]
 8004922:	609a      	str	r2, [r3, #8]
      break;
 8004924:	e04c      	b.n	80049c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6818      	ldr	r0, [r3, #0]
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	6899      	ldr	r1, [r3, #8]
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	685a      	ldr	r2, [r3, #4]
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	f000 fb1b 	bl	8004f70 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	689a      	ldr	r2, [r3, #8]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004948:	609a      	str	r2, [r3, #8]
      break;
 800494a:	e039      	b.n	80049c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6818      	ldr	r0, [r3, #0]
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	6859      	ldr	r1, [r3, #4]
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	461a      	mov	r2, r3
 800495a:	f000 fa8f 	bl	8004e7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	2150      	movs	r1, #80	; 0x50
 8004964:	4618      	mov	r0, r3
 8004966:	f000 fae8 	bl	8004f3a <TIM_ITRx_SetConfig>
      break;
 800496a:	e029      	b.n	80049c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6818      	ldr	r0, [r3, #0]
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	6859      	ldr	r1, [r3, #4]
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	461a      	mov	r2, r3
 800497a:	f000 faae 	bl	8004eda <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2160      	movs	r1, #96	; 0x60
 8004984:	4618      	mov	r0, r3
 8004986:	f000 fad8 	bl	8004f3a <TIM_ITRx_SetConfig>
      break;
 800498a:	e019      	b.n	80049c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6818      	ldr	r0, [r3, #0]
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	6859      	ldr	r1, [r3, #4]
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	461a      	mov	r2, r3
 800499a:	f000 fa6f 	bl	8004e7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	2140      	movs	r1, #64	; 0x40
 80049a4:	4618      	mov	r0, r3
 80049a6:	f000 fac8 	bl	8004f3a <TIM_ITRx_SetConfig>
      break;
 80049aa:	e009      	b.n	80049c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4619      	mov	r1, r3
 80049b6:	4610      	mov	r0, r2
 80049b8:	f000 fabf 	bl	8004f3a <TIM_ITRx_SetConfig>
      break;
 80049bc:	e000      	b.n	80049c0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80049be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049d0:	2300      	movs	r3, #0
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3710      	adds	r7, #16
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
	...

080049dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80049dc:	b480      	push	{r7}
 80049de:	b085      	sub	sp, #20
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	4a40      	ldr	r2, [pc, #256]	; (8004af0 <TIM_Base_SetConfig+0x114>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d013      	beq.n	8004a1c <TIM_Base_SetConfig+0x40>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049fa:	d00f      	beq.n	8004a1c <TIM_Base_SetConfig+0x40>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4a3d      	ldr	r2, [pc, #244]	; (8004af4 <TIM_Base_SetConfig+0x118>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d00b      	beq.n	8004a1c <TIM_Base_SetConfig+0x40>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	4a3c      	ldr	r2, [pc, #240]	; (8004af8 <TIM_Base_SetConfig+0x11c>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d007      	beq.n	8004a1c <TIM_Base_SetConfig+0x40>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	4a3b      	ldr	r2, [pc, #236]	; (8004afc <TIM_Base_SetConfig+0x120>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d003      	beq.n	8004a1c <TIM_Base_SetConfig+0x40>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	4a3a      	ldr	r2, [pc, #232]	; (8004b00 <TIM_Base_SetConfig+0x124>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d108      	bne.n	8004a2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	68fa      	ldr	r2, [r7, #12]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a2f      	ldr	r2, [pc, #188]	; (8004af0 <TIM_Base_SetConfig+0x114>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d02b      	beq.n	8004a8e <TIM_Base_SetConfig+0xb2>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a3c:	d027      	beq.n	8004a8e <TIM_Base_SetConfig+0xb2>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	4a2c      	ldr	r2, [pc, #176]	; (8004af4 <TIM_Base_SetConfig+0x118>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d023      	beq.n	8004a8e <TIM_Base_SetConfig+0xb2>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4a2b      	ldr	r2, [pc, #172]	; (8004af8 <TIM_Base_SetConfig+0x11c>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d01f      	beq.n	8004a8e <TIM_Base_SetConfig+0xb2>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4a2a      	ldr	r2, [pc, #168]	; (8004afc <TIM_Base_SetConfig+0x120>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d01b      	beq.n	8004a8e <TIM_Base_SetConfig+0xb2>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a29      	ldr	r2, [pc, #164]	; (8004b00 <TIM_Base_SetConfig+0x124>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d017      	beq.n	8004a8e <TIM_Base_SetConfig+0xb2>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4a28      	ldr	r2, [pc, #160]	; (8004b04 <TIM_Base_SetConfig+0x128>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d013      	beq.n	8004a8e <TIM_Base_SetConfig+0xb2>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4a27      	ldr	r2, [pc, #156]	; (8004b08 <TIM_Base_SetConfig+0x12c>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d00f      	beq.n	8004a8e <TIM_Base_SetConfig+0xb2>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	4a26      	ldr	r2, [pc, #152]	; (8004b0c <TIM_Base_SetConfig+0x130>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d00b      	beq.n	8004a8e <TIM_Base_SetConfig+0xb2>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	4a25      	ldr	r2, [pc, #148]	; (8004b10 <TIM_Base_SetConfig+0x134>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d007      	beq.n	8004a8e <TIM_Base_SetConfig+0xb2>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4a24      	ldr	r2, [pc, #144]	; (8004b14 <TIM_Base_SetConfig+0x138>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d003      	beq.n	8004a8e <TIM_Base_SetConfig+0xb2>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4a23      	ldr	r2, [pc, #140]	; (8004b18 <TIM_Base_SetConfig+0x13c>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d108      	bne.n	8004aa0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	68fa      	ldr	r2, [r7, #12]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	695b      	ldr	r3, [r3, #20]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	68fa      	ldr	r2, [r7, #12]
 8004ab2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	689a      	ldr	r2, [r3, #8]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	4a0a      	ldr	r2, [pc, #40]	; (8004af0 <TIM_Base_SetConfig+0x114>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d003      	beq.n	8004ad4 <TIM_Base_SetConfig+0xf8>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	4a0c      	ldr	r2, [pc, #48]	; (8004b00 <TIM_Base_SetConfig+0x124>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d103      	bne.n	8004adc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	691a      	ldr	r2, [r3, #16]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	615a      	str	r2, [r3, #20]
}
 8004ae2:	bf00      	nop
 8004ae4:	3714      	adds	r7, #20
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr
 8004aee:	bf00      	nop
 8004af0:	40010000 	.word	0x40010000
 8004af4:	40000400 	.word	0x40000400
 8004af8:	40000800 	.word	0x40000800
 8004afc:	40000c00 	.word	0x40000c00
 8004b00:	40010400 	.word	0x40010400
 8004b04:	40014000 	.word	0x40014000
 8004b08:	40014400 	.word	0x40014400
 8004b0c:	40014800 	.word	0x40014800
 8004b10:	40001800 	.word	0x40001800
 8004b14:	40001c00 	.word	0x40001c00
 8004b18:	40002000 	.word	0x40002000

08004b1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b087      	sub	sp, #28
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6a1b      	ldr	r3, [r3, #32]
 8004b2a:	f023 0201 	bic.w	r2, r3, #1
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a1b      	ldr	r3, [r3, #32]
 8004b36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	699b      	ldr	r3, [r3, #24]
 8004b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f023 0303 	bic.w	r3, r3, #3
 8004b52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	68fa      	ldr	r2, [r7, #12]
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	f023 0302 	bic.w	r3, r3, #2
 8004b64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	697a      	ldr	r2, [r7, #20]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a20      	ldr	r2, [pc, #128]	; (8004bf4 <TIM_OC1_SetConfig+0xd8>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d003      	beq.n	8004b80 <TIM_OC1_SetConfig+0x64>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4a1f      	ldr	r2, [pc, #124]	; (8004bf8 <TIM_OC1_SetConfig+0xdc>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d10c      	bne.n	8004b9a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	f023 0308 	bic.w	r3, r3, #8
 8004b86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	697a      	ldr	r2, [r7, #20]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	f023 0304 	bic.w	r3, r3, #4
 8004b98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	4a15      	ldr	r2, [pc, #84]	; (8004bf4 <TIM_OC1_SetConfig+0xd8>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d003      	beq.n	8004baa <TIM_OC1_SetConfig+0x8e>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a14      	ldr	r2, [pc, #80]	; (8004bf8 <TIM_OC1_SetConfig+0xdc>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d111      	bne.n	8004bce <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004bb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	695b      	ldr	r3, [r3, #20]
 8004bbe:	693a      	ldr	r2, [r7, #16]
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	699b      	ldr	r3, [r3, #24]
 8004bc8:	693a      	ldr	r2, [r7, #16]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	693a      	ldr	r2, [r7, #16]
 8004bd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	68fa      	ldr	r2, [r7, #12]
 8004bd8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	685a      	ldr	r2, [r3, #4]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	697a      	ldr	r2, [r7, #20]
 8004be6:	621a      	str	r2, [r3, #32]
}
 8004be8:	bf00      	nop
 8004bea:	371c      	adds	r7, #28
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr
 8004bf4:	40010000 	.word	0x40010000
 8004bf8:	40010400 	.word	0x40010400

08004bfc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b087      	sub	sp, #28
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6a1b      	ldr	r3, [r3, #32]
 8004c0a:	f023 0210 	bic.w	r2, r3, #16
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a1b      	ldr	r3, [r3, #32]
 8004c16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	699b      	ldr	r3, [r3, #24]
 8004c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	021b      	lsls	r3, r3, #8
 8004c3a:	68fa      	ldr	r2, [r7, #12]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	f023 0320 	bic.w	r3, r3, #32
 8004c46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	011b      	lsls	r3, r3, #4
 8004c4e:	697a      	ldr	r2, [r7, #20]
 8004c50:	4313      	orrs	r3, r2
 8004c52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4a22      	ldr	r2, [pc, #136]	; (8004ce0 <TIM_OC2_SetConfig+0xe4>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d003      	beq.n	8004c64 <TIM_OC2_SetConfig+0x68>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	4a21      	ldr	r2, [pc, #132]	; (8004ce4 <TIM_OC2_SetConfig+0xe8>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d10d      	bne.n	8004c80 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	011b      	lsls	r3, r3, #4
 8004c72:	697a      	ldr	r2, [r7, #20]
 8004c74:	4313      	orrs	r3, r2
 8004c76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c7e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4a17      	ldr	r2, [pc, #92]	; (8004ce0 <TIM_OC2_SetConfig+0xe4>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d003      	beq.n	8004c90 <TIM_OC2_SetConfig+0x94>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4a16      	ldr	r2, [pc, #88]	; (8004ce4 <TIM_OC2_SetConfig+0xe8>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d113      	bne.n	8004cb8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	695b      	ldr	r3, [r3, #20]
 8004ca4:	009b      	lsls	r3, r3, #2
 8004ca6:	693a      	ldr	r2, [r7, #16]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	699b      	ldr	r3, [r3, #24]
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	693a      	ldr	r2, [r7, #16]
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	693a      	ldr	r2, [r7, #16]
 8004cbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	68fa      	ldr	r2, [r7, #12]
 8004cc2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	685a      	ldr	r2, [r3, #4]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	697a      	ldr	r2, [r7, #20]
 8004cd0:	621a      	str	r2, [r3, #32]
}
 8004cd2:	bf00      	nop
 8004cd4:	371c      	adds	r7, #28
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr
 8004cde:	bf00      	nop
 8004ce0:	40010000 	.word	0x40010000
 8004ce4:	40010400 	.word	0x40010400

08004ce8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b087      	sub	sp, #28
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a1b      	ldr	r3, [r3, #32]
 8004cf6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a1b      	ldr	r3, [r3, #32]
 8004d02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	69db      	ldr	r3, [r3, #28]
 8004d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f023 0303 	bic.w	r3, r3, #3
 8004d1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	68fa      	ldr	r2, [r7, #12]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	021b      	lsls	r3, r3, #8
 8004d38:	697a      	ldr	r2, [r7, #20]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a21      	ldr	r2, [pc, #132]	; (8004dc8 <TIM_OC3_SetConfig+0xe0>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d003      	beq.n	8004d4e <TIM_OC3_SetConfig+0x66>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a20      	ldr	r2, [pc, #128]	; (8004dcc <TIM_OC3_SetConfig+0xe4>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d10d      	bne.n	8004d6a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	68db      	ldr	r3, [r3, #12]
 8004d5a:	021b      	lsls	r3, r3, #8
 8004d5c:	697a      	ldr	r2, [r7, #20]
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4a16      	ldr	r2, [pc, #88]	; (8004dc8 <TIM_OC3_SetConfig+0xe0>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d003      	beq.n	8004d7a <TIM_OC3_SetConfig+0x92>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4a15      	ldr	r2, [pc, #84]	; (8004dcc <TIM_OC3_SetConfig+0xe4>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d113      	bne.n	8004da2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	695b      	ldr	r3, [r3, #20]
 8004d8e:	011b      	lsls	r3, r3, #4
 8004d90:	693a      	ldr	r2, [r7, #16]
 8004d92:	4313      	orrs	r3, r2
 8004d94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	699b      	ldr	r3, [r3, #24]
 8004d9a:	011b      	lsls	r3, r3, #4
 8004d9c:	693a      	ldr	r2, [r7, #16]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	693a      	ldr	r2, [r7, #16]
 8004da6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	68fa      	ldr	r2, [r7, #12]
 8004dac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	685a      	ldr	r2, [r3, #4]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	697a      	ldr	r2, [r7, #20]
 8004dba:	621a      	str	r2, [r3, #32]
}
 8004dbc:	bf00      	nop
 8004dbe:	371c      	adds	r7, #28
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr
 8004dc8:	40010000 	.word	0x40010000
 8004dcc:	40010400 	.word	0x40010400

08004dd0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b087      	sub	sp, #28
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a1b      	ldr	r3, [r3, #32]
 8004dde:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6a1b      	ldr	r3, [r3, #32]
 8004dea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	69db      	ldr	r3, [r3, #28]
 8004df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	021b      	lsls	r3, r3, #8
 8004e0e:	68fa      	ldr	r2, [r7, #12]
 8004e10:	4313      	orrs	r3, r2
 8004e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	031b      	lsls	r3, r3, #12
 8004e22:	693a      	ldr	r2, [r7, #16]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4a12      	ldr	r2, [pc, #72]	; (8004e74 <TIM_OC4_SetConfig+0xa4>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d003      	beq.n	8004e38 <TIM_OC4_SetConfig+0x68>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	4a11      	ldr	r2, [pc, #68]	; (8004e78 <TIM_OC4_SetConfig+0xa8>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d109      	bne.n	8004e4c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e3e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	695b      	ldr	r3, [r3, #20]
 8004e44:	019b      	lsls	r3, r3, #6
 8004e46:	697a      	ldr	r2, [r7, #20]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	697a      	ldr	r2, [r7, #20]
 8004e50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	68fa      	ldr	r2, [r7, #12]
 8004e56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	685a      	ldr	r2, [r3, #4]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	693a      	ldr	r2, [r7, #16]
 8004e64:	621a      	str	r2, [r3, #32]
}
 8004e66:	bf00      	nop
 8004e68:	371c      	adds	r7, #28
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr
 8004e72:	bf00      	nop
 8004e74:	40010000 	.word	0x40010000
 8004e78:	40010400 	.word	0x40010400

08004e7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b087      	sub	sp, #28
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	60b9      	str	r1, [r7, #8]
 8004e86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	6a1b      	ldr	r3, [r3, #32]
 8004e8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	6a1b      	ldr	r3, [r3, #32]
 8004e92:	f023 0201 	bic.w	r2, r3, #1
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	699b      	ldr	r3, [r3, #24]
 8004e9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ea6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	011b      	lsls	r3, r3, #4
 8004eac:	693a      	ldr	r2, [r7, #16]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	f023 030a 	bic.w	r3, r3, #10
 8004eb8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004eba:	697a      	ldr	r2, [r7, #20]
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	693a      	ldr	r2, [r7, #16]
 8004ec6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	697a      	ldr	r2, [r7, #20]
 8004ecc:	621a      	str	r2, [r3, #32]
}
 8004ece:	bf00      	nop
 8004ed0:	371c      	adds	r7, #28
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr

08004eda <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004eda:	b480      	push	{r7}
 8004edc:	b087      	sub	sp, #28
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	60f8      	str	r0, [r7, #12]
 8004ee2:	60b9      	str	r1, [r7, #8]
 8004ee4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	6a1b      	ldr	r3, [r3, #32]
 8004eea:	f023 0210 	bic.w	r2, r3, #16
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	699b      	ldr	r3, [r3, #24]
 8004ef6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6a1b      	ldr	r3, [r3, #32]
 8004efc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f04:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	031b      	lsls	r3, r3, #12
 8004f0a:	697a      	ldr	r2, [r7, #20]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f16:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	011b      	lsls	r3, r3, #4
 8004f1c:	693a      	ldr	r2, [r7, #16]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	697a      	ldr	r2, [r7, #20]
 8004f26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	693a      	ldr	r2, [r7, #16]
 8004f2c:	621a      	str	r2, [r3, #32]
}
 8004f2e:	bf00      	nop
 8004f30:	371c      	adds	r7, #28
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr

08004f3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f3a:	b480      	push	{r7}
 8004f3c:	b085      	sub	sp, #20
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	6078      	str	r0, [r7, #4]
 8004f42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f52:	683a      	ldr	r2, [r7, #0]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	f043 0307 	orr.w	r3, r3, #7
 8004f5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	68fa      	ldr	r2, [r7, #12]
 8004f62:	609a      	str	r2, [r3, #8]
}
 8004f64:	bf00      	nop
 8004f66:	3714      	adds	r7, #20
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr

08004f70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b087      	sub	sp, #28
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	60b9      	str	r1, [r7, #8]
 8004f7a:	607a      	str	r2, [r7, #4]
 8004f7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	021a      	lsls	r2, r3, #8
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	431a      	orrs	r2, r3
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	697a      	ldr	r2, [r7, #20]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	697a      	ldr	r2, [r7, #20]
 8004fa2:	609a      	str	r2, [r3, #8]
}
 8004fa4:	bf00      	nop
 8004fa6:	371c      	adds	r7, #28
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr

08004fb0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b087      	sub	sp, #28
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	60f8      	str	r0, [r7, #12]
 8004fb8:	60b9      	str	r1, [r7, #8]
 8004fba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	f003 031f 	and.w	r3, r3, #31
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	6a1a      	ldr	r2, [r3, #32]
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	43db      	mvns	r3, r3
 8004fd2:	401a      	ands	r2, r3
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6a1a      	ldr	r2, [r3, #32]
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	f003 031f 	and.w	r3, r3, #31
 8004fe2:	6879      	ldr	r1, [r7, #4]
 8004fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8004fe8:	431a      	orrs	r2, r3
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	621a      	str	r2, [r3, #32]
}
 8004fee:	bf00      	nop
 8004ff0:	371c      	adds	r7, #28
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr
	...

08004ffc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b085      	sub	sp, #20
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800500c:	2b01      	cmp	r3, #1
 800500e:	d101      	bne.n	8005014 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005010:	2302      	movs	r3, #2
 8005012:	e05a      	b.n	80050ca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2202      	movs	r2, #2
 8005020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800503a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	68fa      	ldr	r2, [r7, #12]
 8005042:	4313      	orrs	r3, r2
 8005044:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	68fa      	ldr	r2, [r7, #12]
 800504c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a21      	ldr	r2, [pc, #132]	; (80050d8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d022      	beq.n	800509e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005060:	d01d      	beq.n	800509e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a1d      	ldr	r2, [pc, #116]	; (80050dc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d018      	beq.n	800509e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a1b      	ldr	r2, [pc, #108]	; (80050e0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d013      	beq.n	800509e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a1a      	ldr	r2, [pc, #104]	; (80050e4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d00e      	beq.n	800509e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a18      	ldr	r2, [pc, #96]	; (80050e8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d009      	beq.n	800509e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a17      	ldr	r2, [pc, #92]	; (80050ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d004      	beq.n	800509e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a15      	ldr	r2, [pc, #84]	; (80050f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d10c      	bne.n	80050b8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	68ba      	ldr	r2, [r7, #8]
 80050ac:	4313      	orrs	r3, r2
 80050ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	68ba      	ldr	r2, [r7, #8]
 80050b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2200      	movs	r2, #0
 80050c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050c8:	2300      	movs	r3, #0
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3714      	adds	r7, #20
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr
 80050d6:	bf00      	nop
 80050d8:	40010000 	.word	0x40010000
 80050dc:	40000400 	.word	0x40000400
 80050e0:	40000800 	.word	0x40000800
 80050e4:	40000c00 	.word	0x40000c00
 80050e8:	40010400 	.word	0x40010400
 80050ec:	40014000 	.word	0x40014000
 80050f0:	40001800 	.word	0x40001800

080050f4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b085      	sub	sp, #20
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80050fe:	2300      	movs	r3, #0
 8005100:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005108:	2b01      	cmp	r3, #1
 800510a:	d101      	bne.n	8005110 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800510c:	2302      	movs	r3, #2
 800510e:	e03d      	b.n	800518c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	4313      	orrs	r3, r2
 8005124:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	4313      	orrs	r3, r2
 8005132:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	4313      	orrs	r3, r2
 8005140:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4313      	orrs	r3, r2
 800514e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	691b      	ldr	r3, [r3, #16]
 800515a:	4313      	orrs	r3, r2
 800515c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	695b      	ldr	r3, [r3, #20]
 8005168:	4313      	orrs	r3, r2
 800516a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	69db      	ldr	r3, [r3, #28]
 8005176:	4313      	orrs	r3, r2
 8005178:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	68fa      	ldr	r2, [r7, #12]
 8005180:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800518a:	2300      	movs	r3, #0
}
 800518c:	4618      	mov	r0, r3
 800518e:	3714      	adds	r7, #20
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr

08005198 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b082      	sub	sp, #8
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d101      	bne.n	80051aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e03f      	b.n	800522a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d106      	bne.n	80051c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f7fc ff58 	bl	8002074 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2224      	movs	r2, #36	; 0x24
 80051c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	68da      	ldr	r2, [r3, #12]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80051da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f000 f829 	bl	8005234 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	691a      	ldr	r2, [r3, #16]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80051f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	695a      	ldr	r2, [r3, #20]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005200:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	68da      	ldr	r2, [r3, #12]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005210:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2220      	movs	r2, #32
 800521c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2220      	movs	r2, #32
 8005224:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005228:	2300      	movs	r3, #0
}
 800522a:	4618      	mov	r0, r3
 800522c:	3708      	adds	r7, #8
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
	...

08005234 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005238:	b085      	sub	sp, #20
 800523a:	af00      	add	r7, sp, #0
 800523c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	691b      	ldr	r3, [r3, #16]
 8005244:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	68da      	ldr	r2, [r3, #12]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	430a      	orrs	r2, r1
 8005252:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	689a      	ldr	r2, [r3, #8]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	691b      	ldr	r3, [r3, #16]
 800525c:	431a      	orrs	r2, r3
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	695b      	ldr	r3, [r3, #20]
 8005262:	431a      	orrs	r2, r3
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	69db      	ldr	r3, [r3, #28]
 8005268:	4313      	orrs	r3, r2
 800526a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005276:	f023 030c 	bic.w	r3, r3, #12
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	6812      	ldr	r2, [r2, #0]
 800527e:	68f9      	ldr	r1, [r7, #12]
 8005280:	430b      	orrs	r3, r1
 8005282:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	695b      	ldr	r3, [r3, #20]
 800528a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	699a      	ldr	r2, [r3, #24]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	430a      	orrs	r2, r1
 8005298:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	69db      	ldr	r3, [r3, #28]
 800529e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052a2:	f040 818b 	bne.w	80055bc <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4ac1      	ldr	r2, [pc, #772]	; (80055b0 <UART_SetConfig+0x37c>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d005      	beq.n	80052bc <UART_SetConfig+0x88>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4abf      	ldr	r2, [pc, #764]	; (80055b4 <UART_SetConfig+0x380>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	f040 80bd 	bne.w	8005436 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80052bc:	f7fe fd64 	bl	8003d88 <HAL_RCC_GetPCLK2Freq>
 80052c0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	461d      	mov	r5, r3
 80052c6:	f04f 0600 	mov.w	r6, #0
 80052ca:	46a8      	mov	r8, r5
 80052cc:	46b1      	mov	r9, r6
 80052ce:	eb18 0308 	adds.w	r3, r8, r8
 80052d2:	eb49 0409 	adc.w	r4, r9, r9
 80052d6:	4698      	mov	r8, r3
 80052d8:	46a1      	mov	r9, r4
 80052da:	eb18 0805 	adds.w	r8, r8, r5
 80052de:	eb49 0906 	adc.w	r9, r9, r6
 80052e2:	f04f 0100 	mov.w	r1, #0
 80052e6:	f04f 0200 	mov.w	r2, #0
 80052ea:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80052ee:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80052f2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80052f6:	4688      	mov	r8, r1
 80052f8:	4691      	mov	r9, r2
 80052fa:	eb18 0005 	adds.w	r0, r8, r5
 80052fe:	eb49 0106 	adc.w	r1, r9, r6
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	461d      	mov	r5, r3
 8005308:	f04f 0600 	mov.w	r6, #0
 800530c:	196b      	adds	r3, r5, r5
 800530e:	eb46 0406 	adc.w	r4, r6, r6
 8005312:	461a      	mov	r2, r3
 8005314:	4623      	mov	r3, r4
 8005316:	f7fb fcd7 	bl	8000cc8 <__aeabi_uldivmod>
 800531a:	4603      	mov	r3, r0
 800531c:	460c      	mov	r4, r1
 800531e:	461a      	mov	r2, r3
 8005320:	4ba5      	ldr	r3, [pc, #660]	; (80055b8 <UART_SetConfig+0x384>)
 8005322:	fba3 2302 	umull	r2, r3, r3, r2
 8005326:	095b      	lsrs	r3, r3, #5
 8005328:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	461d      	mov	r5, r3
 8005330:	f04f 0600 	mov.w	r6, #0
 8005334:	46a9      	mov	r9, r5
 8005336:	46b2      	mov	sl, r6
 8005338:	eb19 0309 	adds.w	r3, r9, r9
 800533c:	eb4a 040a 	adc.w	r4, sl, sl
 8005340:	4699      	mov	r9, r3
 8005342:	46a2      	mov	sl, r4
 8005344:	eb19 0905 	adds.w	r9, r9, r5
 8005348:	eb4a 0a06 	adc.w	sl, sl, r6
 800534c:	f04f 0100 	mov.w	r1, #0
 8005350:	f04f 0200 	mov.w	r2, #0
 8005354:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005358:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800535c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005360:	4689      	mov	r9, r1
 8005362:	4692      	mov	sl, r2
 8005364:	eb19 0005 	adds.w	r0, r9, r5
 8005368:	eb4a 0106 	adc.w	r1, sl, r6
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	461d      	mov	r5, r3
 8005372:	f04f 0600 	mov.w	r6, #0
 8005376:	196b      	adds	r3, r5, r5
 8005378:	eb46 0406 	adc.w	r4, r6, r6
 800537c:	461a      	mov	r2, r3
 800537e:	4623      	mov	r3, r4
 8005380:	f7fb fca2 	bl	8000cc8 <__aeabi_uldivmod>
 8005384:	4603      	mov	r3, r0
 8005386:	460c      	mov	r4, r1
 8005388:	461a      	mov	r2, r3
 800538a:	4b8b      	ldr	r3, [pc, #556]	; (80055b8 <UART_SetConfig+0x384>)
 800538c:	fba3 1302 	umull	r1, r3, r3, r2
 8005390:	095b      	lsrs	r3, r3, #5
 8005392:	2164      	movs	r1, #100	; 0x64
 8005394:	fb01 f303 	mul.w	r3, r1, r3
 8005398:	1ad3      	subs	r3, r2, r3
 800539a:	00db      	lsls	r3, r3, #3
 800539c:	3332      	adds	r3, #50	; 0x32
 800539e:	4a86      	ldr	r2, [pc, #536]	; (80055b8 <UART_SetConfig+0x384>)
 80053a0:	fba2 2303 	umull	r2, r3, r2, r3
 80053a4:	095b      	lsrs	r3, r3, #5
 80053a6:	005b      	lsls	r3, r3, #1
 80053a8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80053ac:	4498      	add	r8, r3
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	461d      	mov	r5, r3
 80053b2:	f04f 0600 	mov.w	r6, #0
 80053b6:	46a9      	mov	r9, r5
 80053b8:	46b2      	mov	sl, r6
 80053ba:	eb19 0309 	adds.w	r3, r9, r9
 80053be:	eb4a 040a 	adc.w	r4, sl, sl
 80053c2:	4699      	mov	r9, r3
 80053c4:	46a2      	mov	sl, r4
 80053c6:	eb19 0905 	adds.w	r9, r9, r5
 80053ca:	eb4a 0a06 	adc.w	sl, sl, r6
 80053ce:	f04f 0100 	mov.w	r1, #0
 80053d2:	f04f 0200 	mov.w	r2, #0
 80053d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80053da:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80053de:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80053e2:	4689      	mov	r9, r1
 80053e4:	4692      	mov	sl, r2
 80053e6:	eb19 0005 	adds.w	r0, r9, r5
 80053ea:	eb4a 0106 	adc.w	r1, sl, r6
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	461d      	mov	r5, r3
 80053f4:	f04f 0600 	mov.w	r6, #0
 80053f8:	196b      	adds	r3, r5, r5
 80053fa:	eb46 0406 	adc.w	r4, r6, r6
 80053fe:	461a      	mov	r2, r3
 8005400:	4623      	mov	r3, r4
 8005402:	f7fb fc61 	bl	8000cc8 <__aeabi_uldivmod>
 8005406:	4603      	mov	r3, r0
 8005408:	460c      	mov	r4, r1
 800540a:	461a      	mov	r2, r3
 800540c:	4b6a      	ldr	r3, [pc, #424]	; (80055b8 <UART_SetConfig+0x384>)
 800540e:	fba3 1302 	umull	r1, r3, r3, r2
 8005412:	095b      	lsrs	r3, r3, #5
 8005414:	2164      	movs	r1, #100	; 0x64
 8005416:	fb01 f303 	mul.w	r3, r1, r3
 800541a:	1ad3      	subs	r3, r2, r3
 800541c:	00db      	lsls	r3, r3, #3
 800541e:	3332      	adds	r3, #50	; 0x32
 8005420:	4a65      	ldr	r2, [pc, #404]	; (80055b8 <UART_SetConfig+0x384>)
 8005422:	fba2 2303 	umull	r2, r3, r2, r3
 8005426:	095b      	lsrs	r3, r3, #5
 8005428:	f003 0207 	and.w	r2, r3, #7
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4442      	add	r2, r8
 8005432:	609a      	str	r2, [r3, #8]
 8005434:	e26f      	b.n	8005916 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005436:	f7fe fc93 	bl	8003d60 <HAL_RCC_GetPCLK1Freq>
 800543a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	461d      	mov	r5, r3
 8005440:	f04f 0600 	mov.w	r6, #0
 8005444:	46a8      	mov	r8, r5
 8005446:	46b1      	mov	r9, r6
 8005448:	eb18 0308 	adds.w	r3, r8, r8
 800544c:	eb49 0409 	adc.w	r4, r9, r9
 8005450:	4698      	mov	r8, r3
 8005452:	46a1      	mov	r9, r4
 8005454:	eb18 0805 	adds.w	r8, r8, r5
 8005458:	eb49 0906 	adc.w	r9, r9, r6
 800545c:	f04f 0100 	mov.w	r1, #0
 8005460:	f04f 0200 	mov.w	r2, #0
 8005464:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005468:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800546c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005470:	4688      	mov	r8, r1
 8005472:	4691      	mov	r9, r2
 8005474:	eb18 0005 	adds.w	r0, r8, r5
 8005478:	eb49 0106 	adc.w	r1, r9, r6
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	461d      	mov	r5, r3
 8005482:	f04f 0600 	mov.w	r6, #0
 8005486:	196b      	adds	r3, r5, r5
 8005488:	eb46 0406 	adc.w	r4, r6, r6
 800548c:	461a      	mov	r2, r3
 800548e:	4623      	mov	r3, r4
 8005490:	f7fb fc1a 	bl	8000cc8 <__aeabi_uldivmod>
 8005494:	4603      	mov	r3, r0
 8005496:	460c      	mov	r4, r1
 8005498:	461a      	mov	r2, r3
 800549a:	4b47      	ldr	r3, [pc, #284]	; (80055b8 <UART_SetConfig+0x384>)
 800549c:	fba3 2302 	umull	r2, r3, r3, r2
 80054a0:	095b      	lsrs	r3, r3, #5
 80054a2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	461d      	mov	r5, r3
 80054aa:	f04f 0600 	mov.w	r6, #0
 80054ae:	46a9      	mov	r9, r5
 80054b0:	46b2      	mov	sl, r6
 80054b2:	eb19 0309 	adds.w	r3, r9, r9
 80054b6:	eb4a 040a 	adc.w	r4, sl, sl
 80054ba:	4699      	mov	r9, r3
 80054bc:	46a2      	mov	sl, r4
 80054be:	eb19 0905 	adds.w	r9, r9, r5
 80054c2:	eb4a 0a06 	adc.w	sl, sl, r6
 80054c6:	f04f 0100 	mov.w	r1, #0
 80054ca:	f04f 0200 	mov.w	r2, #0
 80054ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80054d2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80054d6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80054da:	4689      	mov	r9, r1
 80054dc:	4692      	mov	sl, r2
 80054de:	eb19 0005 	adds.w	r0, r9, r5
 80054e2:	eb4a 0106 	adc.w	r1, sl, r6
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	461d      	mov	r5, r3
 80054ec:	f04f 0600 	mov.w	r6, #0
 80054f0:	196b      	adds	r3, r5, r5
 80054f2:	eb46 0406 	adc.w	r4, r6, r6
 80054f6:	461a      	mov	r2, r3
 80054f8:	4623      	mov	r3, r4
 80054fa:	f7fb fbe5 	bl	8000cc8 <__aeabi_uldivmod>
 80054fe:	4603      	mov	r3, r0
 8005500:	460c      	mov	r4, r1
 8005502:	461a      	mov	r2, r3
 8005504:	4b2c      	ldr	r3, [pc, #176]	; (80055b8 <UART_SetConfig+0x384>)
 8005506:	fba3 1302 	umull	r1, r3, r3, r2
 800550a:	095b      	lsrs	r3, r3, #5
 800550c:	2164      	movs	r1, #100	; 0x64
 800550e:	fb01 f303 	mul.w	r3, r1, r3
 8005512:	1ad3      	subs	r3, r2, r3
 8005514:	00db      	lsls	r3, r3, #3
 8005516:	3332      	adds	r3, #50	; 0x32
 8005518:	4a27      	ldr	r2, [pc, #156]	; (80055b8 <UART_SetConfig+0x384>)
 800551a:	fba2 2303 	umull	r2, r3, r2, r3
 800551e:	095b      	lsrs	r3, r3, #5
 8005520:	005b      	lsls	r3, r3, #1
 8005522:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005526:	4498      	add	r8, r3
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	461d      	mov	r5, r3
 800552c:	f04f 0600 	mov.w	r6, #0
 8005530:	46a9      	mov	r9, r5
 8005532:	46b2      	mov	sl, r6
 8005534:	eb19 0309 	adds.w	r3, r9, r9
 8005538:	eb4a 040a 	adc.w	r4, sl, sl
 800553c:	4699      	mov	r9, r3
 800553e:	46a2      	mov	sl, r4
 8005540:	eb19 0905 	adds.w	r9, r9, r5
 8005544:	eb4a 0a06 	adc.w	sl, sl, r6
 8005548:	f04f 0100 	mov.w	r1, #0
 800554c:	f04f 0200 	mov.w	r2, #0
 8005550:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005554:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005558:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800555c:	4689      	mov	r9, r1
 800555e:	4692      	mov	sl, r2
 8005560:	eb19 0005 	adds.w	r0, r9, r5
 8005564:	eb4a 0106 	adc.w	r1, sl, r6
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	461d      	mov	r5, r3
 800556e:	f04f 0600 	mov.w	r6, #0
 8005572:	196b      	adds	r3, r5, r5
 8005574:	eb46 0406 	adc.w	r4, r6, r6
 8005578:	461a      	mov	r2, r3
 800557a:	4623      	mov	r3, r4
 800557c:	f7fb fba4 	bl	8000cc8 <__aeabi_uldivmod>
 8005580:	4603      	mov	r3, r0
 8005582:	460c      	mov	r4, r1
 8005584:	461a      	mov	r2, r3
 8005586:	4b0c      	ldr	r3, [pc, #48]	; (80055b8 <UART_SetConfig+0x384>)
 8005588:	fba3 1302 	umull	r1, r3, r3, r2
 800558c:	095b      	lsrs	r3, r3, #5
 800558e:	2164      	movs	r1, #100	; 0x64
 8005590:	fb01 f303 	mul.w	r3, r1, r3
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	00db      	lsls	r3, r3, #3
 8005598:	3332      	adds	r3, #50	; 0x32
 800559a:	4a07      	ldr	r2, [pc, #28]	; (80055b8 <UART_SetConfig+0x384>)
 800559c:	fba2 2303 	umull	r2, r3, r2, r3
 80055a0:	095b      	lsrs	r3, r3, #5
 80055a2:	f003 0207 	and.w	r2, r3, #7
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4442      	add	r2, r8
 80055ac:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80055ae:	e1b2      	b.n	8005916 <UART_SetConfig+0x6e2>
 80055b0:	40011000 	.word	0x40011000
 80055b4:	40011400 	.word	0x40011400
 80055b8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4ad7      	ldr	r2, [pc, #860]	; (8005920 <UART_SetConfig+0x6ec>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d005      	beq.n	80055d2 <UART_SetConfig+0x39e>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4ad6      	ldr	r2, [pc, #856]	; (8005924 <UART_SetConfig+0x6f0>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	f040 80d1 	bne.w	8005774 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80055d2:	f7fe fbd9 	bl	8003d88 <HAL_RCC_GetPCLK2Freq>
 80055d6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	469a      	mov	sl, r3
 80055dc:	f04f 0b00 	mov.w	fp, #0
 80055e0:	46d0      	mov	r8, sl
 80055e2:	46d9      	mov	r9, fp
 80055e4:	eb18 0308 	adds.w	r3, r8, r8
 80055e8:	eb49 0409 	adc.w	r4, r9, r9
 80055ec:	4698      	mov	r8, r3
 80055ee:	46a1      	mov	r9, r4
 80055f0:	eb18 080a 	adds.w	r8, r8, sl
 80055f4:	eb49 090b 	adc.w	r9, r9, fp
 80055f8:	f04f 0100 	mov.w	r1, #0
 80055fc:	f04f 0200 	mov.w	r2, #0
 8005600:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005604:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005608:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800560c:	4688      	mov	r8, r1
 800560e:	4691      	mov	r9, r2
 8005610:	eb1a 0508 	adds.w	r5, sl, r8
 8005614:	eb4b 0609 	adc.w	r6, fp, r9
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	4619      	mov	r1, r3
 800561e:	f04f 0200 	mov.w	r2, #0
 8005622:	f04f 0300 	mov.w	r3, #0
 8005626:	f04f 0400 	mov.w	r4, #0
 800562a:	0094      	lsls	r4, r2, #2
 800562c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005630:	008b      	lsls	r3, r1, #2
 8005632:	461a      	mov	r2, r3
 8005634:	4623      	mov	r3, r4
 8005636:	4628      	mov	r0, r5
 8005638:	4631      	mov	r1, r6
 800563a:	f7fb fb45 	bl	8000cc8 <__aeabi_uldivmod>
 800563e:	4603      	mov	r3, r0
 8005640:	460c      	mov	r4, r1
 8005642:	461a      	mov	r2, r3
 8005644:	4bb8      	ldr	r3, [pc, #736]	; (8005928 <UART_SetConfig+0x6f4>)
 8005646:	fba3 2302 	umull	r2, r3, r3, r2
 800564a:	095b      	lsrs	r3, r3, #5
 800564c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	469b      	mov	fp, r3
 8005654:	f04f 0c00 	mov.w	ip, #0
 8005658:	46d9      	mov	r9, fp
 800565a:	46e2      	mov	sl, ip
 800565c:	eb19 0309 	adds.w	r3, r9, r9
 8005660:	eb4a 040a 	adc.w	r4, sl, sl
 8005664:	4699      	mov	r9, r3
 8005666:	46a2      	mov	sl, r4
 8005668:	eb19 090b 	adds.w	r9, r9, fp
 800566c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005670:	f04f 0100 	mov.w	r1, #0
 8005674:	f04f 0200 	mov.w	r2, #0
 8005678:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800567c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005680:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005684:	4689      	mov	r9, r1
 8005686:	4692      	mov	sl, r2
 8005688:	eb1b 0509 	adds.w	r5, fp, r9
 800568c:	eb4c 060a 	adc.w	r6, ip, sl
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	4619      	mov	r1, r3
 8005696:	f04f 0200 	mov.w	r2, #0
 800569a:	f04f 0300 	mov.w	r3, #0
 800569e:	f04f 0400 	mov.w	r4, #0
 80056a2:	0094      	lsls	r4, r2, #2
 80056a4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80056a8:	008b      	lsls	r3, r1, #2
 80056aa:	461a      	mov	r2, r3
 80056ac:	4623      	mov	r3, r4
 80056ae:	4628      	mov	r0, r5
 80056b0:	4631      	mov	r1, r6
 80056b2:	f7fb fb09 	bl	8000cc8 <__aeabi_uldivmod>
 80056b6:	4603      	mov	r3, r0
 80056b8:	460c      	mov	r4, r1
 80056ba:	461a      	mov	r2, r3
 80056bc:	4b9a      	ldr	r3, [pc, #616]	; (8005928 <UART_SetConfig+0x6f4>)
 80056be:	fba3 1302 	umull	r1, r3, r3, r2
 80056c2:	095b      	lsrs	r3, r3, #5
 80056c4:	2164      	movs	r1, #100	; 0x64
 80056c6:	fb01 f303 	mul.w	r3, r1, r3
 80056ca:	1ad3      	subs	r3, r2, r3
 80056cc:	011b      	lsls	r3, r3, #4
 80056ce:	3332      	adds	r3, #50	; 0x32
 80056d0:	4a95      	ldr	r2, [pc, #596]	; (8005928 <UART_SetConfig+0x6f4>)
 80056d2:	fba2 2303 	umull	r2, r3, r2, r3
 80056d6:	095b      	lsrs	r3, r3, #5
 80056d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056dc:	4498      	add	r8, r3
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	469b      	mov	fp, r3
 80056e2:	f04f 0c00 	mov.w	ip, #0
 80056e6:	46d9      	mov	r9, fp
 80056e8:	46e2      	mov	sl, ip
 80056ea:	eb19 0309 	adds.w	r3, r9, r9
 80056ee:	eb4a 040a 	adc.w	r4, sl, sl
 80056f2:	4699      	mov	r9, r3
 80056f4:	46a2      	mov	sl, r4
 80056f6:	eb19 090b 	adds.w	r9, r9, fp
 80056fa:	eb4a 0a0c 	adc.w	sl, sl, ip
 80056fe:	f04f 0100 	mov.w	r1, #0
 8005702:	f04f 0200 	mov.w	r2, #0
 8005706:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800570a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800570e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005712:	4689      	mov	r9, r1
 8005714:	4692      	mov	sl, r2
 8005716:	eb1b 0509 	adds.w	r5, fp, r9
 800571a:	eb4c 060a 	adc.w	r6, ip, sl
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	4619      	mov	r1, r3
 8005724:	f04f 0200 	mov.w	r2, #0
 8005728:	f04f 0300 	mov.w	r3, #0
 800572c:	f04f 0400 	mov.w	r4, #0
 8005730:	0094      	lsls	r4, r2, #2
 8005732:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005736:	008b      	lsls	r3, r1, #2
 8005738:	461a      	mov	r2, r3
 800573a:	4623      	mov	r3, r4
 800573c:	4628      	mov	r0, r5
 800573e:	4631      	mov	r1, r6
 8005740:	f7fb fac2 	bl	8000cc8 <__aeabi_uldivmod>
 8005744:	4603      	mov	r3, r0
 8005746:	460c      	mov	r4, r1
 8005748:	461a      	mov	r2, r3
 800574a:	4b77      	ldr	r3, [pc, #476]	; (8005928 <UART_SetConfig+0x6f4>)
 800574c:	fba3 1302 	umull	r1, r3, r3, r2
 8005750:	095b      	lsrs	r3, r3, #5
 8005752:	2164      	movs	r1, #100	; 0x64
 8005754:	fb01 f303 	mul.w	r3, r1, r3
 8005758:	1ad3      	subs	r3, r2, r3
 800575a:	011b      	lsls	r3, r3, #4
 800575c:	3332      	adds	r3, #50	; 0x32
 800575e:	4a72      	ldr	r2, [pc, #456]	; (8005928 <UART_SetConfig+0x6f4>)
 8005760:	fba2 2303 	umull	r2, r3, r2, r3
 8005764:	095b      	lsrs	r3, r3, #5
 8005766:	f003 020f 	and.w	r2, r3, #15
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4442      	add	r2, r8
 8005770:	609a      	str	r2, [r3, #8]
 8005772:	e0d0      	b.n	8005916 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005774:	f7fe faf4 	bl	8003d60 <HAL_RCC_GetPCLK1Freq>
 8005778:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	469a      	mov	sl, r3
 800577e:	f04f 0b00 	mov.w	fp, #0
 8005782:	46d0      	mov	r8, sl
 8005784:	46d9      	mov	r9, fp
 8005786:	eb18 0308 	adds.w	r3, r8, r8
 800578a:	eb49 0409 	adc.w	r4, r9, r9
 800578e:	4698      	mov	r8, r3
 8005790:	46a1      	mov	r9, r4
 8005792:	eb18 080a 	adds.w	r8, r8, sl
 8005796:	eb49 090b 	adc.w	r9, r9, fp
 800579a:	f04f 0100 	mov.w	r1, #0
 800579e:	f04f 0200 	mov.w	r2, #0
 80057a2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80057a6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80057aa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80057ae:	4688      	mov	r8, r1
 80057b0:	4691      	mov	r9, r2
 80057b2:	eb1a 0508 	adds.w	r5, sl, r8
 80057b6:	eb4b 0609 	adc.w	r6, fp, r9
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	4619      	mov	r1, r3
 80057c0:	f04f 0200 	mov.w	r2, #0
 80057c4:	f04f 0300 	mov.w	r3, #0
 80057c8:	f04f 0400 	mov.w	r4, #0
 80057cc:	0094      	lsls	r4, r2, #2
 80057ce:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80057d2:	008b      	lsls	r3, r1, #2
 80057d4:	461a      	mov	r2, r3
 80057d6:	4623      	mov	r3, r4
 80057d8:	4628      	mov	r0, r5
 80057da:	4631      	mov	r1, r6
 80057dc:	f7fb fa74 	bl	8000cc8 <__aeabi_uldivmod>
 80057e0:	4603      	mov	r3, r0
 80057e2:	460c      	mov	r4, r1
 80057e4:	461a      	mov	r2, r3
 80057e6:	4b50      	ldr	r3, [pc, #320]	; (8005928 <UART_SetConfig+0x6f4>)
 80057e8:	fba3 2302 	umull	r2, r3, r3, r2
 80057ec:	095b      	lsrs	r3, r3, #5
 80057ee:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	469b      	mov	fp, r3
 80057f6:	f04f 0c00 	mov.w	ip, #0
 80057fa:	46d9      	mov	r9, fp
 80057fc:	46e2      	mov	sl, ip
 80057fe:	eb19 0309 	adds.w	r3, r9, r9
 8005802:	eb4a 040a 	adc.w	r4, sl, sl
 8005806:	4699      	mov	r9, r3
 8005808:	46a2      	mov	sl, r4
 800580a:	eb19 090b 	adds.w	r9, r9, fp
 800580e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005812:	f04f 0100 	mov.w	r1, #0
 8005816:	f04f 0200 	mov.w	r2, #0
 800581a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800581e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005822:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005826:	4689      	mov	r9, r1
 8005828:	4692      	mov	sl, r2
 800582a:	eb1b 0509 	adds.w	r5, fp, r9
 800582e:	eb4c 060a 	adc.w	r6, ip, sl
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	4619      	mov	r1, r3
 8005838:	f04f 0200 	mov.w	r2, #0
 800583c:	f04f 0300 	mov.w	r3, #0
 8005840:	f04f 0400 	mov.w	r4, #0
 8005844:	0094      	lsls	r4, r2, #2
 8005846:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800584a:	008b      	lsls	r3, r1, #2
 800584c:	461a      	mov	r2, r3
 800584e:	4623      	mov	r3, r4
 8005850:	4628      	mov	r0, r5
 8005852:	4631      	mov	r1, r6
 8005854:	f7fb fa38 	bl	8000cc8 <__aeabi_uldivmod>
 8005858:	4603      	mov	r3, r0
 800585a:	460c      	mov	r4, r1
 800585c:	461a      	mov	r2, r3
 800585e:	4b32      	ldr	r3, [pc, #200]	; (8005928 <UART_SetConfig+0x6f4>)
 8005860:	fba3 1302 	umull	r1, r3, r3, r2
 8005864:	095b      	lsrs	r3, r3, #5
 8005866:	2164      	movs	r1, #100	; 0x64
 8005868:	fb01 f303 	mul.w	r3, r1, r3
 800586c:	1ad3      	subs	r3, r2, r3
 800586e:	011b      	lsls	r3, r3, #4
 8005870:	3332      	adds	r3, #50	; 0x32
 8005872:	4a2d      	ldr	r2, [pc, #180]	; (8005928 <UART_SetConfig+0x6f4>)
 8005874:	fba2 2303 	umull	r2, r3, r2, r3
 8005878:	095b      	lsrs	r3, r3, #5
 800587a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800587e:	4498      	add	r8, r3
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	469b      	mov	fp, r3
 8005884:	f04f 0c00 	mov.w	ip, #0
 8005888:	46d9      	mov	r9, fp
 800588a:	46e2      	mov	sl, ip
 800588c:	eb19 0309 	adds.w	r3, r9, r9
 8005890:	eb4a 040a 	adc.w	r4, sl, sl
 8005894:	4699      	mov	r9, r3
 8005896:	46a2      	mov	sl, r4
 8005898:	eb19 090b 	adds.w	r9, r9, fp
 800589c:	eb4a 0a0c 	adc.w	sl, sl, ip
 80058a0:	f04f 0100 	mov.w	r1, #0
 80058a4:	f04f 0200 	mov.w	r2, #0
 80058a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80058ac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80058b0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80058b4:	4689      	mov	r9, r1
 80058b6:	4692      	mov	sl, r2
 80058b8:	eb1b 0509 	adds.w	r5, fp, r9
 80058bc:	eb4c 060a 	adc.w	r6, ip, sl
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	4619      	mov	r1, r3
 80058c6:	f04f 0200 	mov.w	r2, #0
 80058ca:	f04f 0300 	mov.w	r3, #0
 80058ce:	f04f 0400 	mov.w	r4, #0
 80058d2:	0094      	lsls	r4, r2, #2
 80058d4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80058d8:	008b      	lsls	r3, r1, #2
 80058da:	461a      	mov	r2, r3
 80058dc:	4623      	mov	r3, r4
 80058de:	4628      	mov	r0, r5
 80058e0:	4631      	mov	r1, r6
 80058e2:	f7fb f9f1 	bl	8000cc8 <__aeabi_uldivmod>
 80058e6:	4603      	mov	r3, r0
 80058e8:	460c      	mov	r4, r1
 80058ea:	461a      	mov	r2, r3
 80058ec:	4b0e      	ldr	r3, [pc, #56]	; (8005928 <UART_SetConfig+0x6f4>)
 80058ee:	fba3 1302 	umull	r1, r3, r3, r2
 80058f2:	095b      	lsrs	r3, r3, #5
 80058f4:	2164      	movs	r1, #100	; 0x64
 80058f6:	fb01 f303 	mul.w	r3, r1, r3
 80058fa:	1ad3      	subs	r3, r2, r3
 80058fc:	011b      	lsls	r3, r3, #4
 80058fe:	3332      	adds	r3, #50	; 0x32
 8005900:	4a09      	ldr	r2, [pc, #36]	; (8005928 <UART_SetConfig+0x6f4>)
 8005902:	fba2 2303 	umull	r2, r3, r2, r3
 8005906:	095b      	lsrs	r3, r3, #5
 8005908:	f003 020f 	and.w	r2, r3, #15
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4442      	add	r2, r8
 8005912:	609a      	str	r2, [r3, #8]
}
 8005914:	e7ff      	b.n	8005916 <UART_SetConfig+0x6e2>
 8005916:	bf00      	nop
 8005918:	3714      	adds	r7, #20
 800591a:	46bd      	mov	sp, r7
 800591c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005920:	40011000 	.word	0x40011000
 8005924:	40011400 	.word	0x40011400
 8005928:	51eb851f 	.word	0x51eb851f

0800592c <__errno>:
 800592c:	4b01      	ldr	r3, [pc, #4]	; (8005934 <__errno+0x8>)
 800592e:	6818      	ldr	r0, [r3, #0]
 8005930:	4770      	bx	lr
 8005932:	bf00      	nop
 8005934:	2000000c 	.word	0x2000000c

08005938 <__libc_init_array>:
 8005938:	b570      	push	{r4, r5, r6, lr}
 800593a:	4e0d      	ldr	r6, [pc, #52]	; (8005970 <__libc_init_array+0x38>)
 800593c:	4c0d      	ldr	r4, [pc, #52]	; (8005974 <__libc_init_array+0x3c>)
 800593e:	1ba4      	subs	r4, r4, r6
 8005940:	10a4      	asrs	r4, r4, #2
 8005942:	2500      	movs	r5, #0
 8005944:	42a5      	cmp	r5, r4
 8005946:	d109      	bne.n	800595c <__libc_init_array+0x24>
 8005948:	4e0b      	ldr	r6, [pc, #44]	; (8005978 <__libc_init_array+0x40>)
 800594a:	4c0c      	ldr	r4, [pc, #48]	; (800597c <__libc_init_array+0x44>)
 800594c:	f003 fd56 	bl	80093fc <_init>
 8005950:	1ba4      	subs	r4, r4, r6
 8005952:	10a4      	asrs	r4, r4, #2
 8005954:	2500      	movs	r5, #0
 8005956:	42a5      	cmp	r5, r4
 8005958:	d105      	bne.n	8005966 <__libc_init_array+0x2e>
 800595a:	bd70      	pop	{r4, r5, r6, pc}
 800595c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005960:	4798      	blx	r3
 8005962:	3501      	adds	r5, #1
 8005964:	e7ee      	b.n	8005944 <__libc_init_array+0xc>
 8005966:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800596a:	4798      	blx	r3
 800596c:	3501      	adds	r5, #1
 800596e:	e7f2      	b.n	8005956 <__libc_init_array+0x1e>
 8005970:	08009710 	.word	0x08009710
 8005974:	08009710 	.word	0x08009710
 8005978:	08009710 	.word	0x08009710
 800597c:	08009714 	.word	0x08009714

08005980 <memset>:
 8005980:	4402      	add	r2, r0
 8005982:	4603      	mov	r3, r0
 8005984:	4293      	cmp	r3, r2
 8005986:	d100      	bne.n	800598a <memset+0xa>
 8005988:	4770      	bx	lr
 800598a:	f803 1b01 	strb.w	r1, [r3], #1
 800598e:	e7f9      	b.n	8005984 <memset+0x4>

08005990 <__cvt>:
 8005990:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005994:	ec55 4b10 	vmov	r4, r5, d0
 8005998:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800599a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800599e:	2d00      	cmp	r5, #0
 80059a0:	460e      	mov	r6, r1
 80059a2:	4691      	mov	r9, r2
 80059a4:	4619      	mov	r1, r3
 80059a6:	bfb8      	it	lt
 80059a8:	4622      	movlt	r2, r4
 80059aa:	462b      	mov	r3, r5
 80059ac:	f027 0720 	bic.w	r7, r7, #32
 80059b0:	bfbb      	ittet	lt
 80059b2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80059b6:	461d      	movlt	r5, r3
 80059b8:	2300      	movge	r3, #0
 80059ba:	232d      	movlt	r3, #45	; 0x2d
 80059bc:	bfb8      	it	lt
 80059be:	4614      	movlt	r4, r2
 80059c0:	2f46      	cmp	r7, #70	; 0x46
 80059c2:	700b      	strb	r3, [r1, #0]
 80059c4:	d004      	beq.n	80059d0 <__cvt+0x40>
 80059c6:	2f45      	cmp	r7, #69	; 0x45
 80059c8:	d100      	bne.n	80059cc <__cvt+0x3c>
 80059ca:	3601      	adds	r6, #1
 80059cc:	2102      	movs	r1, #2
 80059ce:	e000      	b.n	80059d2 <__cvt+0x42>
 80059d0:	2103      	movs	r1, #3
 80059d2:	ab03      	add	r3, sp, #12
 80059d4:	9301      	str	r3, [sp, #4]
 80059d6:	ab02      	add	r3, sp, #8
 80059d8:	9300      	str	r3, [sp, #0]
 80059da:	4632      	mov	r2, r6
 80059dc:	4653      	mov	r3, sl
 80059de:	ec45 4b10 	vmov	d0, r4, r5
 80059e2:	f001 fd75 	bl	80074d0 <_dtoa_r>
 80059e6:	2f47      	cmp	r7, #71	; 0x47
 80059e8:	4680      	mov	r8, r0
 80059ea:	d102      	bne.n	80059f2 <__cvt+0x62>
 80059ec:	f019 0f01 	tst.w	r9, #1
 80059f0:	d026      	beq.n	8005a40 <__cvt+0xb0>
 80059f2:	2f46      	cmp	r7, #70	; 0x46
 80059f4:	eb08 0906 	add.w	r9, r8, r6
 80059f8:	d111      	bne.n	8005a1e <__cvt+0x8e>
 80059fa:	f898 3000 	ldrb.w	r3, [r8]
 80059fe:	2b30      	cmp	r3, #48	; 0x30
 8005a00:	d10a      	bne.n	8005a18 <__cvt+0x88>
 8005a02:	2200      	movs	r2, #0
 8005a04:	2300      	movs	r3, #0
 8005a06:	4620      	mov	r0, r4
 8005a08:	4629      	mov	r1, r5
 8005a0a:	f7fb f87d 	bl	8000b08 <__aeabi_dcmpeq>
 8005a0e:	b918      	cbnz	r0, 8005a18 <__cvt+0x88>
 8005a10:	f1c6 0601 	rsb	r6, r6, #1
 8005a14:	f8ca 6000 	str.w	r6, [sl]
 8005a18:	f8da 3000 	ldr.w	r3, [sl]
 8005a1c:	4499      	add	r9, r3
 8005a1e:	2200      	movs	r2, #0
 8005a20:	2300      	movs	r3, #0
 8005a22:	4620      	mov	r0, r4
 8005a24:	4629      	mov	r1, r5
 8005a26:	f7fb f86f 	bl	8000b08 <__aeabi_dcmpeq>
 8005a2a:	b938      	cbnz	r0, 8005a3c <__cvt+0xac>
 8005a2c:	2230      	movs	r2, #48	; 0x30
 8005a2e:	9b03      	ldr	r3, [sp, #12]
 8005a30:	454b      	cmp	r3, r9
 8005a32:	d205      	bcs.n	8005a40 <__cvt+0xb0>
 8005a34:	1c59      	adds	r1, r3, #1
 8005a36:	9103      	str	r1, [sp, #12]
 8005a38:	701a      	strb	r2, [r3, #0]
 8005a3a:	e7f8      	b.n	8005a2e <__cvt+0x9e>
 8005a3c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005a40:	9b03      	ldr	r3, [sp, #12]
 8005a42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005a44:	eba3 0308 	sub.w	r3, r3, r8
 8005a48:	4640      	mov	r0, r8
 8005a4a:	6013      	str	r3, [r2, #0]
 8005a4c:	b004      	add	sp, #16
 8005a4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005a52 <__exponent>:
 8005a52:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a54:	2900      	cmp	r1, #0
 8005a56:	4604      	mov	r4, r0
 8005a58:	bfba      	itte	lt
 8005a5a:	4249      	neglt	r1, r1
 8005a5c:	232d      	movlt	r3, #45	; 0x2d
 8005a5e:	232b      	movge	r3, #43	; 0x2b
 8005a60:	2909      	cmp	r1, #9
 8005a62:	f804 2b02 	strb.w	r2, [r4], #2
 8005a66:	7043      	strb	r3, [r0, #1]
 8005a68:	dd20      	ble.n	8005aac <__exponent+0x5a>
 8005a6a:	f10d 0307 	add.w	r3, sp, #7
 8005a6e:	461f      	mov	r7, r3
 8005a70:	260a      	movs	r6, #10
 8005a72:	fb91 f5f6 	sdiv	r5, r1, r6
 8005a76:	fb06 1115 	mls	r1, r6, r5, r1
 8005a7a:	3130      	adds	r1, #48	; 0x30
 8005a7c:	2d09      	cmp	r5, #9
 8005a7e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005a82:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8005a86:	4629      	mov	r1, r5
 8005a88:	dc09      	bgt.n	8005a9e <__exponent+0x4c>
 8005a8a:	3130      	adds	r1, #48	; 0x30
 8005a8c:	3b02      	subs	r3, #2
 8005a8e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005a92:	42bb      	cmp	r3, r7
 8005a94:	4622      	mov	r2, r4
 8005a96:	d304      	bcc.n	8005aa2 <__exponent+0x50>
 8005a98:	1a10      	subs	r0, r2, r0
 8005a9a:	b003      	add	sp, #12
 8005a9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a9e:	4613      	mov	r3, r2
 8005aa0:	e7e7      	b.n	8005a72 <__exponent+0x20>
 8005aa2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005aa6:	f804 2b01 	strb.w	r2, [r4], #1
 8005aaa:	e7f2      	b.n	8005a92 <__exponent+0x40>
 8005aac:	2330      	movs	r3, #48	; 0x30
 8005aae:	4419      	add	r1, r3
 8005ab0:	7083      	strb	r3, [r0, #2]
 8005ab2:	1d02      	adds	r2, r0, #4
 8005ab4:	70c1      	strb	r1, [r0, #3]
 8005ab6:	e7ef      	b.n	8005a98 <__exponent+0x46>

08005ab8 <_printf_float>:
 8005ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005abc:	b08d      	sub	sp, #52	; 0x34
 8005abe:	460c      	mov	r4, r1
 8005ac0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8005ac4:	4616      	mov	r6, r2
 8005ac6:	461f      	mov	r7, r3
 8005ac8:	4605      	mov	r5, r0
 8005aca:	f002 fde5 	bl	8008698 <_localeconv_r>
 8005ace:	6803      	ldr	r3, [r0, #0]
 8005ad0:	9304      	str	r3, [sp, #16]
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f7fa fb9c 	bl	8000210 <strlen>
 8005ad8:	2300      	movs	r3, #0
 8005ada:	930a      	str	r3, [sp, #40]	; 0x28
 8005adc:	f8d8 3000 	ldr.w	r3, [r8]
 8005ae0:	9005      	str	r0, [sp, #20]
 8005ae2:	3307      	adds	r3, #7
 8005ae4:	f023 0307 	bic.w	r3, r3, #7
 8005ae8:	f103 0208 	add.w	r2, r3, #8
 8005aec:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005af0:	f8d4 b000 	ldr.w	fp, [r4]
 8005af4:	f8c8 2000 	str.w	r2, [r8]
 8005af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005afc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005b00:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005b04:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005b08:	9307      	str	r3, [sp, #28]
 8005b0a:	f8cd 8018 	str.w	r8, [sp, #24]
 8005b0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005b12:	4ba7      	ldr	r3, [pc, #668]	; (8005db0 <_printf_float+0x2f8>)
 8005b14:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b18:	f7fb f828 	bl	8000b6c <__aeabi_dcmpun>
 8005b1c:	bb70      	cbnz	r0, 8005b7c <_printf_float+0xc4>
 8005b1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005b22:	4ba3      	ldr	r3, [pc, #652]	; (8005db0 <_printf_float+0x2f8>)
 8005b24:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b28:	f7fb f802 	bl	8000b30 <__aeabi_dcmple>
 8005b2c:	bb30      	cbnz	r0, 8005b7c <_printf_float+0xc4>
 8005b2e:	2200      	movs	r2, #0
 8005b30:	2300      	movs	r3, #0
 8005b32:	4640      	mov	r0, r8
 8005b34:	4649      	mov	r1, r9
 8005b36:	f7fa fff1 	bl	8000b1c <__aeabi_dcmplt>
 8005b3a:	b110      	cbz	r0, 8005b42 <_printf_float+0x8a>
 8005b3c:	232d      	movs	r3, #45	; 0x2d
 8005b3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b42:	4a9c      	ldr	r2, [pc, #624]	; (8005db4 <_printf_float+0x2fc>)
 8005b44:	4b9c      	ldr	r3, [pc, #624]	; (8005db8 <_printf_float+0x300>)
 8005b46:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8005b4a:	bf8c      	ite	hi
 8005b4c:	4690      	movhi	r8, r2
 8005b4e:	4698      	movls	r8, r3
 8005b50:	2303      	movs	r3, #3
 8005b52:	f02b 0204 	bic.w	r2, fp, #4
 8005b56:	6123      	str	r3, [r4, #16]
 8005b58:	6022      	str	r2, [r4, #0]
 8005b5a:	f04f 0900 	mov.w	r9, #0
 8005b5e:	9700      	str	r7, [sp, #0]
 8005b60:	4633      	mov	r3, r6
 8005b62:	aa0b      	add	r2, sp, #44	; 0x2c
 8005b64:	4621      	mov	r1, r4
 8005b66:	4628      	mov	r0, r5
 8005b68:	f000 f9e6 	bl	8005f38 <_printf_common>
 8005b6c:	3001      	adds	r0, #1
 8005b6e:	f040 808d 	bne.w	8005c8c <_printf_float+0x1d4>
 8005b72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b76:	b00d      	add	sp, #52	; 0x34
 8005b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b7c:	4642      	mov	r2, r8
 8005b7e:	464b      	mov	r3, r9
 8005b80:	4640      	mov	r0, r8
 8005b82:	4649      	mov	r1, r9
 8005b84:	f7fa fff2 	bl	8000b6c <__aeabi_dcmpun>
 8005b88:	b110      	cbz	r0, 8005b90 <_printf_float+0xd8>
 8005b8a:	4a8c      	ldr	r2, [pc, #560]	; (8005dbc <_printf_float+0x304>)
 8005b8c:	4b8c      	ldr	r3, [pc, #560]	; (8005dc0 <_printf_float+0x308>)
 8005b8e:	e7da      	b.n	8005b46 <_printf_float+0x8e>
 8005b90:	6861      	ldr	r1, [r4, #4]
 8005b92:	1c4b      	adds	r3, r1, #1
 8005b94:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8005b98:	a80a      	add	r0, sp, #40	; 0x28
 8005b9a:	d13e      	bne.n	8005c1a <_printf_float+0x162>
 8005b9c:	2306      	movs	r3, #6
 8005b9e:	6063      	str	r3, [r4, #4]
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8005ba6:	ab09      	add	r3, sp, #36	; 0x24
 8005ba8:	9300      	str	r3, [sp, #0]
 8005baa:	ec49 8b10 	vmov	d0, r8, r9
 8005bae:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005bb2:	6022      	str	r2, [r4, #0]
 8005bb4:	f8cd a004 	str.w	sl, [sp, #4]
 8005bb8:	6861      	ldr	r1, [r4, #4]
 8005bba:	4628      	mov	r0, r5
 8005bbc:	f7ff fee8 	bl	8005990 <__cvt>
 8005bc0:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8005bc4:	2b47      	cmp	r3, #71	; 0x47
 8005bc6:	4680      	mov	r8, r0
 8005bc8:	d109      	bne.n	8005bde <_printf_float+0x126>
 8005bca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bcc:	1cd8      	adds	r0, r3, #3
 8005bce:	db02      	blt.n	8005bd6 <_printf_float+0x11e>
 8005bd0:	6862      	ldr	r2, [r4, #4]
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	dd47      	ble.n	8005c66 <_printf_float+0x1ae>
 8005bd6:	f1aa 0a02 	sub.w	sl, sl, #2
 8005bda:	fa5f fa8a 	uxtb.w	sl, sl
 8005bde:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8005be2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005be4:	d824      	bhi.n	8005c30 <_printf_float+0x178>
 8005be6:	3901      	subs	r1, #1
 8005be8:	4652      	mov	r2, sl
 8005bea:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005bee:	9109      	str	r1, [sp, #36]	; 0x24
 8005bf0:	f7ff ff2f 	bl	8005a52 <__exponent>
 8005bf4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005bf6:	1813      	adds	r3, r2, r0
 8005bf8:	2a01      	cmp	r2, #1
 8005bfa:	4681      	mov	r9, r0
 8005bfc:	6123      	str	r3, [r4, #16]
 8005bfe:	dc02      	bgt.n	8005c06 <_printf_float+0x14e>
 8005c00:	6822      	ldr	r2, [r4, #0]
 8005c02:	07d1      	lsls	r1, r2, #31
 8005c04:	d501      	bpl.n	8005c0a <_printf_float+0x152>
 8005c06:	3301      	adds	r3, #1
 8005c08:	6123      	str	r3, [r4, #16]
 8005c0a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d0a5      	beq.n	8005b5e <_printf_float+0xa6>
 8005c12:	232d      	movs	r3, #45	; 0x2d
 8005c14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c18:	e7a1      	b.n	8005b5e <_printf_float+0xa6>
 8005c1a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8005c1e:	f000 8177 	beq.w	8005f10 <_printf_float+0x458>
 8005c22:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8005c26:	d1bb      	bne.n	8005ba0 <_printf_float+0xe8>
 8005c28:	2900      	cmp	r1, #0
 8005c2a:	d1b9      	bne.n	8005ba0 <_printf_float+0xe8>
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	e7b6      	b.n	8005b9e <_printf_float+0xe6>
 8005c30:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8005c34:	d119      	bne.n	8005c6a <_printf_float+0x1b2>
 8005c36:	2900      	cmp	r1, #0
 8005c38:	6863      	ldr	r3, [r4, #4]
 8005c3a:	dd0c      	ble.n	8005c56 <_printf_float+0x19e>
 8005c3c:	6121      	str	r1, [r4, #16]
 8005c3e:	b913      	cbnz	r3, 8005c46 <_printf_float+0x18e>
 8005c40:	6822      	ldr	r2, [r4, #0]
 8005c42:	07d2      	lsls	r2, r2, #31
 8005c44:	d502      	bpl.n	8005c4c <_printf_float+0x194>
 8005c46:	3301      	adds	r3, #1
 8005c48:	440b      	add	r3, r1
 8005c4a:	6123      	str	r3, [r4, #16]
 8005c4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c4e:	65a3      	str	r3, [r4, #88]	; 0x58
 8005c50:	f04f 0900 	mov.w	r9, #0
 8005c54:	e7d9      	b.n	8005c0a <_printf_float+0x152>
 8005c56:	b913      	cbnz	r3, 8005c5e <_printf_float+0x1a6>
 8005c58:	6822      	ldr	r2, [r4, #0]
 8005c5a:	07d0      	lsls	r0, r2, #31
 8005c5c:	d501      	bpl.n	8005c62 <_printf_float+0x1aa>
 8005c5e:	3302      	adds	r3, #2
 8005c60:	e7f3      	b.n	8005c4a <_printf_float+0x192>
 8005c62:	2301      	movs	r3, #1
 8005c64:	e7f1      	b.n	8005c4a <_printf_float+0x192>
 8005c66:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8005c6a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	db05      	blt.n	8005c7e <_printf_float+0x1c6>
 8005c72:	6822      	ldr	r2, [r4, #0]
 8005c74:	6123      	str	r3, [r4, #16]
 8005c76:	07d1      	lsls	r1, r2, #31
 8005c78:	d5e8      	bpl.n	8005c4c <_printf_float+0x194>
 8005c7a:	3301      	adds	r3, #1
 8005c7c:	e7e5      	b.n	8005c4a <_printf_float+0x192>
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	bfd4      	ite	le
 8005c82:	f1c3 0302 	rsble	r3, r3, #2
 8005c86:	2301      	movgt	r3, #1
 8005c88:	4413      	add	r3, r2
 8005c8a:	e7de      	b.n	8005c4a <_printf_float+0x192>
 8005c8c:	6823      	ldr	r3, [r4, #0]
 8005c8e:	055a      	lsls	r2, r3, #21
 8005c90:	d407      	bmi.n	8005ca2 <_printf_float+0x1ea>
 8005c92:	6923      	ldr	r3, [r4, #16]
 8005c94:	4642      	mov	r2, r8
 8005c96:	4631      	mov	r1, r6
 8005c98:	4628      	mov	r0, r5
 8005c9a:	47b8      	blx	r7
 8005c9c:	3001      	adds	r0, #1
 8005c9e:	d12b      	bne.n	8005cf8 <_printf_float+0x240>
 8005ca0:	e767      	b.n	8005b72 <_printf_float+0xba>
 8005ca2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8005ca6:	f240 80dc 	bls.w	8005e62 <_printf_float+0x3aa>
 8005caa:	2200      	movs	r2, #0
 8005cac:	2300      	movs	r3, #0
 8005cae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005cb2:	f7fa ff29 	bl	8000b08 <__aeabi_dcmpeq>
 8005cb6:	2800      	cmp	r0, #0
 8005cb8:	d033      	beq.n	8005d22 <_printf_float+0x26a>
 8005cba:	2301      	movs	r3, #1
 8005cbc:	4a41      	ldr	r2, [pc, #260]	; (8005dc4 <_printf_float+0x30c>)
 8005cbe:	4631      	mov	r1, r6
 8005cc0:	4628      	mov	r0, r5
 8005cc2:	47b8      	blx	r7
 8005cc4:	3001      	adds	r0, #1
 8005cc6:	f43f af54 	beq.w	8005b72 <_printf_float+0xba>
 8005cca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	db02      	blt.n	8005cd8 <_printf_float+0x220>
 8005cd2:	6823      	ldr	r3, [r4, #0]
 8005cd4:	07d8      	lsls	r0, r3, #31
 8005cd6:	d50f      	bpl.n	8005cf8 <_printf_float+0x240>
 8005cd8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005cdc:	4631      	mov	r1, r6
 8005cde:	4628      	mov	r0, r5
 8005ce0:	47b8      	blx	r7
 8005ce2:	3001      	adds	r0, #1
 8005ce4:	f43f af45 	beq.w	8005b72 <_printf_float+0xba>
 8005ce8:	f04f 0800 	mov.w	r8, #0
 8005cec:	f104 091a 	add.w	r9, r4, #26
 8005cf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cf2:	3b01      	subs	r3, #1
 8005cf4:	4543      	cmp	r3, r8
 8005cf6:	dc09      	bgt.n	8005d0c <_printf_float+0x254>
 8005cf8:	6823      	ldr	r3, [r4, #0]
 8005cfa:	079b      	lsls	r3, r3, #30
 8005cfc:	f100 8103 	bmi.w	8005f06 <_printf_float+0x44e>
 8005d00:	68e0      	ldr	r0, [r4, #12]
 8005d02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d04:	4298      	cmp	r0, r3
 8005d06:	bfb8      	it	lt
 8005d08:	4618      	movlt	r0, r3
 8005d0a:	e734      	b.n	8005b76 <_printf_float+0xbe>
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	464a      	mov	r2, r9
 8005d10:	4631      	mov	r1, r6
 8005d12:	4628      	mov	r0, r5
 8005d14:	47b8      	blx	r7
 8005d16:	3001      	adds	r0, #1
 8005d18:	f43f af2b 	beq.w	8005b72 <_printf_float+0xba>
 8005d1c:	f108 0801 	add.w	r8, r8, #1
 8005d20:	e7e6      	b.n	8005cf0 <_printf_float+0x238>
 8005d22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	dc2b      	bgt.n	8005d80 <_printf_float+0x2c8>
 8005d28:	2301      	movs	r3, #1
 8005d2a:	4a26      	ldr	r2, [pc, #152]	; (8005dc4 <_printf_float+0x30c>)
 8005d2c:	4631      	mov	r1, r6
 8005d2e:	4628      	mov	r0, r5
 8005d30:	47b8      	blx	r7
 8005d32:	3001      	adds	r0, #1
 8005d34:	f43f af1d 	beq.w	8005b72 <_printf_float+0xba>
 8005d38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d3a:	b923      	cbnz	r3, 8005d46 <_printf_float+0x28e>
 8005d3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d3e:	b913      	cbnz	r3, 8005d46 <_printf_float+0x28e>
 8005d40:	6823      	ldr	r3, [r4, #0]
 8005d42:	07d9      	lsls	r1, r3, #31
 8005d44:	d5d8      	bpl.n	8005cf8 <_printf_float+0x240>
 8005d46:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d4a:	4631      	mov	r1, r6
 8005d4c:	4628      	mov	r0, r5
 8005d4e:	47b8      	blx	r7
 8005d50:	3001      	adds	r0, #1
 8005d52:	f43f af0e 	beq.w	8005b72 <_printf_float+0xba>
 8005d56:	f04f 0900 	mov.w	r9, #0
 8005d5a:	f104 0a1a 	add.w	sl, r4, #26
 8005d5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d60:	425b      	negs	r3, r3
 8005d62:	454b      	cmp	r3, r9
 8005d64:	dc01      	bgt.n	8005d6a <_printf_float+0x2b2>
 8005d66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d68:	e794      	b.n	8005c94 <_printf_float+0x1dc>
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	4652      	mov	r2, sl
 8005d6e:	4631      	mov	r1, r6
 8005d70:	4628      	mov	r0, r5
 8005d72:	47b8      	blx	r7
 8005d74:	3001      	adds	r0, #1
 8005d76:	f43f aefc 	beq.w	8005b72 <_printf_float+0xba>
 8005d7a:	f109 0901 	add.w	r9, r9, #1
 8005d7e:	e7ee      	b.n	8005d5e <_printf_float+0x2a6>
 8005d80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d82:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005d84:	429a      	cmp	r2, r3
 8005d86:	bfa8      	it	ge
 8005d88:	461a      	movge	r2, r3
 8005d8a:	2a00      	cmp	r2, #0
 8005d8c:	4691      	mov	r9, r2
 8005d8e:	dd07      	ble.n	8005da0 <_printf_float+0x2e8>
 8005d90:	4613      	mov	r3, r2
 8005d92:	4631      	mov	r1, r6
 8005d94:	4642      	mov	r2, r8
 8005d96:	4628      	mov	r0, r5
 8005d98:	47b8      	blx	r7
 8005d9a:	3001      	adds	r0, #1
 8005d9c:	f43f aee9 	beq.w	8005b72 <_printf_float+0xba>
 8005da0:	f104 031a 	add.w	r3, r4, #26
 8005da4:	f04f 0b00 	mov.w	fp, #0
 8005da8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005dac:	9306      	str	r3, [sp, #24]
 8005dae:	e015      	b.n	8005ddc <_printf_float+0x324>
 8005db0:	7fefffff 	.word	0x7fefffff
 8005db4:	08009458 	.word	0x08009458
 8005db8:	08009454 	.word	0x08009454
 8005dbc:	08009460 	.word	0x08009460
 8005dc0:	0800945c 	.word	0x0800945c
 8005dc4:	08009464 	.word	0x08009464
 8005dc8:	2301      	movs	r3, #1
 8005dca:	9a06      	ldr	r2, [sp, #24]
 8005dcc:	4631      	mov	r1, r6
 8005dce:	4628      	mov	r0, r5
 8005dd0:	47b8      	blx	r7
 8005dd2:	3001      	adds	r0, #1
 8005dd4:	f43f aecd 	beq.w	8005b72 <_printf_float+0xba>
 8005dd8:	f10b 0b01 	add.w	fp, fp, #1
 8005ddc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005de0:	ebaa 0309 	sub.w	r3, sl, r9
 8005de4:	455b      	cmp	r3, fp
 8005de6:	dcef      	bgt.n	8005dc8 <_printf_float+0x310>
 8005de8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005dec:	429a      	cmp	r2, r3
 8005dee:	44d0      	add	r8, sl
 8005df0:	db15      	blt.n	8005e1e <_printf_float+0x366>
 8005df2:	6823      	ldr	r3, [r4, #0]
 8005df4:	07da      	lsls	r2, r3, #31
 8005df6:	d412      	bmi.n	8005e1e <_printf_float+0x366>
 8005df8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dfa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005dfc:	eba3 020a 	sub.w	r2, r3, sl
 8005e00:	eba3 0a01 	sub.w	sl, r3, r1
 8005e04:	4592      	cmp	sl, r2
 8005e06:	bfa8      	it	ge
 8005e08:	4692      	movge	sl, r2
 8005e0a:	f1ba 0f00 	cmp.w	sl, #0
 8005e0e:	dc0e      	bgt.n	8005e2e <_printf_float+0x376>
 8005e10:	f04f 0800 	mov.w	r8, #0
 8005e14:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005e18:	f104 091a 	add.w	r9, r4, #26
 8005e1c:	e019      	b.n	8005e52 <_printf_float+0x39a>
 8005e1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e22:	4631      	mov	r1, r6
 8005e24:	4628      	mov	r0, r5
 8005e26:	47b8      	blx	r7
 8005e28:	3001      	adds	r0, #1
 8005e2a:	d1e5      	bne.n	8005df8 <_printf_float+0x340>
 8005e2c:	e6a1      	b.n	8005b72 <_printf_float+0xba>
 8005e2e:	4653      	mov	r3, sl
 8005e30:	4642      	mov	r2, r8
 8005e32:	4631      	mov	r1, r6
 8005e34:	4628      	mov	r0, r5
 8005e36:	47b8      	blx	r7
 8005e38:	3001      	adds	r0, #1
 8005e3a:	d1e9      	bne.n	8005e10 <_printf_float+0x358>
 8005e3c:	e699      	b.n	8005b72 <_printf_float+0xba>
 8005e3e:	2301      	movs	r3, #1
 8005e40:	464a      	mov	r2, r9
 8005e42:	4631      	mov	r1, r6
 8005e44:	4628      	mov	r0, r5
 8005e46:	47b8      	blx	r7
 8005e48:	3001      	adds	r0, #1
 8005e4a:	f43f ae92 	beq.w	8005b72 <_printf_float+0xba>
 8005e4e:	f108 0801 	add.w	r8, r8, #1
 8005e52:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e56:	1a9b      	subs	r3, r3, r2
 8005e58:	eba3 030a 	sub.w	r3, r3, sl
 8005e5c:	4543      	cmp	r3, r8
 8005e5e:	dcee      	bgt.n	8005e3e <_printf_float+0x386>
 8005e60:	e74a      	b.n	8005cf8 <_printf_float+0x240>
 8005e62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e64:	2a01      	cmp	r2, #1
 8005e66:	dc01      	bgt.n	8005e6c <_printf_float+0x3b4>
 8005e68:	07db      	lsls	r3, r3, #31
 8005e6a:	d53a      	bpl.n	8005ee2 <_printf_float+0x42a>
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	4642      	mov	r2, r8
 8005e70:	4631      	mov	r1, r6
 8005e72:	4628      	mov	r0, r5
 8005e74:	47b8      	blx	r7
 8005e76:	3001      	adds	r0, #1
 8005e78:	f43f ae7b 	beq.w	8005b72 <_printf_float+0xba>
 8005e7c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e80:	4631      	mov	r1, r6
 8005e82:	4628      	mov	r0, r5
 8005e84:	47b8      	blx	r7
 8005e86:	3001      	adds	r0, #1
 8005e88:	f108 0801 	add.w	r8, r8, #1
 8005e8c:	f43f ae71 	beq.w	8005b72 <_printf_float+0xba>
 8005e90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e92:	2200      	movs	r2, #0
 8005e94:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8005e98:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	f7fa fe33 	bl	8000b08 <__aeabi_dcmpeq>
 8005ea2:	b9c8      	cbnz	r0, 8005ed8 <_printf_float+0x420>
 8005ea4:	4653      	mov	r3, sl
 8005ea6:	4642      	mov	r2, r8
 8005ea8:	4631      	mov	r1, r6
 8005eaa:	4628      	mov	r0, r5
 8005eac:	47b8      	blx	r7
 8005eae:	3001      	adds	r0, #1
 8005eb0:	d10e      	bne.n	8005ed0 <_printf_float+0x418>
 8005eb2:	e65e      	b.n	8005b72 <_printf_float+0xba>
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	4652      	mov	r2, sl
 8005eb8:	4631      	mov	r1, r6
 8005eba:	4628      	mov	r0, r5
 8005ebc:	47b8      	blx	r7
 8005ebe:	3001      	adds	r0, #1
 8005ec0:	f43f ae57 	beq.w	8005b72 <_printf_float+0xba>
 8005ec4:	f108 0801 	add.w	r8, r8, #1
 8005ec8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005eca:	3b01      	subs	r3, #1
 8005ecc:	4543      	cmp	r3, r8
 8005ece:	dcf1      	bgt.n	8005eb4 <_printf_float+0x3fc>
 8005ed0:	464b      	mov	r3, r9
 8005ed2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005ed6:	e6de      	b.n	8005c96 <_printf_float+0x1de>
 8005ed8:	f04f 0800 	mov.w	r8, #0
 8005edc:	f104 0a1a 	add.w	sl, r4, #26
 8005ee0:	e7f2      	b.n	8005ec8 <_printf_float+0x410>
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	e7df      	b.n	8005ea6 <_printf_float+0x3ee>
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	464a      	mov	r2, r9
 8005eea:	4631      	mov	r1, r6
 8005eec:	4628      	mov	r0, r5
 8005eee:	47b8      	blx	r7
 8005ef0:	3001      	adds	r0, #1
 8005ef2:	f43f ae3e 	beq.w	8005b72 <_printf_float+0xba>
 8005ef6:	f108 0801 	add.w	r8, r8, #1
 8005efa:	68e3      	ldr	r3, [r4, #12]
 8005efc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005efe:	1a9b      	subs	r3, r3, r2
 8005f00:	4543      	cmp	r3, r8
 8005f02:	dcf0      	bgt.n	8005ee6 <_printf_float+0x42e>
 8005f04:	e6fc      	b.n	8005d00 <_printf_float+0x248>
 8005f06:	f04f 0800 	mov.w	r8, #0
 8005f0a:	f104 0919 	add.w	r9, r4, #25
 8005f0e:	e7f4      	b.n	8005efa <_printf_float+0x442>
 8005f10:	2900      	cmp	r1, #0
 8005f12:	f43f ae8b 	beq.w	8005c2c <_printf_float+0x174>
 8005f16:	2300      	movs	r3, #0
 8005f18:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8005f1c:	ab09      	add	r3, sp, #36	; 0x24
 8005f1e:	9300      	str	r3, [sp, #0]
 8005f20:	ec49 8b10 	vmov	d0, r8, r9
 8005f24:	6022      	str	r2, [r4, #0]
 8005f26:	f8cd a004 	str.w	sl, [sp, #4]
 8005f2a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005f2e:	4628      	mov	r0, r5
 8005f30:	f7ff fd2e 	bl	8005990 <__cvt>
 8005f34:	4680      	mov	r8, r0
 8005f36:	e648      	b.n	8005bca <_printf_float+0x112>

08005f38 <_printf_common>:
 8005f38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f3c:	4691      	mov	r9, r2
 8005f3e:	461f      	mov	r7, r3
 8005f40:	688a      	ldr	r2, [r1, #8]
 8005f42:	690b      	ldr	r3, [r1, #16]
 8005f44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	bfb8      	it	lt
 8005f4c:	4613      	movlt	r3, r2
 8005f4e:	f8c9 3000 	str.w	r3, [r9]
 8005f52:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005f56:	4606      	mov	r6, r0
 8005f58:	460c      	mov	r4, r1
 8005f5a:	b112      	cbz	r2, 8005f62 <_printf_common+0x2a>
 8005f5c:	3301      	adds	r3, #1
 8005f5e:	f8c9 3000 	str.w	r3, [r9]
 8005f62:	6823      	ldr	r3, [r4, #0]
 8005f64:	0699      	lsls	r1, r3, #26
 8005f66:	bf42      	ittt	mi
 8005f68:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005f6c:	3302      	addmi	r3, #2
 8005f6e:	f8c9 3000 	strmi.w	r3, [r9]
 8005f72:	6825      	ldr	r5, [r4, #0]
 8005f74:	f015 0506 	ands.w	r5, r5, #6
 8005f78:	d107      	bne.n	8005f8a <_printf_common+0x52>
 8005f7a:	f104 0a19 	add.w	sl, r4, #25
 8005f7e:	68e3      	ldr	r3, [r4, #12]
 8005f80:	f8d9 2000 	ldr.w	r2, [r9]
 8005f84:	1a9b      	subs	r3, r3, r2
 8005f86:	42ab      	cmp	r3, r5
 8005f88:	dc28      	bgt.n	8005fdc <_printf_common+0xa4>
 8005f8a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005f8e:	6822      	ldr	r2, [r4, #0]
 8005f90:	3300      	adds	r3, #0
 8005f92:	bf18      	it	ne
 8005f94:	2301      	movne	r3, #1
 8005f96:	0692      	lsls	r2, r2, #26
 8005f98:	d42d      	bmi.n	8005ff6 <_printf_common+0xbe>
 8005f9a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f9e:	4639      	mov	r1, r7
 8005fa0:	4630      	mov	r0, r6
 8005fa2:	47c0      	blx	r8
 8005fa4:	3001      	adds	r0, #1
 8005fa6:	d020      	beq.n	8005fea <_printf_common+0xb2>
 8005fa8:	6823      	ldr	r3, [r4, #0]
 8005faa:	68e5      	ldr	r5, [r4, #12]
 8005fac:	f8d9 2000 	ldr.w	r2, [r9]
 8005fb0:	f003 0306 	and.w	r3, r3, #6
 8005fb4:	2b04      	cmp	r3, #4
 8005fb6:	bf08      	it	eq
 8005fb8:	1aad      	subeq	r5, r5, r2
 8005fba:	68a3      	ldr	r3, [r4, #8]
 8005fbc:	6922      	ldr	r2, [r4, #16]
 8005fbe:	bf0c      	ite	eq
 8005fc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005fc4:	2500      	movne	r5, #0
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	bfc4      	itt	gt
 8005fca:	1a9b      	subgt	r3, r3, r2
 8005fcc:	18ed      	addgt	r5, r5, r3
 8005fce:	f04f 0900 	mov.w	r9, #0
 8005fd2:	341a      	adds	r4, #26
 8005fd4:	454d      	cmp	r5, r9
 8005fd6:	d11a      	bne.n	800600e <_printf_common+0xd6>
 8005fd8:	2000      	movs	r0, #0
 8005fda:	e008      	b.n	8005fee <_printf_common+0xb6>
 8005fdc:	2301      	movs	r3, #1
 8005fde:	4652      	mov	r2, sl
 8005fe0:	4639      	mov	r1, r7
 8005fe2:	4630      	mov	r0, r6
 8005fe4:	47c0      	blx	r8
 8005fe6:	3001      	adds	r0, #1
 8005fe8:	d103      	bne.n	8005ff2 <_printf_common+0xba>
 8005fea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005fee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ff2:	3501      	adds	r5, #1
 8005ff4:	e7c3      	b.n	8005f7e <_printf_common+0x46>
 8005ff6:	18e1      	adds	r1, r4, r3
 8005ff8:	1c5a      	adds	r2, r3, #1
 8005ffa:	2030      	movs	r0, #48	; 0x30
 8005ffc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006000:	4422      	add	r2, r4
 8006002:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006006:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800600a:	3302      	adds	r3, #2
 800600c:	e7c5      	b.n	8005f9a <_printf_common+0x62>
 800600e:	2301      	movs	r3, #1
 8006010:	4622      	mov	r2, r4
 8006012:	4639      	mov	r1, r7
 8006014:	4630      	mov	r0, r6
 8006016:	47c0      	blx	r8
 8006018:	3001      	adds	r0, #1
 800601a:	d0e6      	beq.n	8005fea <_printf_common+0xb2>
 800601c:	f109 0901 	add.w	r9, r9, #1
 8006020:	e7d8      	b.n	8005fd4 <_printf_common+0x9c>
	...

08006024 <_printf_i>:
 8006024:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006028:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800602c:	460c      	mov	r4, r1
 800602e:	7e09      	ldrb	r1, [r1, #24]
 8006030:	b085      	sub	sp, #20
 8006032:	296e      	cmp	r1, #110	; 0x6e
 8006034:	4617      	mov	r7, r2
 8006036:	4606      	mov	r6, r0
 8006038:	4698      	mov	r8, r3
 800603a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800603c:	f000 80b3 	beq.w	80061a6 <_printf_i+0x182>
 8006040:	d822      	bhi.n	8006088 <_printf_i+0x64>
 8006042:	2963      	cmp	r1, #99	; 0x63
 8006044:	d036      	beq.n	80060b4 <_printf_i+0x90>
 8006046:	d80a      	bhi.n	800605e <_printf_i+0x3a>
 8006048:	2900      	cmp	r1, #0
 800604a:	f000 80b9 	beq.w	80061c0 <_printf_i+0x19c>
 800604e:	2958      	cmp	r1, #88	; 0x58
 8006050:	f000 8083 	beq.w	800615a <_printf_i+0x136>
 8006054:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006058:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800605c:	e032      	b.n	80060c4 <_printf_i+0xa0>
 800605e:	2964      	cmp	r1, #100	; 0x64
 8006060:	d001      	beq.n	8006066 <_printf_i+0x42>
 8006062:	2969      	cmp	r1, #105	; 0x69
 8006064:	d1f6      	bne.n	8006054 <_printf_i+0x30>
 8006066:	6820      	ldr	r0, [r4, #0]
 8006068:	6813      	ldr	r3, [r2, #0]
 800606a:	0605      	lsls	r5, r0, #24
 800606c:	f103 0104 	add.w	r1, r3, #4
 8006070:	d52a      	bpl.n	80060c8 <_printf_i+0xa4>
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	6011      	str	r1, [r2, #0]
 8006076:	2b00      	cmp	r3, #0
 8006078:	da03      	bge.n	8006082 <_printf_i+0x5e>
 800607a:	222d      	movs	r2, #45	; 0x2d
 800607c:	425b      	negs	r3, r3
 800607e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006082:	486f      	ldr	r0, [pc, #444]	; (8006240 <_printf_i+0x21c>)
 8006084:	220a      	movs	r2, #10
 8006086:	e039      	b.n	80060fc <_printf_i+0xd8>
 8006088:	2973      	cmp	r1, #115	; 0x73
 800608a:	f000 809d 	beq.w	80061c8 <_printf_i+0x1a4>
 800608e:	d808      	bhi.n	80060a2 <_printf_i+0x7e>
 8006090:	296f      	cmp	r1, #111	; 0x6f
 8006092:	d020      	beq.n	80060d6 <_printf_i+0xb2>
 8006094:	2970      	cmp	r1, #112	; 0x70
 8006096:	d1dd      	bne.n	8006054 <_printf_i+0x30>
 8006098:	6823      	ldr	r3, [r4, #0]
 800609a:	f043 0320 	orr.w	r3, r3, #32
 800609e:	6023      	str	r3, [r4, #0]
 80060a0:	e003      	b.n	80060aa <_printf_i+0x86>
 80060a2:	2975      	cmp	r1, #117	; 0x75
 80060a4:	d017      	beq.n	80060d6 <_printf_i+0xb2>
 80060a6:	2978      	cmp	r1, #120	; 0x78
 80060a8:	d1d4      	bne.n	8006054 <_printf_i+0x30>
 80060aa:	2378      	movs	r3, #120	; 0x78
 80060ac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80060b0:	4864      	ldr	r0, [pc, #400]	; (8006244 <_printf_i+0x220>)
 80060b2:	e055      	b.n	8006160 <_printf_i+0x13c>
 80060b4:	6813      	ldr	r3, [r2, #0]
 80060b6:	1d19      	adds	r1, r3, #4
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	6011      	str	r1, [r2, #0]
 80060bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80060c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80060c4:	2301      	movs	r3, #1
 80060c6:	e08c      	b.n	80061e2 <_printf_i+0x1be>
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	6011      	str	r1, [r2, #0]
 80060cc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80060d0:	bf18      	it	ne
 80060d2:	b21b      	sxthne	r3, r3
 80060d4:	e7cf      	b.n	8006076 <_printf_i+0x52>
 80060d6:	6813      	ldr	r3, [r2, #0]
 80060d8:	6825      	ldr	r5, [r4, #0]
 80060da:	1d18      	adds	r0, r3, #4
 80060dc:	6010      	str	r0, [r2, #0]
 80060de:	0628      	lsls	r0, r5, #24
 80060e0:	d501      	bpl.n	80060e6 <_printf_i+0xc2>
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	e002      	b.n	80060ec <_printf_i+0xc8>
 80060e6:	0668      	lsls	r0, r5, #25
 80060e8:	d5fb      	bpl.n	80060e2 <_printf_i+0xbe>
 80060ea:	881b      	ldrh	r3, [r3, #0]
 80060ec:	4854      	ldr	r0, [pc, #336]	; (8006240 <_printf_i+0x21c>)
 80060ee:	296f      	cmp	r1, #111	; 0x6f
 80060f0:	bf14      	ite	ne
 80060f2:	220a      	movne	r2, #10
 80060f4:	2208      	moveq	r2, #8
 80060f6:	2100      	movs	r1, #0
 80060f8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80060fc:	6865      	ldr	r5, [r4, #4]
 80060fe:	60a5      	str	r5, [r4, #8]
 8006100:	2d00      	cmp	r5, #0
 8006102:	f2c0 8095 	blt.w	8006230 <_printf_i+0x20c>
 8006106:	6821      	ldr	r1, [r4, #0]
 8006108:	f021 0104 	bic.w	r1, r1, #4
 800610c:	6021      	str	r1, [r4, #0]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d13d      	bne.n	800618e <_printf_i+0x16a>
 8006112:	2d00      	cmp	r5, #0
 8006114:	f040 808e 	bne.w	8006234 <_printf_i+0x210>
 8006118:	4665      	mov	r5, ip
 800611a:	2a08      	cmp	r2, #8
 800611c:	d10b      	bne.n	8006136 <_printf_i+0x112>
 800611e:	6823      	ldr	r3, [r4, #0]
 8006120:	07db      	lsls	r3, r3, #31
 8006122:	d508      	bpl.n	8006136 <_printf_i+0x112>
 8006124:	6923      	ldr	r3, [r4, #16]
 8006126:	6862      	ldr	r2, [r4, #4]
 8006128:	429a      	cmp	r2, r3
 800612a:	bfde      	ittt	le
 800612c:	2330      	movle	r3, #48	; 0x30
 800612e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006132:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006136:	ebac 0305 	sub.w	r3, ip, r5
 800613a:	6123      	str	r3, [r4, #16]
 800613c:	f8cd 8000 	str.w	r8, [sp]
 8006140:	463b      	mov	r3, r7
 8006142:	aa03      	add	r2, sp, #12
 8006144:	4621      	mov	r1, r4
 8006146:	4630      	mov	r0, r6
 8006148:	f7ff fef6 	bl	8005f38 <_printf_common>
 800614c:	3001      	adds	r0, #1
 800614e:	d14d      	bne.n	80061ec <_printf_i+0x1c8>
 8006150:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006154:	b005      	add	sp, #20
 8006156:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800615a:	4839      	ldr	r0, [pc, #228]	; (8006240 <_printf_i+0x21c>)
 800615c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006160:	6813      	ldr	r3, [r2, #0]
 8006162:	6821      	ldr	r1, [r4, #0]
 8006164:	1d1d      	adds	r5, r3, #4
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	6015      	str	r5, [r2, #0]
 800616a:	060a      	lsls	r2, r1, #24
 800616c:	d50b      	bpl.n	8006186 <_printf_i+0x162>
 800616e:	07ca      	lsls	r2, r1, #31
 8006170:	bf44      	itt	mi
 8006172:	f041 0120 	orrmi.w	r1, r1, #32
 8006176:	6021      	strmi	r1, [r4, #0]
 8006178:	b91b      	cbnz	r3, 8006182 <_printf_i+0x15e>
 800617a:	6822      	ldr	r2, [r4, #0]
 800617c:	f022 0220 	bic.w	r2, r2, #32
 8006180:	6022      	str	r2, [r4, #0]
 8006182:	2210      	movs	r2, #16
 8006184:	e7b7      	b.n	80060f6 <_printf_i+0xd2>
 8006186:	064d      	lsls	r5, r1, #25
 8006188:	bf48      	it	mi
 800618a:	b29b      	uxthmi	r3, r3
 800618c:	e7ef      	b.n	800616e <_printf_i+0x14a>
 800618e:	4665      	mov	r5, ip
 8006190:	fbb3 f1f2 	udiv	r1, r3, r2
 8006194:	fb02 3311 	mls	r3, r2, r1, r3
 8006198:	5cc3      	ldrb	r3, [r0, r3]
 800619a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800619e:	460b      	mov	r3, r1
 80061a0:	2900      	cmp	r1, #0
 80061a2:	d1f5      	bne.n	8006190 <_printf_i+0x16c>
 80061a4:	e7b9      	b.n	800611a <_printf_i+0xf6>
 80061a6:	6813      	ldr	r3, [r2, #0]
 80061a8:	6825      	ldr	r5, [r4, #0]
 80061aa:	6961      	ldr	r1, [r4, #20]
 80061ac:	1d18      	adds	r0, r3, #4
 80061ae:	6010      	str	r0, [r2, #0]
 80061b0:	0628      	lsls	r0, r5, #24
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	d501      	bpl.n	80061ba <_printf_i+0x196>
 80061b6:	6019      	str	r1, [r3, #0]
 80061b8:	e002      	b.n	80061c0 <_printf_i+0x19c>
 80061ba:	066a      	lsls	r2, r5, #25
 80061bc:	d5fb      	bpl.n	80061b6 <_printf_i+0x192>
 80061be:	8019      	strh	r1, [r3, #0]
 80061c0:	2300      	movs	r3, #0
 80061c2:	6123      	str	r3, [r4, #16]
 80061c4:	4665      	mov	r5, ip
 80061c6:	e7b9      	b.n	800613c <_printf_i+0x118>
 80061c8:	6813      	ldr	r3, [r2, #0]
 80061ca:	1d19      	adds	r1, r3, #4
 80061cc:	6011      	str	r1, [r2, #0]
 80061ce:	681d      	ldr	r5, [r3, #0]
 80061d0:	6862      	ldr	r2, [r4, #4]
 80061d2:	2100      	movs	r1, #0
 80061d4:	4628      	mov	r0, r5
 80061d6:	f7fa f823 	bl	8000220 <memchr>
 80061da:	b108      	cbz	r0, 80061e0 <_printf_i+0x1bc>
 80061dc:	1b40      	subs	r0, r0, r5
 80061de:	6060      	str	r0, [r4, #4]
 80061e0:	6863      	ldr	r3, [r4, #4]
 80061e2:	6123      	str	r3, [r4, #16]
 80061e4:	2300      	movs	r3, #0
 80061e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061ea:	e7a7      	b.n	800613c <_printf_i+0x118>
 80061ec:	6923      	ldr	r3, [r4, #16]
 80061ee:	462a      	mov	r2, r5
 80061f0:	4639      	mov	r1, r7
 80061f2:	4630      	mov	r0, r6
 80061f4:	47c0      	blx	r8
 80061f6:	3001      	adds	r0, #1
 80061f8:	d0aa      	beq.n	8006150 <_printf_i+0x12c>
 80061fa:	6823      	ldr	r3, [r4, #0]
 80061fc:	079b      	lsls	r3, r3, #30
 80061fe:	d413      	bmi.n	8006228 <_printf_i+0x204>
 8006200:	68e0      	ldr	r0, [r4, #12]
 8006202:	9b03      	ldr	r3, [sp, #12]
 8006204:	4298      	cmp	r0, r3
 8006206:	bfb8      	it	lt
 8006208:	4618      	movlt	r0, r3
 800620a:	e7a3      	b.n	8006154 <_printf_i+0x130>
 800620c:	2301      	movs	r3, #1
 800620e:	464a      	mov	r2, r9
 8006210:	4639      	mov	r1, r7
 8006212:	4630      	mov	r0, r6
 8006214:	47c0      	blx	r8
 8006216:	3001      	adds	r0, #1
 8006218:	d09a      	beq.n	8006150 <_printf_i+0x12c>
 800621a:	3501      	adds	r5, #1
 800621c:	68e3      	ldr	r3, [r4, #12]
 800621e:	9a03      	ldr	r2, [sp, #12]
 8006220:	1a9b      	subs	r3, r3, r2
 8006222:	42ab      	cmp	r3, r5
 8006224:	dcf2      	bgt.n	800620c <_printf_i+0x1e8>
 8006226:	e7eb      	b.n	8006200 <_printf_i+0x1dc>
 8006228:	2500      	movs	r5, #0
 800622a:	f104 0919 	add.w	r9, r4, #25
 800622e:	e7f5      	b.n	800621c <_printf_i+0x1f8>
 8006230:	2b00      	cmp	r3, #0
 8006232:	d1ac      	bne.n	800618e <_printf_i+0x16a>
 8006234:	7803      	ldrb	r3, [r0, #0]
 8006236:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800623a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800623e:	e76c      	b.n	800611a <_printf_i+0xf6>
 8006240:	08009466 	.word	0x08009466
 8006244:	08009477 	.word	0x08009477

08006248 <_scanf_float>:
 8006248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800624c:	469a      	mov	sl, r3
 800624e:	688b      	ldr	r3, [r1, #8]
 8006250:	4616      	mov	r6, r2
 8006252:	1e5a      	subs	r2, r3, #1
 8006254:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006258:	b087      	sub	sp, #28
 800625a:	bf83      	ittte	hi
 800625c:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8006260:	189b      	addhi	r3, r3, r2
 8006262:	9301      	strhi	r3, [sp, #4]
 8006264:	2300      	movls	r3, #0
 8006266:	bf86      	itte	hi
 8006268:	f240 135d 	movwhi	r3, #349	; 0x15d
 800626c:	608b      	strhi	r3, [r1, #8]
 800626e:	9301      	strls	r3, [sp, #4]
 8006270:	680b      	ldr	r3, [r1, #0]
 8006272:	4688      	mov	r8, r1
 8006274:	f04f 0b00 	mov.w	fp, #0
 8006278:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800627c:	f848 3b1c 	str.w	r3, [r8], #28
 8006280:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8006284:	4607      	mov	r7, r0
 8006286:	460c      	mov	r4, r1
 8006288:	4645      	mov	r5, r8
 800628a:	465a      	mov	r2, fp
 800628c:	46d9      	mov	r9, fp
 800628e:	f8cd b008 	str.w	fp, [sp, #8]
 8006292:	68a1      	ldr	r1, [r4, #8]
 8006294:	b181      	cbz	r1, 80062b8 <_scanf_float+0x70>
 8006296:	6833      	ldr	r3, [r6, #0]
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	2b49      	cmp	r3, #73	; 0x49
 800629c:	d071      	beq.n	8006382 <_scanf_float+0x13a>
 800629e:	d84d      	bhi.n	800633c <_scanf_float+0xf4>
 80062a0:	2b39      	cmp	r3, #57	; 0x39
 80062a2:	d840      	bhi.n	8006326 <_scanf_float+0xde>
 80062a4:	2b31      	cmp	r3, #49	; 0x31
 80062a6:	f080 8088 	bcs.w	80063ba <_scanf_float+0x172>
 80062aa:	2b2d      	cmp	r3, #45	; 0x2d
 80062ac:	f000 8090 	beq.w	80063d0 <_scanf_float+0x188>
 80062b0:	d815      	bhi.n	80062de <_scanf_float+0x96>
 80062b2:	2b2b      	cmp	r3, #43	; 0x2b
 80062b4:	f000 808c 	beq.w	80063d0 <_scanf_float+0x188>
 80062b8:	f1b9 0f00 	cmp.w	r9, #0
 80062bc:	d003      	beq.n	80062c6 <_scanf_float+0x7e>
 80062be:	6823      	ldr	r3, [r4, #0]
 80062c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80062c4:	6023      	str	r3, [r4, #0]
 80062c6:	3a01      	subs	r2, #1
 80062c8:	2a01      	cmp	r2, #1
 80062ca:	f200 80ea 	bhi.w	80064a2 <_scanf_float+0x25a>
 80062ce:	4545      	cmp	r5, r8
 80062d0:	f200 80dc 	bhi.w	800648c <_scanf_float+0x244>
 80062d4:	2601      	movs	r6, #1
 80062d6:	4630      	mov	r0, r6
 80062d8:	b007      	add	sp, #28
 80062da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062de:	2b2e      	cmp	r3, #46	; 0x2e
 80062e0:	f000 809f 	beq.w	8006422 <_scanf_float+0x1da>
 80062e4:	2b30      	cmp	r3, #48	; 0x30
 80062e6:	d1e7      	bne.n	80062b8 <_scanf_float+0x70>
 80062e8:	6820      	ldr	r0, [r4, #0]
 80062ea:	f410 7f80 	tst.w	r0, #256	; 0x100
 80062ee:	d064      	beq.n	80063ba <_scanf_float+0x172>
 80062f0:	9b01      	ldr	r3, [sp, #4]
 80062f2:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 80062f6:	6020      	str	r0, [r4, #0]
 80062f8:	f109 0901 	add.w	r9, r9, #1
 80062fc:	b11b      	cbz	r3, 8006306 <_scanf_float+0xbe>
 80062fe:	3b01      	subs	r3, #1
 8006300:	3101      	adds	r1, #1
 8006302:	9301      	str	r3, [sp, #4]
 8006304:	60a1      	str	r1, [r4, #8]
 8006306:	68a3      	ldr	r3, [r4, #8]
 8006308:	3b01      	subs	r3, #1
 800630a:	60a3      	str	r3, [r4, #8]
 800630c:	6923      	ldr	r3, [r4, #16]
 800630e:	3301      	adds	r3, #1
 8006310:	6123      	str	r3, [r4, #16]
 8006312:	6873      	ldr	r3, [r6, #4]
 8006314:	3b01      	subs	r3, #1
 8006316:	2b00      	cmp	r3, #0
 8006318:	6073      	str	r3, [r6, #4]
 800631a:	f340 80ac 	ble.w	8006476 <_scanf_float+0x22e>
 800631e:	6833      	ldr	r3, [r6, #0]
 8006320:	3301      	adds	r3, #1
 8006322:	6033      	str	r3, [r6, #0]
 8006324:	e7b5      	b.n	8006292 <_scanf_float+0x4a>
 8006326:	2b45      	cmp	r3, #69	; 0x45
 8006328:	f000 8085 	beq.w	8006436 <_scanf_float+0x1ee>
 800632c:	2b46      	cmp	r3, #70	; 0x46
 800632e:	d06a      	beq.n	8006406 <_scanf_float+0x1be>
 8006330:	2b41      	cmp	r3, #65	; 0x41
 8006332:	d1c1      	bne.n	80062b8 <_scanf_float+0x70>
 8006334:	2a01      	cmp	r2, #1
 8006336:	d1bf      	bne.n	80062b8 <_scanf_float+0x70>
 8006338:	2202      	movs	r2, #2
 800633a:	e046      	b.n	80063ca <_scanf_float+0x182>
 800633c:	2b65      	cmp	r3, #101	; 0x65
 800633e:	d07a      	beq.n	8006436 <_scanf_float+0x1ee>
 8006340:	d818      	bhi.n	8006374 <_scanf_float+0x12c>
 8006342:	2b54      	cmp	r3, #84	; 0x54
 8006344:	d066      	beq.n	8006414 <_scanf_float+0x1cc>
 8006346:	d811      	bhi.n	800636c <_scanf_float+0x124>
 8006348:	2b4e      	cmp	r3, #78	; 0x4e
 800634a:	d1b5      	bne.n	80062b8 <_scanf_float+0x70>
 800634c:	2a00      	cmp	r2, #0
 800634e:	d146      	bne.n	80063de <_scanf_float+0x196>
 8006350:	f1b9 0f00 	cmp.w	r9, #0
 8006354:	d145      	bne.n	80063e2 <_scanf_float+0x19a>
 8006356:	6821      	ldr	r1, [r4, #0]
 8006358:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800635c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8006360:	d13f      	bne.n	80063e2 <_scanf_float+0x19a>
 8006362:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8006366:	6021      	str	r1, [r4, #0]
 8006368:	2201      	movs	r2, #1
 800636a:	e02e      	b.n	80063ca <_scanf_float+0x182>
 800636c:	2b59      	cmp	r3, #89	; 0x59
 800636e:	d01e      	beq.n	80063ae <_scanf_float+0x166>
 8006370:	2b61      	cmp	r3, #97	; 0x61
 8006372:	e7de      	b.n	8006332 <_scanf_float+0xea>
 8006374:	2b6e      	cmp	r3, #110	; 0x6e
 8006376:	d0e9      	beq.n	800634c <_scanf_float+0x104>
 8006378:	d815      	bhi.n	80063a6 <_scanf_float+0x15e>
 800637a:	2b66      	cmp	r3, #102	; 0x66
 800637c:	d043      	beq.n	8006406 <_scanf_float+0x1be>
 800637e:	2b69      	cmp	r3, #105	; 0x69
 8006380:	d19a      	bne.n	80062b8 <_scanf_float+0x70>
 8006382:	f1bb 0f00 	cmp.w	fp, #0
 8006386:	d138      	bne.n	80063fa <_scanf_float+0x1b2>
 8006388:	f1b9 0f00 	cmp.w	r9, #0
 800638c:	d197      	bne.n	80062be <_scanf_float+0x76>
 800638e:	6821      	ldr	r1, [r4, #0]
 8006390:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8006394:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8006398:	d195      	bne.n	80062c6 <_scanf_float+0x7e>
 800639a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800639e:	6021      	str	r1, [r4, #0]
 80063a0:	f04f 0b01 	mov.w	fp, #1
 80063a4:	e011      	b.n	80063ca <_scanf_float+0x182>
 80063a6:	2b74      	cmp	r3, #116	; 0x74
 80063a8:	d034      	beq.n	8006414 <_scanf_float+0x1cc>
 80063aa:	2b79      	cmp	r3, #121	; 0x79
 80063ac:	d184      	bne.n	80062b8 <_scanf_float+0x70>
 80063ae:	f1bb 0f07 	cmp.w	fp, #7
 80063b2:	d181      	bne.n	80062b8 <_scanf_float+0x70>
 80063b4:	f04f 0b08 	mov.w	fp, #8
 80063b8:	e007      	b.n	80063ca <_scanf_float+0x182>
 80063ba:	eb12 0f0b 	cmn.w	r2, fp
 80063be:	f47f af7b 	bne.w	80062b8 <_scanf_float+0x70>
 80063c2:	6821      	ldr	r1, [r4, #0]
 80063c4:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 80063c8:	6021      	str	r1, [r4, #0]
 80063ca:	702b      	strb	r3, [r5, #0]
 80063cc:	3501      	adds	r5, #1
 80063ce:	e79a      	b.n	8006306 <_scanf_float+0xbe>
 80063d0:	6821      	ldr	r1, [r4, #0]
 80063d2:	0608      	lsls	r0, r1, #24
 80063d4:	f57f af70 	bpl.w	80062b8 <_scanf_float+0x70>
 80063d8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80063dc:	e7f4      	b.n	80063c8 <_scanf_float+0x180>
 80063de:	2a02      	cmp	r2, #2
 80063e0:	d047      	beq.n	8006472 <_scanf_float+0x22a>
 80063e2:	f1bb 0f01 	cmp.w	fp, #1
 80063e6:	d003      	beq.n	80063f0 <_scanf_float+0x1a8>
 80063e8:	f1bb 0f04 	cmp.w	fp, #4
 80063ec:	f47f af64 	bne.w	80062b8 <_scanf_float+0x70>
 80063f0:	f10b 0b01 	add.w	fp, fp, #1
 80063f4:	fa5f fb8b 	uxtb.w	fp, fp
 80063f8:	e7e7      	b.n	80063ca <_scanf_float+0x182>
 80063fa:	f1bb 0f03 	cmp.w	fp, #3
 80063fe:	d0f7      	beq.n	80063f0 <_scanf_float+0x1a8>
 8006400:	f1bb 0f05 	cmp.w	fp, #5
 8006404:	e7f2      	b.n	80063ec <_scanf_float+0x1a4>
 8006406:	f1bb 0f02 	cmp.w	fp, #2
 800640a:	f47f af55 	bne.w	80062b8 <_scanf_float+0x70>
 800640e:	f04f 0b03 	mov.w	fp, #3
 8006412:	e7da      	b.n	80063ca <_scanf_float+0x182>
 8006414:	f1bb 0f06 	cmp.w	fp, #6
 8006418:	f47f af4e 	bne.w	80062b8 <_scanf_float+0x70>
 800641c:	f04f 0b07 	mov.w	fp, #7
 8006420:	e7d3      	b.n	80063ca <_scanf_float+0x182>
 8006422:	6821      	ldr	r1, [r4, #0]
 8006424:	0588      	lsls	r0, r1, #22
 8006426:	f57f af47 	bpl.w	80062b8 <_scanf_float+0x70>
 800642a:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800642e:	6021      	str	r1, [r4, #0]
 8006430:	f8cd 9008 	str.w	r9, [sp, #8]
 8006434:	e7c9      	b.n	80063ca <_scanf_float+0x182>
 8006436:	6821      	ldr	r1, [r4, #0]
 8006438:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800643c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8006440:	d006      	beq.n	8006450 <_scanf_float+0x208>
 8006442:	0548      	lsls	r0, r1, #21
 8006444:	f57f af38 	bpl.w	80062b8 <_scanf_float+0x70>
 8006448:	f1b9 0f00 	cmp.w	r9, #0
 800644c:	f43f af3b 	beq.w	80062c6 <_scanf_float+0x7e>
 8006450:	0588      	lsls	r0, r1, #22
 8006452:	bf58      	it	pl
 8006454:	9802      	ldrpl	r0, [sp, #8]
 8006456:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800645a:	bf58      	it	pl
 800645c:	eba9 0000 	subpl.w	r0, r9, r0
 8006460:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8006464:	bf58      	it	pl
 8006466:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800646a:	6021      	str	r1, [r4, #0]
 800646c:	f04f 0900 	mov.w	r9, #0
 8006470:	e7ab      	b.n	80063ca <_scanf_float+0x182>
 8006472:	2203      	movs	r2, #3
 8006474:	e7a9      	b.n	80063ca <_scanf_float+0x182>
 8006476:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800647a:	9205      	str	r2, [sp, #20]
 800647c:	4631      	mov	r1, r6
 800647e:	4638      	mov	r0, r7
 8006480:	4798      	blx	r3
 8006482:	9a05      	ldr	r2, [sp, #20]
 8006484:	2800      	cmp	r0, #0
 8006486:	f43f af04 	beq.w	8006292 <_scanf_float+0x4a>
 800648a:	e715      	b.n	80062b8 <_scanf_float+0x70>
 800648c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006490:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006494:	4632      	mov	r2, r6
 8006496:	4638      	mov	r0, r7
 8006498:	4798      	blx	r3
 800649a:	6923      	ldr	r3, [r4, #16]
 800649c:	3b01      	subs	r3, #1
 800649e:	6123      	str	r3, [r4, #16]
 80064a0:	e715      	b.n	80062ce <_scanf_float+0x86>
 80064a2:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 80064a6:	2b06      	cmp	r3, #6
 80064a8:	d80a      	bhi.n	80064c0 <_scanf_float+0x278>
 80064aa:	f1bb 0f02 	cmp.w	fp, #2
 80064ae:	d968      	bls.n	8006582 <_scanf_float+0x33a>
 80064b0:	f1ab 0b03 	sub.w	fp, fp, #3
 80064b4:	fa5f fb8b 	uxtb.w	fp, fp
 80064b8:	eba5 0b0b 	sub.w	fp, r5, fp
 80064bc:	455d      	cmp	r5, fp
 80064be:	d14b      	bne.n	8006558 <_scanf_float+0x310>
 80064c0:	6823      	ldr	r3, [r4, #0]
 80064c2:	05da      	lsls	r2, r3, #23
 80064c4:	d51f      	bpl.n	8006506 <_scanf_float+0x2be>
 80064c6:	055b      	lsls	r3, r3, #21
 80064c8:	d468      	bmi.n	800659c <_scanf_float+0x354>
 80064ca:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80064ce:	6923      	ldr	r3, [r4, #16]
 80064d0:	2965      	cmp	r1, #101	; 0x65
 80064d2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80064d6:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 80064da:	6123      	str	r3, [r4, #16]
 80064dc:	d00d      	beq.n	80064fa <_scanf_float+0x2b2>
 80064de:	2945      	cmp	r1, #69	; 0x45
 80064e0:	d00b      	beq.n	80064fa <_scanf_float+0x2b2>
 80064e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80064e6:	4632      	mov	r2, r6
 80064e8:	4638      	mov	r0, r7
 80064ea:	4798      	blx	r3
 80064ec:	6923      	ldr	r3, [r4, #16]
 80064ee:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 80064f2:	3b01      	subs	r3, #1
 80064f4:	f1a5 0b02 	sub.w	fp, r5, #2
 80064f8:	6123      	str	r3, [r4, #16]
 80064fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80064fe:	4632      	mov	r2, r6
 8006500:	4638      	mov	r0, r7
 8006502:	4798      	blx	r3
 8006504:	465d      	mov	r5, fp
 8006506:	6826      	ldr	r6, [r4, #0]
 8006508:	f016 0610 	ands.w	r6, r6, #16
 800650c:	d17a      	bne.n	8006604 <_scanf_float+0x3bc>
 800650e:	702e      	strb	r6, [r5, #0]
 8006510:	6823      	ldr	r3, [r4, #0]
 8006512:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006516:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800651a:	d142      	bne.n	80065a2 <_scanf_float+0x35a>
 800651c:	9b02      	ldr	r3, [sp, #8]
 800651e:	eba9 0303 	sub.w	r3, r9, r3
 8006522:	425a      	negs	r2, r3
 8006524:	2b00      	cmp	r3, #0
 8006526:	d149      	bne.n	80065bc <_scanf_float+0x374>
 8006528:	2200      	movs	r2, #0
 800652a:	4641      	mov	r1, r8
 800652c:	4638      	mov	r0, r7
 800652e:	f000 fea3 	bl	8007278 <_strtod_r>
 8006532:	6825      	ldr	r5, [r4, #0]
 8006534:	f8da 3000 	ldr.w	r3, [sl]
 8006538:	f015 0f02 	tst.w	r5, #2
 800653c:	f103 0204 	add.w	r2, r3, #4
 8006540:	ec59 8b10 	vmov	r8, r9, d0
 8006544:	f8ca 2000 	str.w	r2, [sl]
 8006548:	d043      	beq.n	80065d2 <_scanf_float+0x38a>
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	e9c3 8900 	strd	r8, r9, [r3]
 8006550:	68e3      	ldr	r3, [r4, #12]
 8006552:	3301      	adds	r3, #1
 8006554:	60e3      	str	r3, [r4, #12]
 8006556:	e6be      	b.n	80062d6 <_scanf_float+0x8e>
 8006558:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800655c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006560:	4632      	mov	r2, r6
 8006562:	4638      	mov	r0, r7
 8006564:	4798      	blx	r3
 8006566:	6923      	ldr	r3, [r4, #16]
 8006568:	3b01      	subs	r3, #1
 800656a:	6123      	str	r3, [r4, #16]
 800656c:	e7a6      	b.n	80064bc <_scanf_float+0x274>
 800656e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006572:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006576:	4632      	mov	r2, r6
 8006578:	4638      	mov	r0, r7
 800657a:	4798      	blx	r3
 800657c:	6923      	ldr	r3, [r4, #16]
 800657e:	3b01      	subs	r3, #1
 8006580:	6123      	str	r3, [r4, #16]
 8006582:	4545      	cmp	r5, r8
 8006584:	d8f3      	bhi.n	800656e <_scanf_float+0x326>
 8006586:	e6a5      	b.n	80062d4 <_scanf_float+0x8c>
 8006588:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800658c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006590:	4632      	mov	r2, r6
 8006592:	4638      	mov	r0, r7
 8006594:	4798      	blx	r3
 8006596:	6923      	ldr	r3, [r4, #16]
 8006598:	3b01      	subs	r3, #1
 800659a:	6123      	str	r3, [r4, #16]
 800659c:	4545      	cmp	r5, r8
 800659e:	d8f3      	bhi.n	8006588 <_scanf_float+0x340>
 80065a0:	e698      	b.n	80062d4 <_scanf_float+0x8c>
 80065a2:	9b03      	ldr	r3, [sp, #12]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d0bf      	beq.n	8006528 <_scanf_float+0x2e0>
 80065a8:	9904      	ldr	r1, [sp, #16]
 80065aa:	230a      	movs	r3, #10
 80065ac:	4632      	mov	r2, r6
 80065ae:	3101      	adds	r1, #1
 80065b0:	4638      	mov	r0, r7
 80065b2:	f000 feed 	bl	8007390 <_strtol_r>
 80065b6:	9b03      	ldr	r3, [sp, #12]
 80065b8:	9d04      	ldr	r5, [sp, #16]
 80065ba:	1ac2      	subs	r2, r0, r3
 80065bc:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80065c0:	429d      	cmp	r5, r3
 80065c2:	bf28      	it	cs
 80065c4:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 80065c8:	490f      	ldr	r1, [pc, #60]	; (8006608 <_scanf_float+0x3c0>)
 80065ca:	4628      	mov	r0, r5
 80065cc:	f000 f824 	bl	8006618 <siprintf>
 80065d0:	e7aa      	b.n	8006528 <_scanf_float+0x2e0>
 80065d2:	f015 0504 	ands.w	r5, r5, #4
 80065d6:	d1b8      	bne.n	800654a <_scanf_float+0x302>
 80065d8:	681f      	ldr	r7, [r3, #0]
 80065da:	ee10 2a10 	vmov	r2, s0
 80065de:	464b      	mov	r3, r9
 80065e0:	ee10 0a10 	vmov	r0, s0
 80065e4:	4649      	mov	r1, r9
 80065e6:	f7fa fac1 	bl	8000b6c <__aeabi_dcmpun>
 80065ea:	b128      	cbz	r0, 80065f8 <_scanf_float+0x3b0>
 80065ec:	4628      	mov	r0, r5
 80065ee:	f000 f80d 	bl	800660c <nanf>
 80065f2:	ed87 0a00 	vstr	s0, [r7]
 80065f6:	e7ab      	b.n	8006550 <_scanf_float+0x308>
 80065f8:	4640      	mov	r0, r8
 80065fa:	4649      	mov	r1, r9
 80065fc:	f7fa fb14 	bl	8000c28 <__aeabi_d2f>
 8006600:	6038      	str	r0, [r7, #0]
 8006602:	e7a5      	b.n	8006550 <_scanf_float+0x308>
 8006604:	2600      	movs	r6, #0
 8006606:	e666      	b.n	80062d6 <_scanf_float+0x8e>
 8006608:	08009488 	.word	0x08009488

0800660c <nanf>:
 800660c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006614 <nanf+0x8>
 8006610:	4770      	bx	lr
 8006612:	bf00      	nop
 8006614:	7fc00000 	.word	0x7fc00000

08006618 <siprintf>:
 8006618:	b40e      	push	{r1, r2, r3}
 800661a:	b500      	push	{lr}
 800661c:	b09c      	sub	sp, #112	; 0x70
 800661e:	ab1d      	add	r3, sp, #116	; 0x74
 8006620:	9002      	str	r0, [sp, #8]
 8006622:	9006      	str	r0, [sp, #24]
 8006624:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006628:	4809      	ldr	r0, [pc, #36]	; (8006650 <siprintf+0x38>)
 800662a:	9107      	str	r1, [sp, #28]
 800662c:	9104      	str	r1, [sp, #16]
 800662e:	4909      	ldr	r1, [pc, #36]	; (8006654 <siprintf+0x3c>)
 8006630:	f853 2b04 	ldr.w	r2, [r3], #4
 8006634:	9105      	str	r1, [sp, #20]
 8006636:	6800      	ldr	r0, [r0, #0]
 8006638:	9301      	str	r3, [sp, #4]
 800663a:	a902      	add	r1, sp, #8
 800663c:	f002 fd6e 	bl	800911c <_svfiprintf_r>
 8006640:	9b02      	ldr	r3, [sp, #8]
 8006642:	2200      	movs	r2, #0
 8006644:	701a      	strb	r2, [r3, #0]
 8006646:	b01c      	add	sp, #112	; 0x70
 8006648:	f85d eb04 	ldr.w	lr, [sp], #4
 800664c:	b003      	add	sp, #12
 800664e:	4770      	bx	lr
 8006650:	2000000c 	.word	0x2000000c
 8006654:	ffff0208 	.word	0xffff0208

08006658 <sulp>:
 8006658:	b570      	push	{r4, r5, r6, lr}
 800665a:	4604      	mov	r4, r0
 800665c:	460d      	mov	r5, r1
 800665e:	ec45 4b10 	vmov	d0, r4, r5
 8006662:	4616      	mov	r6, r2
 8006664:	f002 fb16 	bl	8008c94 <__ulp>
 8006668:	ec51 0b10 	vmov	r0, r1, d0
 800666c:	b17e      	cbz	r6, 800668e <sulp+0x36>
 800666e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006672:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006676:	2b00      	cmp	r3, #0
 8006678:	dd09      	ble.n	800668e <sulp+0x36>
 800667a:	051b      	lsls	r3, r3, #20
 800667c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006680:	2400      	movs	r4, #0
 8006682:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006686:	4622      	mov	r2, r4
 8006688:	462b      	mov	r3, r5
 800668a:	f7f9 ffd5 	bl	8000638 <__aeabi_dmul>
 800668e:	bd70      	pop	{r4, r5, r6, pc}

08006690 <_strtod_l>:
 8006690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006694:	461f      	mov	r7, r3
 8006696:	b0a1      	sub	sp, #132	; 0x84
 8006698:	2300      	movs	r3, #0
 800669a:	4681      	mov	r9, r0
 800669c:	4638      	mov	r0, r7
 800669e:	460e      	mov	r6, r1
 80066a0:	9217      	str	r2, [sp, #92]	; 0x5c
 80066a2:	931c      	str	r3, [sp, #112]	; 0x70
 80066a4:	f001 fff5 	bl	8008692 <__localeconv_l>
 80066a8:	4680      	mov	r8, r0
 80066aa:	6800      	ldr	r0, [r0, #0]
 80066ac:	f7f9 fdb0 	bl	8000210 <strlen>
 80066b0:	f04f 0a00 	mov.w	sl, #0
 80066b4:	4604      	mov	r4, r0
 80066b6:	f04f 0b00 	mov.w	fp, #0
 80066ba:	961b      	str	r6, [sp, #108]	; 0x6c
 80066bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80066be:	781a      	ldrb	r2, [r3, #0]
 80066c0:	2a0d      	cmp	r2, #13
 80066c2:	d832      	bhi.n	800672a <_strtod_l+0x9a>
 80066c4:	2a09      	cmp	r2, #9
 80066c6:	d236      	bcs.n	8006736 <_strtod_l+0xa6>
 80066c8:	2a00      	cmp	r2, #0
 80066ca:	d03e      	beq.n	800674a <_strtod_l+0xba>
 80066cc:	2300      	movs	r3, #0
 80066ce:	930d      	str	r3, [sp, #52]	; 0x34
 80066d0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80066d2:	782b      	ldrb	r3, [r5, #0]
 80066d4:	2b30      	cmp	r3, #48	; 0x30
 80066d6:	f040 80ac 	bne.w	8006832 <_strtod_l+0x1a2>
 80066da:	786b      	ldrb	r3, [r5, #1]
 80066dc:	2b58      	cmp	r3, #88	; 0x58
 80066de:	d001      	beq.n	80066e4 <_strtod_l+0x54>
 80066e0:	2b78      	cmp	r3, #120	; 0x78
 80066e2:	d167      	bne.n	80067b4 <_strtod_l+0x124>
 80066e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80066e6:	9301      	str	r3, [sp, #4]
 80066e8:	ab1c      	add	r3, sp, #112	; 0x70
 80066ea:	9300      	str	r3, [sp, #0]
 80066ec:	9702      	str	r7, [sp, #8]
 80066ee:	ab1d      	add	r3, sp, #116	; 0x74
 80066f0:	4a88      	ldr	r2, [pc, #544]	; (8006914 <_strtod_l+0x284>)
 80066f2:	a91b      	add	r1, sp, #108	; 0x6c
 80066f4:	4648      	mov	r0, r9
 80066f6:	f001 fcf2 	bl	80080de <__gethex>
 80066fa:	f010 0407 	ands.w	r4, r0, #7
 80066fe:	4606      	mov	r6, r0
 8006700:	d005      	beq.n	800670e <_strtod_l+0x7e>
 8006702:	2c06      	cmp	r4, #6
 8006704:	d12b      	bne.n	800675e <_strtod_l+0xce>
 8006706:	3501      	adds	r5, #1
 8006708:	2300      	movs	r3, #0
 800670a:	951b      	str	r5, [sp, #108]	; 0x6c
 800670c:	930d      	str	r3, [sp, #52]	; 0x34
 800670e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006710:	2b00      	cmp	r3, #0
 8006712:	f040 859a 	bne.w	800724a <_strtod_l+0xbba>
 8006716:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006718:	b1e3      	cbz	r3, 8006754 <_strtod_l+0xc4>
 800671a:	4652      	mov	r2, sl
 800671c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006720:	ec43 2b10 	vmov	d0, r2, r3
 8006724:	b021      	add	sp, #132	; 0x84
 8006726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800672a:	2a2b      	cmp	r2, #43	; 0x2b
 800672c:	d015      	beq.n	800675a <_strtod_l+0xca>
 800672e:	2a2d      	cmp	r2, #45	; 0x2d
 8006730:	d004      	beq.n	800673c <_strtod_l+0xac>
 8006732:	2a20      	cmp	r2, #32
 8006734:	d1ca      	bne.n	80066cc <_strtod_l+0x3c>
 8006736:	3301      	adds	r3, #1
 8006738:	931b      	str	r3, [sp, #108]	; 0x6c
 800673a:	e7bf      	b.n	80066bc <_strtod_l+0x2c>
 800673c:	2201      	movs	r2, #1
 800673e:	920d      	str	r2, [sp, #52]	; 0x34
 8006740:	1c5a      	adds	r2, r3, #1
 8006742:	921b      	str	r2, [sp, #108]	; 0x6c
 8006744:	785b      	ldrb	r3, [r3, #1]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d1c2      	bne.n	80066d0 <_strtod_l+0x40>
 800674a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800674c:	961b      	str	r6, [sp, #108]	; 0x6c
 800674e:	2b00      	cmp	r3, #0
 8006750:	f040 8579 	bne.w	8007246 <_strtod_l+0xbb6>
 8006754:	4652      	mov	r2, sl
 8006756:	465b      	mov	r3, fp
 8006758:	e7e2      	b.n	8006720 <_strtod_l+0x90>
 800675a:	2200      	movs	r2, #0
 800675c:	e7ef      	b.n	800673e <_strtod_l+0xae>
 800675e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006760:	b13a      	cbz	r2, 8006772 <_strtod_l+0xe2>
 8006762:	2135      	movs	r1, #53	; 0x35
 8006764:	a81e      	add	r0, sp, #120	; 0x78
 8006766:	f002 fb8d 	bl	8008e84 <__copybits>
 800676a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800676c:	4648      	mov	r0, r9
 800676e:	f001 fffa 	bl	8008766 <_Bfree>
 8006772:	3c01      	subs	r4, #1
 8006774:	2c04      	cmp	r4, #4
 8006776:	d806      	bhi.n	8006786 <_strtod_l+0xf6>
 8006778:	e8df f004 	tbb	[pc, r4]
 800677c:	1714030a 	.word	0x1714030a
 8006780:	0a          	.byte	0x0a
 8006781:	00          	.byte	0x00
 8006782:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8006786:	0730      	lsls	r0, r6, #28
 8006788:	d5c1      	bpl.n	800670e <_strtod_l+0x7e>
 800678a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800678e:	e7be      	b.n	800670e <_strtod_l+0x7e>
 8006790:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8006794:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8006796:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800679a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800679e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80067a2:	e7f0      	b.n	8006786 <_strtod_l+0xf6>
 80067a4:	f8df b170 	ldr.w	fp, [pc, #368]	; 8006918 <_strtod_l+0x288>
 80067a8:	e7ed      	b.n	8006786 <_strtod_l+0xf6>
 80067aa:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80067ae:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80067b2:	e7e8      	b.n	8006786 <_strtod_l+0xf6>
 80067b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80067b6:	1c5a      	adds	r2, r3, #1
 80067b8:	921b      	str	r2, [sp, #108]	; 0x6c
 80067ba:	785b      	ldrb	r3, [r3, #1]
 80067bc:	2b30      	cmp	r3, #48	; 0x30
 80067be:	d0f9      	beq.n	80067b4 <_strtod_l+0x124>
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d0a4      	beq.n	800670e <_strtod_l+0x7e>
 80067c4:	2301      	movs	r3, #1
 80067c6:	2500      	movs	r5, #0
 80067c8:	9306      	str	r3, [sp, #24]
 80067ca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80067cc:	9308      	str	r3, [sp, #32]
 80067ce:	9507      	str	r5, [sp, #28]
 80067d0:	9505      	str	r5, [sp, #20]
 80067d2:	220a      	movs	r2, #10
 80067d4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80067d6:	7807      	ldrb	r7, [r0, #0]
 80067d8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80067dc:	b2d9      	uxtb	r1, r3
 80067de:	2909      	cmp	r1, #9
 80067e0:	d929      	bls.n	8006836 <_strtod_l+0x1a6>
 80067e2:	4622      	mov	r2, r4
 80067e4:	f8d8 1000 	ldr.w	r1, [r8]
 80067e8:	f002 fda0 	bl	800932c <strncmp>
 80067ec:	2800      	cmp	r0, #0
 80067ee:	d031      	beq.n	8006854 <_strtod_l+0x1c4>
 80067f0:	2000      	movs	r0, #0
 80067f2:	9c05      	ldr	r4, [sp, #20]
 80067f4:	9004      	str	r0, [sp, #16]
 80067f6:	463b      	mov	r3, r7
 80067f8:	4602      	mov	r2, r0
 80067fa:	2b65      	cmp	r3, #101	; 0x65
 80067fc:	d001      	beq.n	8006802 <_strtod_l+0x172>
 80067fe:	2b45      	cmp	r3, #69	; 0x45
 8006800:	d114      	bne.n	800682c <_strtod_l+0x19c>
 8006802:	b924      	cbnz	r4, 800680e <_strtod_l+0x17e>
 8006804:	b910      	cbnz	r0, 800680c <_strtod_l+0x17c>
 8006806:	9b06      	ldr	r3, [sp, #24]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d09e      	beq.n	800674a <_strtod_l+0xba>
 800680c:	2400      	movs	r4, #0
 800680e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8006810:	1c73      	adds	r3, r6, #1
 8006812:	931b      	str	r3, [sp, #108]	; 0x6c
 8006814:	7873      	ldrb	r3, [r6, #1]
 8006816:	2b2b      	cmp	r3, #43	; 0x2b
 8006818:	d078      	beq.n	800690c <_strtod_l+0x27c>
 800681a:	2b2d      	cmp	r3, #45	; 0x2d
 800681c:	d070      	beq.n	8006900 <_strtod_l+0x270>
 800681e:	f04f 0c00 	mov.w	ip, #0
 8006822:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8006826:	2f09      	cmp	r7, #9
 8006828:	d97c      	bls.n	8006924 <_strtod_l+0x294>
 800682a:	961b      	str	r6, [sp, #108]	; 0x6c
 800682c:	f04f 0e00 	mov.w	lr, #0
 8006830:	e09a      	b.n	8006968 <_strtod_l+0x2d8>
 8006832:	2300      	movs	r3, #0
 8006834:	e7c7      	b.n	80067c6 <_strtod_l+0x136>
 8006836:	9905      	ldr	r1, [sp, #20]
 8006838:	2908      	cmp	r1, #8
 800683a:	bfdd      	ittte	le
 800683c:	9907      	ldrle	r1, [sp, #28]
 800683e:	fb02 3301 	mlale	r3, r2, r1, r3
 8006842:	9307      	strle	r3, [sp, #28]
 8006844:	fb02 3505 	mlagt	r5, r2, r5, r3
 8006848:	9b05      	ldr	r3, [sp, #20]
 800684a:	3001      	adds	r0, #1
 800684c:	3301      	adds	r3, #1
 800684e:	9305      	str	r3, [sp, #20]
 8006850:	901b      	str	r0, [sp, #108]	; 0x6c
 8006852:	e7bf      	b.n	80067d4 <_strtod_l+0x144>
 8006854:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006856:	191a      	adds	r2, r3, r4
 8006858:	921b      	str	r2, [sp, #108]	; 0x6c
 800685a:	9a05      	ldr	r2, [sp, #20]
 800685c:	5d1b      	ldrb	r3, [r3, r4]
 800685e:	2a00      	cmp	r2, #0
 8006860:	d037      	beq.n	80068d2 <_strtod_l+0x242>
 8006862:	9c05      	ldr	r4, [sp, #20]
 8006864:	4602      	mov	r2, r0
 8006866:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800686a:	2909      	cmp	r1, #9
 800686c:	d913      	bls.n	8006896 <_strtod_l+0x206>
 800686e:	2101      	movs	r1, #1
 8006870:	9104      	str	r1, [sp, #16]
 8006872:	e7c2      	b.n	80067fa <_strtod_l+0x16a>
 8006874:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006876:	1c5a      	adds	r2, r3, #1
 8006878:	921b      	str	r2, [sp, #108]	; 0x6c
 800687a:	785b      	ldrb	r3, [r3, #1]
 800687c:	3001      	adds	r0, #1
 800687e:	2b30      	cmp	r3, #48	; 0x30
 8006880:	d0f8      	beq.n	8006874 <_strtod_l+0x1e4>
 8006882:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8006886:	2a08      	cmp	r2, #8
 8006888:	f200 84e4 	bhi.w	8007254 <_strtod_l+0xbc4>
 800688c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800688e:	9208      	str	r2, [sp, #32]
 8006890:	4602      	mov	r2, r0
 8006892:	2000      	movs	r0, #0
 8006894:	4604      	mov	r4, r0
 8006896:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800689a:	f100 0101 	add.w	r1, r0, #1
 800689e:	d012      	beq.n	80068c6 <_strtod_l+0x236>
 80068a0:	440a      	add	r2, r1
 80068a2:	eb00 0c04 	add.w	ip, r0, r4
 80068a6:	4621      	mov	r1, r4
 80068a8:	270a      	movs	r7, #10
 80068aa:	458c      	cmp	ip, r1
 80068ac:	d113      	bne.n	80068d6 <_strtod_l+0x246>
 80068ae:	1821      	adds	r1, r4, r0
 80068b0:	2908      	cmp	r1, #8
 80068b2:	f104 0401 	add.w	r4, r4, #1
 80068b6:	4404      	add	r4, r0
 80068b8:	dc19      	bgt.n	80068ee <_strtod_l+0x25e>
 80068ba:	9b07      	ldr	r3, [sp, #28]
 80068bc:	210a      	movs	r1, #10
 80068be:	fb01 e303 	mla	r3, r1, r3, lr
 80068c2:	9307      	str	r3, [sp, #28]
 80068c4:	2100      	movs	r1, #0
 80068c6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80068c8:	1c58      	adds	r0, r3, #1
 80068ca:	901b      	str	r0, [sp, #108]	; 0x6c
 80068cc:	785b      	ldrb	r3, [r3, #1]
 80068ce:	4608      	mov	r0, r1
 80068d0:	e7c9      	b.n	8006866 <_strtod_l+0x1d6>
 80068d2:	9805      	ldr	r0, [sp, #20]
 80068d4:	e7d3      	b.n	800687e <_strtod_l+0x1ee>
 80068d6:	2908      	cmp	r1, #8
 80068d8:	f101 0101 	add.w	r1, r1, #1
 80068dc:	dc03      	bgt.n	80068e6 <_strtod_l+0x256>
 80068de:	9b07      	ldr	r3, [sp, #28]
 80068e0:	437b      	muls	r3, r7
 80068e2:	9307      	str	r3, [sp, #28]
 80068e4:	e7e1      	b.n	80068aa <_strtod_l+0x21a>
 80068e6:	2910      	cmp	r1, #16
 80068e8:	bfd8      	it	le
 80068ea:	437d      	mulle	r5, r7
 80068ec:	e7dd      	b.n	80068aa <_strtod_l+0x21a>
 80068ee:	2c10      	cmp	r4, #16
 80068f0:	bfdc      	itt	le
 80068f2:	210a      	movle	r1, #10
 80068f4:	fb01 e505 	mlale	r5, r1, r5, lr
 80068f8:	e7e4      	b.n	80068c4 <_strtod_l+0x234>
 80068fa:	2301      	movs	r3, #1
 80068fc:	9304      	str	r3, [sp, #16]
 80068fe:	e781      	b.n	8006804 <_strtod_l+0x174>
 8006900:	f04f 0c01 	mov.w	ip, #1
 8006904:	1cb3      	adds	r3, r6, #2
 8006906:	931b      	str	r3, [sp, #108]	; 0x6c
 8006908:	78b3      	ldrb	r3, [r6, #2]
 800690a:	e78a      	b.n	8006822 <_strtod_l+0x192>
 800690c:	f04f 0c00 	mov.w	ip, #0
 8006910:	e7f8      	b.n	8006904 <_strtod_l+0x274>
 8006912:	bf00      	nop
 8006914:	08009490 	.word	0x08009490
 8006918:	7ff00000 	.word	0x7ff00000
 800691c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800691e:	1c5f      	adds	r7, r3, #1
 8006920:	971b      	str	r7, [sp, #108]	; 0x6c
 8006922:	785b      	ldrb	r3, [r3, #1]
 8006924:	2b30      	cmp	r3, #48	; 0x30
 8006926:	d0f9      	beq.n	800691c <_strtod_l+0x28c>
 8006928:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800692c:	2f08      	cmp	r7, #8
 800692e:	f63f af7d 	bhi.w	800682c <_strtod_l+0x19c>
 8006932:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8006936:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006938:	930a      	str	r3, [sp, #40]	; 0x28
 800693a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800693c:	1c5f      	adds	r7, r3, #1
 800693e:	971b      	str	r7, [sp, #108]	; 0x6c
 8006940:	785b      	ldrb	r3, [r3, #1]
 8006942:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8006946:	f1b8 0f09 	cmp.w	r8, #9
 800694a:	d937      	bls.n	80069bc <_strtod_l+0x32c>
 800694c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800694e:	1a7f      	subs	r7, r7, r1
 8006950:	2f08      	cmp	r7, #8
 8006952:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8006956:	dc37      	bgt.n	80069c8 <_strtod_l+0x338>
 8006958:	45be      	cmp	lr, r7
 800695a:	bfa8      	it	ge
 800695c:	46be      	movge	lr, r7
 800695e:	f1bc 0f00 	cmp.w	ip, #0
 8006962:	d001      	beq.n	8006968 <_strtod_l+0x2d8>
 8006964:	f1ce 0e00 	rsb	lr, lr, #0
 8006968:	2c00      	cmp	r4, #0
 800696a:	d151      	bne.n	8006a10 <_strtod_l+0x380>
 800696c:	2800      	cmp	r0, #0
 800696e:	f47f aece 	bne.w	800670e <_strtod_l+0x7e>
 8006972:	9a06      	ldr	r2, [sp, #24]
 8006974:	2a00      	cmp	r2, #0
 8006976:	f47f aeca 	bne.w	800670e <_strtod_l+0x7e>
 800697a:	9a04      	ldr	r2, [sp, #16]
 800697c:	2a00      	cmp	r2, #0
 800697e:	f47f aee4 	bne.w	800674a <_strtod_l+0xba>
 8006982:	2b4e      	cmp	r3, #78	; 0x4e
 8006984:	d027      	beq.n	80069d6 <_strtod_l+0x346>
 8006986:	dc21      	bgt.n	80069cc <_strtod_l+0x33c>
 8006988:	2b49      	cmp	r3, #73	; 0x49
 800698a:	f47f aede 	bne.w	800674a <_strtod_l+0xba>
 800698e:	49a0      	ldr	r1, [pc, #640]	; (8006c10 <_strtod_l+0x580>)
 8006990:	a81b      	add	r0, sp, #108	; 0x6c
 8006992:	f001 fdd7 	bl	8008544 <__match>
 8006996:	2800      	cmp	r0, #0
 8006998:	f43f aed7 	beq.w	800674a <_strtod_l+0xba>
 800699c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800699e:	499d      	ldr	r1, [pc, #628]	; (8006c14 <_strtod_l+0x584>)
 80069a0:	3b01      	subs	r3, #1
 80069a2:	a81b      	add	r0, sp, #108	; 0x6c
 80069a4:	931b      	str	r3, [sp, #108]	; 0x6c
 80069a6:	f001 fdcd 	bl	8008544 <__match>
 80069aa:	b910      	cbnz	r0, 80069b2 <_strtod_l+0x322>
 80069ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80069ae:	3301      	adds	r3, #1
 80069b0:	931b      	str	r3, [sp, #108]	; 0x6c
 80069b2:	f8df b274 	ldr.w	fp, [pc, #628]	; 8006c28 <_strtod_l+0x598>
 80069b6:	f04f 0a00 	mov.w	sl, #0
 80069ba:	e6a8      	b.n	800670e <_strtod_l+0x7e>
 80069bc:	210a      	movs	r1, #10
 80069be:	fb01 3e0e 	mla	lr, r1, lr, r3
 80069c2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80069c6:	e7b8      	b.n	800693a <_strtod_l+0x2aa>
 80069c8:	46be      	mov	lr, r7
 80069ca:	e7c8      	b.n	800695e <_strtod_l+0x2ce>
 80069cc:	2b69      	cmp	r3, #105	; 0x69
 80069ce:	d0de      	beq.n	800698e <_strtod_l+0x2fe>
 80069d0:	2b6e      	cmp	r3, #110	; 0x6e
 80069d2:	f47f aeba 	bne.w	800674a <_strtod_l+0xba>
 80069d6:	4990      	ldr	r1, [pc, #576]	; (8006c18 <_strtod_l+0x588>)
 80069d8:	a81b      	add	r0, sp, #108	; 0x6c
 80069da:	f001 fdb3 	bl	8008544 <__match>
 80069de:	2800      	cmp	r0, #0
 80069e0:	f43f aeb3 	beq.w	800674a <_strtod_l+0xba>
 80069e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80069e6:	781b      	ldrb	r3, [r3, #0]
 80069e8:	2b28      	cmp	r3, #40	; 0x28
 80069ea:	d10e      	bne.n	8006a0a <_strtod_l+0x37a>
 80069ec:	aa1e      	add	r2, sp, #120	; 0x78
 80069ee:	498b      	ldr	r1, [pc, #556]	; (8006c1c <_strtod_l+0x58c>)
 80069f0:	a81b      	add	r0, sp, #108	; 0x6c
 80069f2:	f001 fdbb 	bl	800856c <__hexnan>
 80069f6:	2805      	cmp	r0, #5
 80069f8:	d107      	bne.n	8006a0a <_strtod_l+0x37a>
 80069fa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80069fc:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8006a00:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8006a04:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8006a08:	e681      	b.n	800670e <_strtod_l+0x7e>
 8006a0a:	f8df b224 	ldr.w	fp, [pc, #548]	; 8006c30 <_strtod_l+0x5a0>
 8006a0e:	e7d2      	b.n	80069b6 <_strtod_l+0x326>
 8006a10:	ebae 0302 	sub.w	r3, lr, r2
 8006a14:	9306      	str	r3, [sp, #24]
 8006a16:	9b05      	ldr	r3, [sp, #20]
 8006a18:	9807      	ldr	r0, [sp, #28]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	bf08      	it	eq
 8006a1e:	4623      	moveq	r3, r4
 8006a20:	2c10      	cmp	r4, #16
 8006a22:	9305      	str	r3, [sp, #20]
 8006a24:	46a0      	mov	r8, r4
 8006a26:	bfa8      	it	ge
 8006a28:	f04f 0810 	movge.w	r8, #16
 8006a2c:	f7f9 fd8a 	bl	8000544 <__aeabi_ui2d>
 8006a30:	2c09      	cmp	r4, #9
 8006a32:	4682      	mov	sl, r0
 8006a34:	468b      	mov	fp, r1
 8006a36:	dc13      	bgt.n	8006a60 <_strtod_l+0x3d0>
 8006a38:	9b06      	ldr	r3, [sp, #24]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	f43f ae67 	beq.w	800670e <_strtod_l+0x7e>
 8006a40:	9b06      	ldr	r3, [sp, #24]
 8006a42:	dd7a      	ble.n	8006b3a <_strtod_l+0x4aa>
 8006a44:	2b16      	cmp	r3, #22
 8006a46:	dc61      	bgt.n	8006b0c <_strtod_l+0x47c>
 8006a48:	4a75      	ldr	r2, [pc, #468]	; (8006c20 <_strtod_l+0x590>)
 8006a4a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8006a4e:	e9de 0100 	ldrd	r0, r1, [lr]
 8006a52:	4652      	mov	r2, sl
 8006a54:	465b      	mov	r3, fp
 8006a56:	f7f9 fdef 	bl	8000638 <__aeabi_dmul>
 8006a5a:	4682      	mov	sl, r0
 8006a5c:	468b      	mov	fp, r1
 8006a5e:	e656      	b.n	800670e <_strtod_l+0x7e>
 8006a60:	4b6f      	ldr	r3, [pc, #444]	; (8006c20 <_strtod_l+0x590>)
 8006a62:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006a66:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006a6a:	f7f9 fde5 	bl	8000638 <__aeabi_dmul>
 8006a6e:	4606      	mov	r6, r0
 8006a70:	4628      	mov	r0, r5
 8006a72:	460f      	mov	r7, r1
 8006a74:	f7f9 fd66 	bl	8000544 <__aeabi_ui2d>
 8006a78:	4602      	mov	r2, r0
 8006a7a:	460b      	mov	r3, r1
 8006a7c:	4630      	mov	r0, r6
 8006a7e:	4639      	mov	r1, r7
 8006a80:	f7f9 fc24 	bl	80002cc <__adddf3>
 8006a84:	2c0f      	cmp	r4, #15
 8006a86:	4682      	mov	sl, r0
 8006a88:	468b      	mov	fp, r1
 8006a8a:	ddd5      	ble.n	8006a38 <_strtod_l+0x3a8>
 8006a8c:	9b06      	ldr	r3, [sp, #24]
 8006a8e:	eba4 0808 	sub.w	r8, r4, r8
 8006a92:	4498      	add	r8, r3
 8006a94:	f1b8 0f00 	cmp.w	r8, #0
 8006a98:	f340 8096 	ble.w	8006bc8 <_strtod_l+0x538>
 8006a9c:	f018 030f 	ands.w	r3, r8, #15
 8006aa0:	d00a      	beq.n	8006ab8 <_strtod_l+0x428>
 8006aa2:	495f      	ldr	r1, [pc, #380]	; (8006c20 <_strtod_l+0x590>)
 8006aa4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006aa8:	4652      	mov	r2, sl
 8006aaa:	465b      	mov	r3, fp
 8006aac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ab0:	f7f9 fdc2 	bl	8000638 <__aeabi_dmul>
 8006ab4:	4682      	mov	sl, r0
 8006ab6:	468b      	mov	fp, r1
 8006ab8:	f038 080f 	bics.w	r8, r8, #15
 8006abc:	d073      	beq.n	8006ba6 <_strtod_l+0x516>
 8006abe:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8006ac2:	dd47      	ble.n	8006b54 <_strtod_l+0x4c4>
 8006ac4:	2400      	movs	r4, #0
 8006ac6:	46a0      	mov	r8, r4
 8006ac8:	9407      	str	r4, [sp, #28]
 8006aca:	9405      	str	r4, [sp, #20]
 8006acc:	2322      	movs	r3, #34	; 0x22
 8006ace:	f8df b158 	ldr.w	fp, [pc, #344]	; 8006c28 <_strtod_l+0x598>
 8006ad2:	f8c9 3000 	str.w	r3, [r9]
 8006ad6:	f04f 0a00 	mov.w	sl, #0
 8006ada:	9b07      	ldr	r3, [sp, #28]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	f43f ae16 	beq.w	800670e <_strtod_l+0x7e>
 8006ae2:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006ae4:	4648      	mov	r0, r9
 8006ae6:	f001 fe3e 	bl	8008766 <_Bfree>
 8006aea:	9905      	ldr	r1, [sp, #20]
 8006aec:	4648      	mov	r0, r9
 8006aee:	f001 fe3a 	bl	8008766 <_Bfree>
 8006af2:	4641      	mov	r1, r8
 8006af4:	4648      	mov	r0, r9
 8006af6:	f001 fe36 	bl	8008766 <_Bfree>
 8006afa:	9907      	ldr	r1, [sp, #28]
 8006afc:	4648      	mov	r0, r9
 8006afe:	f001 fe32 	bl	8008766 <_Bfree>
 8006b02:	4621      	mov	r1, r4
 8006b04:	4648      	mov	r0, r9
 8006b06:	f001 fe2e 	bl	8008766 <_Bfree>
 8006b0a:	e600      	b.n	800670e <_strtod_l+0x7e>
 8006b0c:	9a06      	ldr	r2, [sp, #24]
 8006b0e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8006b12:	4293      	cmp	r3, r2
 8006b14:	dbba      	blt.n	8006a8c <_strtod_l+0x3fc>
 8006b16:	4d42      	ldr	r5, [pc, #264]	; (8006c20 <_strtod_l+0x590>)
 8006b18:	f1c4 040f 	rsb	r4, r4, #15
 8006b1c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8006b20:	4652      	mov	r2, sl
 8006b22:	465b      	mov	r3, fp
 8006b24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b28:	f7f9 fd86 	bl	8000638 <__aeabi_dmul>
 8006b2c:	9b06      	ldr	r3, [sp, #24]
 8006b2e:	1b1c      	subs	r4, r3, r4
 8006b30:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8006b34:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006b38:	e78d      	b.n	8006a56 <_strtod_l+0x3c6>
 8006b3a:	f113 0f16 	cmn.w	r3, #22
 8006b3e:	dba5      	blt.n	8006a8c <_strtod_l+0x3fc>
 8006b40:	4a37      	ldr	r2, [pc, #220]	; (8006c20 <_strtod_l+0x590>)
 8006b42:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8006b46:	e9d2 2300 	ldrd	r2, r3, [r2]
 8006b4a:	4650      	mov	r0, sl
 8006b4c:	4659      	mov	r1, fp
 8006b4e:	f7f9 fe9d 	bl	800088c <__aeabi_ddiv>
 8006b52:	e782      	b.n	8006a5a <_strtod_l+0x3ca>
 8006b54:	2300      	movs	r3, #0
 8006b56:	4e33      	ldr	r6, [pc, #204]	; (8006c24 <_strtod_l+0x594>)
 8006b58:	ea4f 1828 	mov.w	r8, r8, asr #4
 8006b5c:	4650      	mov	r0, sl
 8006b5e:	4659      	mov	r1, fp
 8006b60:	461d      	mov	r5, r3
 8006b62:	f1b8 0f01 	cmp.w	r8, #1
 8006b66:	dc21      	bgt.n	8006bac <_strtod_l+0x51c>
 8006b68:	b10b      	cbz	r3, 8006b6e <_strtod_l+0x4de>
 8006b6a:	4682      	mov	sl, r0
 8006b6c:	468b      	mov	fp, r1
 8006b6e:	4b2d      	ldr	r3, [pc, #180]	; (8006c24 <_strtod_l+0x594>)
 8006b70:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006b74:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8006b78:	4652      	mov	r2, sl
 8006b7a:	465b      	mov	r3, fp
 8006b7c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8006b80:	f7f9 fd5a 	bl	8000638 <__aeabi_dmul>
 8006b84:	4b28      	ldr	r3, [pc, #160]	; (8006c28 <_strtod_l+0x598>)
 8006b86:	460a      	mov	r2, r1
 8006b88:	400b      	ands	r3, r1
 8006b8a:	4928      	ldr	r1, [pc, #160]	; (8006c2c <_strtod_l+0x59c>)
 8006b8c:	428b      	cmp	r3, r1
 8006b8e:	4682      	mov	sl, r0
 8006b90:	d898      	bhi.n	8006ac4 <_strtod_l+0x434>
 8006b92:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006b96:	428b      	cmp	r3, r1
 8006b98:	bf86      	itte	hi
 8006b9a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8006c34 <_strtod_l+0x5a4>
 8006b9e:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8006ba2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	9304      	str	r3, [sp, #16]
 8006baa:	e077      	b.n	8006c9c <_strtod_l+0x60c>
 8006bac:	f018 0f01 	tst.w	r8, #1
 8006bb0:	d006      	beq.n	8006bc0 <_strtod_l+0x530>
 8006bb2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8006bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bba:	f7f9 fd3d 	bl	8000638 <__aeabi_dmul>
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	3501      	adds	r5, #1
 8006bc2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006bc6:	e7cc      	b.n	8006b62 <_strtod_l+0x4d2>
 8006bc8:	d0ed      	beq.n	8006ba6 <_strtod_l+0x516>
 8006bca:	f1c8 0800 	rsb	r8, r8, #0
 8006bce:	f018 020f 	ands.w	r2, r8, #15
 8006bd2:	d00a      	beq.n	8006bea <_strtod_l+0x55a>
 8006bd4:	4b12      	ldr	r3, [pc, #72]	; (8006c20 <_strtod_l+0x590>)
 8006bd6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006bda:	4650      	mov	r0, sl
 8006bdc:	4659      	mov	r1, fp
 8006bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006be2:	f7f9 fe53 	bl	800088c <__aeabi_ddiv>
 8006be6:	4682      	mov	sl, r0
 8006be8:	468b      	mov	fp, r1
 8006bea:	ea5f 1828 	movs.w	r8, r8, asr #4
 8006bee:	d0da      	beq.n	8006ba6 <_strtod_l+0x516>
 8006bf0:	f1b8 0f1f 	cmp.w	r8, #31
 8006bf4:	dd20      	ble.n	8006c38 <_strtod_l+0x5a8>
 8006bf6:	2400      	movs	r4, #0
 8006bf8:	46a0      	mov	r8, r4
 8006bfa:	9407      	str	r4, [sp, #28]
 8006bfc:	9405      	str	r4, [sp, #20]
 8006bfe:	2322      	movs	r3, #34	; 0x22
 8006c00:	f04f 0a00 	mov.w	sl, #0
 8006c04:	f04f 0b00 	mov.w	fp, #0
 8006c08:	f8c9 3000 	str.w	r3, [r9]
 8006c0c:	e765      	b.n	8006ada <_strtod_l+0x44a>
 8006c0e:	bf00      	nop
 8006c10:	08009459 	.word	0x08009459
 8006c14:	080094e3 	.word	0x080094e3
 8006c18:	08009461 	.word	0x08009461
 8006c1c:	080094a4 	.word	0x080094a4
 8006c20:	08009520 	.word	0x08009520
 8006c24:	080094f8 	.word	0x080094f8
 8006c28:	7ff00000 	.word	0x7ff00000
 8006c2c:	7ca00000 	.word	0x7ca00000
 8006c30:	fff80000 	.word	0xfff80000
 8006c34:	7fefffff 	.word	0x7fefffff
 8006c38:	f018 0310 	ands.w	r3, r8, #16
 8006c3c:	bf18      	it	ne
 8006c3e:	236a      	movne	r3, #106	; 0x6a
 8006c40:	4da0      	ldr	r5, [pc, #640]	; (8006ec4 <_strtod_l+0x834>)
 8006c42:	9304      	str	r3, [sp, #16]
 8006c44:	4650      	mov	r0, sl
 8006c46:	4659      	mov	r1, fp
 8006c48:	2300      	movs	r3, #0
 8006c4a:	f1b8 0f00 	cmp.w	r8, #0
 8006c4e:	f300 810a 	bgt.w	8006e66 <_strtod_l+0x7d6>
 8006c52:	b10b      	cbz	r3, 8006c58 <_strtod_l+0x5c8>
 8006c54:	4682      	mov	sl, r0
 8006c56:	468b      	mov	fp, r1
 8006c58:	9b04      	ldr	r3, [sp, #16]
 8006c5a:	b1bb      	cbz	r3, 8006c8c <_strtod_l+0x5fc>
 8006c5c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8006c60:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	4659      	mov	r1, fp
 8006c68:	dd10      	ble.n	8006c8c <_strtod_l+0x5fc>
 8006c6a:	2b1f      	cmp	r3, #31
 8006c6c:	f340 8107 	ble.w	8006e7e <_strtod_l+0x7ee>
 8006c70:	2b34      	cmp	r3, #52	; 0x34
 8006c72:	bfde      	ittt	le
 8006c74:	3b20      	suble	r3, #32
 8006c76:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8006c7a:	fa02 f303 	lslle.w	r3, r2, r3
 8006c7e:	f04f 0a00 	mov.w	sl, #0
 8006c82:	bfcc      	ite	gt
 8006c84:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8006c88:	ea03 0b01 	andle.w	fp, r3, r1
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	2300      	movs	r3, #0
 8006c90:	4650      	mov	r0, sl
 8006c92:	4659      	mov	r1, fp
 8006c94:	f7f9 ff38 	bl	8000b08 <__aeabi_dcmpeq>
 8006c98:	2800      	cmp	r0, #0
 8006c9a:	d1ac      	bne.n	8006bf6 <_strtod_l+0x566>
 8006c9c:	9b07      	ldr	r3, [sp, #28]
 8006c9e:	9300      	str	r3, [sp, #0]
 8006ca0:	9a05      	ldr	r2, [sp, #20]
 8006ca2:	9908      	ldr	r1, [sp, #32]
 8006ca4:	4623      	mov	r3, r4
 8006ca6:	4648      	mov	r0, r9
 8006ca8:	f001 fdaf 	bl	800880a <__s2b>
 8006cac:	9007      	str	r0, [sp, #28]
 8006cae:	2800      	cmp	r0, #0
 8006cb0:	f43f af08 	beq.w	8006ac4 <_strtod_l+0x434>
 8006cb4:	9a06      	ldr	r2, [sp, #24]
 8006cb6:	9b06      	ldr	r3, [sp, #24]
 8006cb8:	2a00      	cmp	r2, #0
 8006cba:	f1c3 0300 	rsb	r3, r3, #0
 8006cbe:	bfa8      	it	ge
 8006cc0:	2300      	movge	r3, #0
 8006cc2:	930e      	str	r3, [sp, #56]	; 0x38
 8006cc4:	2400      	movs	r4, #0
 8006cc6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006cca:	9316      	str	r3, [sp, #88]	; 0x58
 8006ccc:	46a0      	mov	r8, r4
 8006cce:	9b07      	ldr	r3, [sp, #28]
 8006cd0:	4648      	mov	r0, r9
 8006cd2:	6859      	ldr	r1, [r3, #4]
 8006cd4:	f001 fd13 	bl	80086fe <_Balloc>
 8006cd8:	9005      	str	r0, [sp, #20]
 8006cda:	2800      	cmp	r0, #0
 8006cdc:	f43f aef6 	beq.w	8006acc <_strtod_l+0x43c>
 8006ce0:	9b07      	ldr	r3, [sp, #28]
 8006ce2:	691a      	ldr	r2, [r3, #16]
 8006ce4:	3202      	adds	r2, #2
 8006ce6:	f103 010c 	add.w	r1, r3, #12
 8006cea:	0092      	lsls	r2, r2, #2
 8006cec:	300c      	adds	r0, #12
 8006cee:	f001 fcfb 	bl	80086e8 <memcpy>
 8006cf2:	aa1e      	add	r2, sp, #120	; 0x78
 8006cf4:	a91d      	add	r1, sp, #116	; 0x74
 8006cf6:	ec4b ab10 	vmov	d0, sl, fp
 8006cfa:	4648      	mov	r0, r9
 8006cfc:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8006d00:	f002 f83e 	bl	8008d80 <__d2b>
 8006d04:	901c      	str	r0, [sp, #112]	; 0x70
 8006d06:	2800      	cmp	r0, #0
 8006d08:	f43f aee0 	beq.w	8006acc <_strtod_l+0x43c>
 8006d0c:	2101      	movs	r1, #1
 8006d0e:	4648      	mov	r0, r9
 8006d10:	f001 fe07 	bl	8008922 <__i2b>
 8006d14:	4680      	mov	r8, r0
 8006d16:	2800      	cmp	r0, #0
 8006d18:	f43f aed8 	beq.w	8006acc <_strtod_l+0x43c>
 8006d1c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8006d1e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006d20:	2e00      	cmp	r6, #0
 8006d22:	bfab      	itete	ge
 8006d24:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8006d26:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8006d28:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8006d2a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8006d2c:	bfac      	ite	ge
 8006d2e:	18f7      	addge	r7, r6, r3
 8006d30:	1b9d      	sublt	r5, r3, r6
 8006d32:	9b04      	ldr	r3, [sp, #16]
 8006d34:	1af6      	subs	r6, r6, r3
 8006d36:	4416      	add	r6, r2
 8006d38:	4b63      	ldr	r3, [pc, #396]	; (8006ec8 <_strtod_l+0x838>)
 8006d3a:	3e01      	subs	r6, #1
 8006d3c:	429e      	cmp	r6, r3
 8006d3e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006d42:	f280 80af 	bge.w	8006ea4 <_strtod_l+0x814>
 8006d46:	1b9b      	subs	r3, r3, r6
 8006d48:	2b1f      	cmp	r3, #31
 8006d4a:	eba2 0203 	sub.w	r2, r2, r3
 8006d4e:	f04f 0101 	mov.w	r1, #1
 8006d52:	f300 809b 	bgt.w	8006e8c <_strtod_l+0x7fc>
 8006d56:	fa01 f303 	lsl.w	r3, r1, r3
 8006d5a:	930f      	str	r3, [sp, #60]	; 0x3c
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	930a      	str	r3, [sp, #40]	; 0x28
 8006d60:	18be      	adds	r6, r7, r2
 8006d62:	9b04      	ldr	r3, [sp, #16]
 8006d64:	42b7      	cmp	r7, r6
 8006d66:	4415      	add	r5, r2
 8006d68:	441d      	add	r5, r3
 8006d6a:	463b      	mov	r3, r7
 8006d6c:	bfa8      	it	ge
 8006d6e:	4633      	movge	r3, r6
 8006d70:	42ab      	cmp	r3, r5
 8006d72:	bfa8      	it	ge
 8006d74:	462b      	movge	r3, r5
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	bfc2      	ittt	gt
 8006d7a:	1af6      	subgt	r6, r6, r3
 8006d7c:	1aed      	subgt	r5, r5, r3
 8006d7e:	1aff      	subgt	r7, r7, r3
 8006d80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d82:	b1bb      	cbz	r3, 8006db4 <_strtod_l+0x724>
 8006d84:	4641      	mov	r1, r8
 8006d86:	461a      	mov	r2, r3
 8006d88:	4648      	mov	r0, r9
 8006d8a:	f001 fe69 	bl	8008a60 <__pow5mult>
 8006d8e:	4680      	mov	r8, r0
 8006d90:	2800      	cmp	r0, #0
 8006d92:	f43f ae9b 	beq.w	8006acc <_strtod_l+0x43c>
 8006d96:	4601      	mov	r1, r0
 8006d98:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006d9a:	4648      	mov	r0, r9
 8006d9c:	f001 fdca 	bl	8008934 <__multiply>
 8006da0:	900c      	str	r0, [sp, #48]	; 0x30
 8006da2:	2800      	cmp	r0, #0
 8006da4:	f43f ae92 	beq.w	8006acc <_strtod_l+0x43c>
 8006da8:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006daa:	4648      	mov	r0, r9
 8006dac:	f001 fcdb 	bl	8008766 <_Bfree>
 8006db0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006db2:	931c      	str	r3, [sp, #112]	; 0x70
 8006db4:	2e00      	cmp	r6, #0
 8006db6:	dc7a      	bgt.n	8006eae <_strtod_l+0x81e>
 8006db8:	9b06      	ldr	r3, [sp, #24]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	dd08      	ble.n	8006dd0 <_strtod_l+0x740>
 8006dbe:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006dc0:	9905      	ldr	r1, [sp, #20]
 8006dc2:	4648      	mov	r0, r9
 8006dc4:	f001 fe4c 	bl	8008a60 <__pow5mult>
 8006dc8:	9005      	str	r0, [sp, #20]
 8006dca:	2800      	cmp	r0, #0
 8006dcc:	f43f ae7e 	beq.w	8006acc <_strtod_l+0x43c>
 8006dd0:	2d00      	cmp	r5, #0
 8006dd2:	dd08      	ble.n	8006de6 <_strtod_l+0x756>
 8006dd4:	462a      	mov	r2, r5
 8006dd6:	9905      	ldr	r1, [sp, #20]
 8006dd8:	4648      	mov	r0, r9
 8006dda:	f001 fe8f 	bl	8008afc <__lshift>
 8006dde:	9005      	str	r0, [sp, #20]
 8006de0:	2800      	cmp	r0, #0
 8006de2:	f43f ae73 	beq.w	8006acc <_strtod_l+0x43c>
 8006de6:	2f00      	cmp	r7, #0
 8006de8:	dd08      	ble.n	8006dfc <_strtod_l+0x76c>
 8006dea:	4641      	mov	r1, r8
 8006dec:	463a      	mov	r2, r7
 8006dee:	4648      	mov	r0, r9
 8006df0:	f001 fe84 	bl	8008afc <__lshift>
 8006df4:	4680      	mov	r8, r0
 8006df6:	2800      	cmp	r0, #0
 8006df8:	f43f ae68 	beq.w	8006acc <_strtod_l+0x43c>
 8006dfc:	9a05      	ldr	r2, [sp, #20]
 8006dfe:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006e00:	4648      	mov	r0, r9
 8006e02:	f001 fee9 	bl	8008bd8 <__mdiff>
 8006e06:	4604      	mov	r4, r0
 8006e08:	2800      	cmp	r0, #0
 8006e0a:	f43f ae5f 	beq.w	8006acc <_strtod_l+0x43c>
 8006e0e:	68c3      	ldr	r3, [r0, #12]
 8006e10:	930c      	str	r3, [sp, #48]	; 0x30
 8006e12:	2300      	movs	r3, #0
 8006e14:	60c3      	str	r3, [r0, #12]
 8006e16:	4641      	mov	r1, r8
 8006e18:	f001 fec4 	bl	8008ba4 <__mcmp>
 8006e1c:	2800      	cmp	r0, #0
 8006e1e:	da55      	bge.n	8006ecc <_strtod_l+0x83c>
 8006e20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e22:	b9e3      	cbnz	r3, 8006e5e <_strtod_l+0x7ce>
 8006e24:	f1ba 0f00 	cmp.w	sl, #0
 8006e28:	d119      	bne.n	8006e5e <_strtod_l+0x7ce>
 8006e2a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006e2e:	b9b3      	cbnz	r3, 8006e5e <_strtod_l+0x7ce>
 8006e30:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006e34:	0d1b      	lsrs	r3, r3, #20
 8006e36:	051b      	lsls	r3, r3, #20
 8006e38:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006e3c:	d90f      	bls.n	8006e5e <_strtod_l+0x7ce>
 8006e3e:	6963      	ldr	r3, [r4, #20]
 8006e40:	b913      	cbnz	r3, 8006e48 <_strtod_l+0x7b8>
 8006e42:	6923      	ldr	r3, [r4, #16]
 8006e44:	2b01      	cmp	r3, #1
 8006e46:	dd0a      	ble.n	8006e5e <_strtod_l+0x7ce>
 8006e48:	4621      	mov	r1, r4
 8006e4a:	2201      	movs	r2, #1
 8006e4c:	4648      	mov	r0, r9
 8006e4e:	f001 fe55 	bl	8008afc <__lshift>
 8006e52:	4641      	mov	r1, r8
 8006e54:	4604      	mov	r4, r0
 8006e56:	f001 fea5 	bl	8008ba4 <__mcmp>
 8006e5a:	2800      	cmp	r0, #0
 8006e5c:	dc67      	bgt.n	8006f2e <_strtod_l+0x89e>
 8006e5e:	9b04      	ldr	r3, [sp, #16]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d171      	bne.n	8006f48 <_strtod_l+0x8b8>
 8006e64:	e63d      	b.n	8006ae2 <_strtod_l+0x452>
 8006e66:	f018 0f01 	tst.w	r8, #1
 8006e6a:	d004      	beq.n	8006e76 <_strtod_l+0x7e6>
 8006e6c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006e70:	f7f9 fbe2 	bl	8000638 <__aeabi_dmul>
 8006e74:	2301      	movs	r3, #1
 8006e76:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006e7a:	3508      	adds	r5, #8
 8006e7c:	e6e5      	b.n	8006c4a <_strtod_l+0x5ba>
 8006e7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006e82:	fa02 f303 	lsl.w	r3, r2, r3
 8006e86:	ea03 0a0a 	and.w	sl, r3, sl
 8006e8a:	e6ff      	b.n	8006c8c <_strtod_l+0x5fc>
 8006e8c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8006e90:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8006e94:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8006e98:	36e2      	adds	r6, #226	; 0xe2
 8006e9a:	fa01 f306 	lsl.w	r3, r1, r6
 8006e9e:	930a      	str	r3, [sp, #40]	; 0x28
 8006ea0:	910f      	str	r1, [sp, #60]	; 0x3c
 8006ea2:	e75d      	b.n	8006d60 <_strtod_l+0x6d0>
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	930a      	str	r3, [sp, #40]	; 0x28
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	930f      	str	r3, [sp, #60]	; 0x3c
 8006eac:	e758      	b.n	8006d60 <_strtod_l+0x6d0>
 8006eae:	4632      	mov	r2, r6
 8006eb0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006eb2:	4648      	mov	r0, r9
 8006eb4:	f001 fe22 	bl	8008afc <__lshift>
 8006eb8:	901c      	str	r0, [sp, #112]	; 0x70
 8006eba:	2800      	cmp	r0, #0
 8006ebc:	f47f af7c 	bne.w	8006db8 <_strtod_l+0x728>
 8006ec0:	e604      	b.n	8006acc <_strtod_l+0x43c>
 8006ec2:	bf00      	nop
 8006ec4:	080094b8 	.word	0x080094b8
 8006ec8:	fffffc02 	.word	0xfffffc02
 8006ecc:	465d      	mov	r5, fp
 8006ece:	f040 8086 	bne.w	8006fde <_strtod_l+0x94e>
 8006ed2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006ed4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006ed8:	b32a      	cbz	r2, 8006f26 <_strtod_l+0x896>
 8006eda:	4aaf      	ldr	r2, [pc, #700]	; (8007198 <_strtod_l+0xb08>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d153      	bne.n	8006f88 <_strtod_l+0x8f8>
 8006ee0:	9b04      	ldr	r3, [sp, #16]
 8006ee2:	4650      	mov	r0, sl
 8006ee4:	b1d3      	cbz	r3, 8006f1c <_strtod_l+0x88c>
 8006ee6:	4aad      	ldr	r2, [pc, #692]	; (800719c <_strtod_l+0xb0c>)
 8006ee8:	402a      	ands	r2, r5
 8006eea:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8006eee:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006ef2:	d816      	bhi.n	8006f22 <_strtod_l+0x892>
 8006ef4:	0d12      	lsrs	r2, r2, #20
 8006ef6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006efa:	fa01 f303 	lsl.w	r3, r1, r3
 8006efe:	4298      	cmp	r0, r3
 8006f00:	d142      	bne.n	8006f88 <_strtod_l+0x8f8>
 8006f02:	4ba7      	ldr	r3, [pc, #668]	; (80071a0 <_strtod_l+0xb10>)
 8006f04:	429d      	cmp	r5, r3
 8006f06:	d102      	bne.n	8006f0e <_strtod_l+0x87e>
 8006f08:	3001      	adds	r0, #1
 8006f0a:	f43f addf 	beq.w	8006acc <_strtod_l+0x43c>
 8006f0e:	4ba3      	ldr	r3, [pc, #652]	; (800719c <_strtod_l+0xb0c>)
 8006f10:	402b      	ands	r3, r5
 8006f12:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8006f16:	f04f 0a00 	mov.w	sl, #0
 8006f1a:	e7a0      	b.n	8006e5e <_strtod_l+0x7ce>
 8006f1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006f20:	e7ed      	b.n	8006efe <_strtod_l+0x86e>
 8006f22:	460b      	mov	r3, r1
 8006f24:	e7eb      	b.n	8006efe <_strtod_l+0x86e>
 8006f26:	bb7b      	cbnz	r3, 8006f88 <_strtod_l+0x8f8>
 8006f28:	f1ba 0f00 	cmp.w	sl, #0
 8006f2c:	d12c      	bne.n	8006f88 <_strtod_l+0x8f8>
 8006f2e:	9904      	ldr	r1, [sp, #16]
 8006f30:	4a9a      	ldr	r2, [pc, #616]	; (800719c <_strtod_l+0xb0c>)
 8006f32:	465b      	mov	r3, fp
 8006f34:	b1f1      	cbz	r1, 8006f74 <_strtod_l+0x8e4>
 8006f36:	ea02 010b 	and.w	r1, r2, fp
 8006f3a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006f3e:	dc19      	bgt.n	8006f74 <_strtod_l+0x8e4>
 8006f40:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006f44:	f77f ae5b 	ble.w	8006bfe <_strtod_l+0x56e>
 8006f48:	4a96      	ldr	r2, [pc, #600]	; (80071a4 <_strtod_l+0xb14>)
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8006f50:	4650      	mov	r0, sl
 8006f52:	4659      	mov	r1, fp
 8006f54:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006f58:	f7f9 fb6e 	bl	8000638 <__aeabi_dmul>
 8006f5c:	4682      	mov	sl, r0
 8006f5e:	468b      	mov	fp, r1
 8006f60:	2900      	cmp	r1, #0
 8006f62:	f47f adbe 	bne.w	8006ae2 <_strtod_l+0x452>
 8006f66:	2800      	cmp	r0, #0
 8006f68:	f47f adbb 	bne.w	8006ae2 <_strtod_l+0x452>
 8006f6c:	2322      	movs	r3, #34	; 0x22
 8006f6e:	f8c9 3000 	str.w	r3, [r9]
 8006f72:	e5b6      	b.n	8006ae2 <_strtod_l+0x452>
 8006f74:	4013      	ands	r3, r2
 8006f76:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006f7a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006f7e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006f82:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8006f86:	e76a      	b.n	8006e5e <_strtod_l+0x7ce>
 8006f88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f8a:	b193      	cbz	r3, 8006fb2 <_strtod_l+0x922>
 8006f8c:	422b      	tst	r3, r5
 8006f8e:	f43f af66 	beq.w	8006e5e <_strtod_l+0x7ce>
 8006f92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f94:	9a04      	ldr	r2, [sp, #16]
 8006f96:	4650      	mov	r0, sl
 8006f98:	4659      	mov	r1, fp
 8006f9a:	b173      	cbz	r3, 8006fba <_strtod_l+0x92a>
 8006f9c:	f7ff fb5c 	bl	8006658 <sulp>
 8006fa0:	4602      	mov	r2, r0
 8006fa2:	460b      	mov	r3, r1
 8006fa4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006fa8:	f7f9 f990 	bl	80002cc <__adddf3>
 8006fac:	4682      	mov	sl, r0
 8006fae:	468b      	mov	fp, r1
 8006fb0:	e755      	b.n	8006e5e <_strtod_l+0x7ce>
 8006fb2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006fb4:	ea13 0f0a 	tst.w	r3, sl
 8006fb8:	e7e9      	b.n	8006f8e <_strtod_l+0x8fe>
 8006fba:	f7ff fb4d 	bl	8006658 <sulp>
 8006fbe:	4602      	mov	r2, r0
 8006fc0:	460b      	mov	r3, r1
 8006fc2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006fc6:	f7f9 f97f 	bl	80002c8 <__aeabi_dsub>
 8006fca:	2200      	movs	r2, #0
 8006fcc:	2300      	movs	r3, #0
 8006fce:	4682      	mov	sl, r0
 8006fd0:	468b      	mov	fp, r1
 8006fd2:	f7f9 fd99 	bl	8000b08 <__aeabi_dcmpeq>
 8006fd6:	2800      	cmp	r0, #0
 8006fd8:	f47f ae11 	bne.w	8006bfe <_strtod_l+0x56e>
 8006fdc:	e73f      	b.n	8006e5e <_strtod_l+0x7ce>
 8006fde:	4641      	mov	r1, r8
 8006fe0:	4620      	mov	r0, r4
 8006fe2:	f001 ff1c 	bl	8008e1e <__ratio>
 8006fe6:	ec57 6b10 	vmov	r6, r7, d0
 8006fea:	2200      	movs	r2, #0
 8006fec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006ff0:	ee10 0a10 	vmov	r0, s0
 8006ff4:	4639      	mov	r1, r7
 8006ff6:	f7f9 fd9b 	bl	8000b30 <__aeabi_dcmple>
 8006ffa:	2800      	cmp	r0, #0
 8006ffc:	d077      	beq.n	80070ee <_strtod_l+0xa5e>
 8006ffe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007000:	2b00      	cmp	r3, #0
 8007002:	d04a      	beq.n	800709a <_strtod_l+0xa0a>
 8007004:	4b68      	ldr	r3, [pc, #416]	; (80071a8 <_strtod_l+0xb18>)
 8007006:	2200      	movs	r2, #0
 8007008:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800700c:	4f66      	ldr	r7, [pc, #408]	; (80071a8 <_strtod_l+0xb18>)
 800700e:	2600      	movs	r6, #0
 8007010:	4b62      	ldr	r3, [pc, #392]	; (800719c <_strtod_l+0xb0c>)
 8007012:	402b      	ands	r3, r5
 8007014:	930f      	str	r3, [sp, #60]	; 0x3c
 8007016:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007018:	4b64      	ldr	r3, [pc, #400]	; (80071ac <_strtod_l+0xb1c>)
 800701a:	429a      	cmp	r2, r3
 800701c:	f040 80ce 	bne.w	80071bc <_strtod_l+0xb2c>
 8007020:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007024:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007028:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800702c:	ec4b ab10 	vmov	d0, sl, fp
 8007030:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8007034:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007038:	f001 fe2c 	bl	8008c94 <__ulp>
 800703c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007040:	ec53 2b10 	vmov	r2, r3, d0
 8007044:	f7f9 faf8 	bl	8000638 <__aeabi_dmul>
 8007048:	4652      	mov	r2, sl
 800704a:	465b      	mov	r3, fp
 800704c:	f7f9 f93e 	bl	80002cc <__adddf3>
 8007050:	460b      	mov	r3, r1
 8007052:	4952      	ldr	r1, [pc, #328]	; (800719c <_strtod_l+0xb0c>)
 8007054:	4a56      	ldr	r2, [pc, #344]	; (80071b0 <_strtod_l+0xb20>)
 8007056:	4019      	ands	r1, r3
 8007058:	4291      	cmp	r1, r2
 800705a:	4682      	mov	sl, r0
 800705c:	d95b      	bls.n	8007116 <_strtod_l+0xa86>
 800705e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007060:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007064:	4293      	cmp	r3, r2
 8007066:	d103      	bne.n	8007070 <_strtod_l+0x9e0>
 8007068:	9b08      	ldr	r3, [sp, #32]
 800706a:	3301      	adds	r3, #1
 800706c:	f43f ad2e 	beq.w	8006acc <_strtod_l+0x43c>
 8007070:	f8df b12c 	ldr.w	fp, [pc, #300]	; 80071a0 <_strtod_l+0xb10>
 8007074:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8007078:	991c      	ldr	r1, [sp, #112]	; 0x70
 800707a:	4648      	mov	r0, r9
 800707c:	f001 fb73 	bl	8008766 <_Bfree>
 8007080:	9905      	ldr	r1, [sp, #20]
 8007082:	4648      	mov	r0, r9
 8007084:	f001 fb6f 	bl	8008766 <_Bfree>
 8007088:	4641      	mov	r1, r8
 800708a:	4648      	mov	r0, r9
 800708c:	f001 fb6b 	bl	8008766 <_Bfree>
 8007090:	4621      	mov	r1, r4
 8007092:	4648      	mov	r0, r9
 8007094:	f001 fb67 	bl	8008766 <_Bfree>
 8007098:	e619      	b.n	8006cce <_strtod_l+0x63e>
 800709a:	f1ba 0f00 	cmp.w	sl, #0
 800709e:	d11a      	bne.n	80070d6 <_strtod_l+0xa46>
 80070a0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80070a4:	b9eb      	cbnz	r3, 80070e2 <_strtod_l+0xa52>
 80070a6:	2200      	movs	r2, #0
 80070a8:	4b3f      	ldr	r3, [pc, #252]	; (80071a8 <_strtod_l+0xb18>)
 80070aa:	4630      	mov	r0, r6
 80070ac:	4639      	mov	r1, r7
 80070ae:	f7f9 fd35 	bl	8000b1c <__aeabi_dcmplt>
 80070b2:	b9c8      	cbnz	r0, 80070e8 <_strtod_l+0xa58>
 80070b4:	4630      	mov	r0, r6
 80070b6:	4639      	mov	r1, r7
 80070b8:	2200      	movs	r2, #0
 80070ba:	4b3e      	ldr	r3, [pc, #248]	; (80071b4 <_strtod_l+0xb24>)
 80070bc:	f7f9 fabc 	bl	8000638 <__aeabi_dmul>
 80070c0:	4606      	mov	r6, r0
 80070c2:	460f      	mov	r7, r1
 80070c4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80070c8:	9618      	str	r6, [sp, #96]	; 0x60
 80070ca:	9319      	str	r3, [sp, #100]	; 0x64
 80070cc:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 80070d0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80070d4:	e79c      	b.n	8007010 <_strtod_l+0x980>
 80070d6:	f1ba 0f01 	cmp.w	sl, #1
 80070da:	d102      	bne.n	80070e2 <_strtod_l+0xa52>
 80070dc:	2d00      	cmp	r5, #0
 80070de:	f43f ad8e 	beq.w	8006bfe <_strtod_l+0x56e>
 80070e2:	2200      	movs	r2, #0
 80070e4:	4b34      	ldr	r3, [pc, #208]	; (80071b8 <_strtod_l+0xb28>)
 80070e6:	e78f      	b.n	8007008 <_strtod_l+0x978>
 80070e8:	2600      	movs	r6, #0
 80070ea:	4f32      	ldr	r7, [pc, #200]	; (80071b4 <_strtod_l+0xb24>)
 80070ec:	e7ea      	b.n	80070c4 <_strtod_l+0xa34>
 80070ee:	4b31      	ldr	r3, [pc, #196]	; (80071b4 <_strtod_l+0xb24>)
 80070f0:	4630      	mov	r0, r6
 80070f2:	4639      	mov	r1, r7
 80070f4:	2200      	movs	r2, #0
 80070f6:	f7f9 fa9f 	bl	8000638 <__aeabi_dmul>
 80070fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80070fc:	4606      	mov	r6, r0
 80070fe:	460f      	mov	r7, r1
 8007100:	b933      	cbnz	r3, 8007110 <_strtod_l+0xa80>
 8007102:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007106:	9010      	str	r0, [sp, #64]	; 0x40
 8007108:	9311      	str	r3, [sp, #68]	; 0x44
 800710a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800710e:	e7df      	b.n	80070d0 <_strtod_l+0xa40>
 8007110:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8007114:	e7f9      	b.n	800710a <_strtod_l+0xa7a>
 8007116:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800711a:	9b04      	ldr	r3, [sp, #16]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d1ab      	bne.n	8007078 <_strtod_l+0x9e8>
 8007120:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007124:	0d1b      	lsrs	r3, r3, #20
 8007126:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007128:	051b      	lsls	r3, r3, #20
 800712a:	429a      	cmp	r2, r3
 800712c:	465d      	mov	r5, fp
 800712e:	d1a3      	bne.n	8007078 <_strtod_l+0x9e8>
 8007130:	4639      	mov	r1, r7
 8007132:	4630      	mov	r0, r6
 8007134:	f7f9 fd30 	bl	8000b98 <__aeabi_d2iz>
 8007138:	f7f9 fa14 	bl	8000564 <__aeabi_i2d>
 800713c:	460b      	mov	r3, r1
 800713e:	4602      	mov	r2, r0
 8007140:	4639      	mov	r1, r7
 8007142:	4630      	mov	r0, r6
 8007144:	f7f9 f8c0 	bl	80002c8 <__aeabi_dsub>
 8007148:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800714a:	4606      	mov	r6, r0
 800714c:	460f      	mov	r7, r1
 800714e:	b933      	cbnz	r3, 800715e <_strtod_l+0xace>
 8007150:	f1ba 0f00 	cmp.w	sl, #0
 8007154:	d103      	bne.n	800715e <_strtod_l+0xace>
 8007156:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800715a:	2d00      	cmp	r5, #0
 800715c:	d06d      	beq.n	800723a <_strtod_l+0xbaa>
 800715e:	a30a      	add	r3, pc, #40	; (adr r3, 8007188 <_strtod_l+0xaf8>)
 8007160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007164:	4630      	mov	r0, r6
 8007166:	4639      	mov	r1, r7
 8007168:	f7f9 fcd8 	bl	8000b1c <__aeabi_dcmplt>
 800716c:	2800      	cmp	r0, #0
 800716e:	f47f acb8 	bne.w	8006ae2 <_strtod_l+0x452>
 8007172:	a307      	add	r3, pc, #28	; (adr r3, 8007190 <_strtod_l+0xb00>)
 8007174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007178:	4630      	mov	r0, r6
 800717a:	4639      	mov	r1, r7
 800717c:	f7f9 fcec 	bl	8000b58 <__aeabi_dcmpgt>
 8007180:	2800      	cmp	r0, #0
 8007182:	f43f af79 	beq.w	8007078 <_strtod_l+0x9e8>
 8007186:	e4ac      	b.n	8006ae2 <_strtod_l+0x452>
 8007188:	94a03595 	.word	0x94a03595
 800718c:	3fdfffff 	.word	0x3fdfffff
 8007190:	35afe535 	.word	0x35afe535
 8007194:	3fe00000 	.word	0x3fe00000
 8007198:	000fffff 	.word	0x000fffff
 800719c:	7ff00000 	.word	0x7ff00000
 80071a0:	7fefffff 	.word	0x7fefffff
 80071a4:	39500000 	.word	0x39500000
 80071a8:	3ff00000 	.word	0x3ff00000
 80071ac:	7fe00000 	.word	0x7fe00000
 80071b0:	7c9fffff 	.word	0x7c9fffff
 80071b4:	3fe00000 	.word	0x3fe00000
 80071b8:	bff00000 	.word	0xbff00000
 80071bc:	9b04      	ldr	r3, [sp, #16]
 80071be:	b333      	cbz	r3, 800720e <_strtod_l+0xb7e>
 80071c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80071c2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80071c6:	d822      	bhi.n	800720e <_strtod_l+0xb7e>
 80071c8:	a327      	add	r3, pc, #156	; (adr r3, 8007268 <_strtod_l+0xbd8>)
 80071ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ce:	4630      	mov	r0, r6
 80071d0:	4639      	mov	r1, r7
 80071d2:	f7f9 fcad 	bl	8000b30 <__aeabi_dcmple>
 80071d6:	b1a0      	cbz	r0, 8007202 <_strtod_l+0xb72>
 80071d8:	4639      	mov	r1, r7
 80071da:	4630      	mov	r0, r6
 80071dc:	f7f9 fd04 	bl	8000be8 <__aeabi_d2uiz>
 80071e0:	2800      	cmp	r0, #0
 80071e2:	bf08      	it	eq
 80071e4:	2001      	moveq	r0, #1
 80071e6:	f7f9 f9ad 	bl	8000544 <__aeabi_ui2d>
 80071ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80071ec:	4606      	mov	r6, r0
 80071ee:	460f      	mov	r7, r1
 80071f0:	bb03      	cbnz	r3, 8007234 <_strtod_l+0xba4>
 80071f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80071f6:	9012      	str	r0, [sp, #72]	; 0x48
 80071f8:	9313      	str	r3, [sp, #76]	; 0x4c
 80071fa:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80071fe:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007202:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007204:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007206:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800720a:	1a9b      	subs	r3, r3, r2
 800720c:	930b      	str	r3, [sp, #44]	; 0x2c
 800720e:	ed9d 0b08 	vldr	d0, [sp, #32]
 8007212:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8007216:	f001 fd3d 	bl	8008c94 <__ulp>
 800721a:	4650      	mov	r0, sl
 800721c:	ec53 2b10 	vmov	r2, r3, d0
 8007220:	4659      	mov	r1, fp
 8007222:	f7f9 fa09 	bl	8000638 <__aeabi_dmul>
 8007226:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800722a:	f7f9 f84f 	bl	80002cc <__adddf3>
 800722e:	4682      	mov	sl, r0
 8007230:	468b      	mov	fp, r1
 8007232:	e772      	b.n	800711a <_strtod_l+0xa8a>
 8007234:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8007238:	e7df      	b.n	80071fa <_strtod_l+0xb6a>
 800723a:	a30d      	add	r3, pc, #52	; (adr r3, 8007270 <_strtod_l+0xbe0>)
 800723c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007240:	f7f9 fc6c 	bl	8000b1c <__aeabi_dcmplt>
 8007244:	e79c      	b.n	8007180 <_strtod_l+0xaf0>
 8007246:	2300      	movs	r3, #0
 8007248:	930d      	str	r3, [sp, #52]	; 0x34
 800724a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800724c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800724e:	6013      	str	r3, [r2, #0]
 8007250:	f7ff ba61 	b.w	8006716 <_strtod_l+0x86>
 8007254:	2b65      	cmp	r3, #101	; 0x65
 8007256:	f04f 0200 	mov.w	r2, #0
 800725a:	f43f ab4e 	beq.w	80068fa <_strtod_l+0x26a>
 800725e:	2101      	movs	r1, #1
 8007260:	4614      	mov	r4, r2
 8007262:	9104      	str	r1, [sp, #16]
 8007264:	f7ff bacb 	b.w	80067fe <_strtod_l+0x16e>
 8007268:	ffc00000 	.word	0xffc00000
 800726c:	41dfffff 	.word	0x41dfffff
 8007270:	94a03595 	.word	0x94a03595
 8007274:	3fcfffff 	.word	0x3fcfffff

08007278 <_strtod_r>:
 8007278:	4b05      	ldr	r3, [pc, #20]	; (8007290 <_strtod_r+0x18>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	b410      	push	{r4}
 800727e:	6a1b      	ldr	r3, [r3, #32]
 8007280:	4c04      	ldr	r4, [pc, #16]	; (8007294 <_strtod_r+0x1c>)
 8007282:	2b00      	cmp	r3, #0
 8007284:	bf08      	it	eq
 8007286:	4623      	moveq	r3, r4
 8007288:	f85d 4b04 	ldr.w	r4, [sp], #4
 800728c:	f7ff ba00 	b.w	8006690 <_strtod_l>
 8007290:	2000000c 	.word	0x2000000c
 8007294:	20000070 	.word	0x20000070

08007298 <_strtol_l.isra.0>:
 8007298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800729c:	4680      	mov	r8, r0
 800729e:	4689      	mov	r9, r1
 80072a0:	4692      	mov	sl, r2
 80072a2:	461e      	mov	r6, r3
 80072a4:	460f      	mov	r7, r1
 80072a6:	463d      	mov	r5, r7
 80072a8:	9808      	ldr	r0, [sp, #32]
 80072aa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80072ae:	f001 f9ed 	bl	800868c <__locale_ctype_ptr_l>
 80072b2:	4420      	add	r0, r4
 80072b4:	7843      	ldrb	r3, [r0, #1]
 80072b6:	f013 0308 	ands.w	r3, r3, #8
 80072ba:	d132      	bne.n	8007322 <_strtol_l.isra.0+0x8a>
 80072bc:	2c2d      	cmp	r4, #45	; 0x2d
 80072be:	d132      	bne.n	8007326 <_strtol_l.isra.0+0x8e>
 80072c0:	787c      	ldrb	r4, [r7, #1]
 80072c2:	1cbd      	adds	r5, r7, #2
 80072c4:	2201      	movs	r2, #1
 80072c6:	2e00      	cmp	r6, #0
 80072c8:	d05d      	beq.n	8007386 <_strtol_l.isra.0+0xee>
 80072ca:	2e10      	cmp	r6, #16
 80072cc:	d109      	bne.n	80072e2 <_strtol_l.isra.0+0x4a>
 80072ce:	2c30      	cmp	r4, #48	; 0x30
 80072d0:	d107      	bne.n	80072e2 <_strtol_l.isra.0+0x4a>
 80072d2:	782b      	ldrb	r3, [r5, #0]
 80072d4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80072d8:	2b58      	cmp	r3, #88	; 0x58
 80072da:	d14f      	bne.n	800737c <_strtol_l.isra.0+0xe4>
 80072dc:	786c      	ldrb	r4, [r5, #1]
 80072de:	2610      	movs	r6, #16
 80072e0:	3502      	adds	r5, #2
 80072e2:	2a00      	cmp	r2, #0
 80072e4:	bf14      	ite	ne
 80072e6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80072ea:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80072ee:	2700      	movs	r7, #0
 80072f0:	fbb1 fcf6 	udiv	ip, r1, r6
 80072f4:	4638      	mov	r0, r7
 80072f6:	fb06 1e1c 	mls	lr, r6, ip, r1
 80072fa:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80072fe:	2b09      	cmp	r3, #9
 8007300:	d817      	bhi.n	8007332 <_strtol_l.isra.0+0x9a>
 8007302:	461c      	mov	r4, r3
 8007304:	42a6      	cmp	r6, r4
 8007306:	dd23      	ble.n	8007350 <_strtol_l.isra.0+0xb8>
 8007308:	1c7b      	adds	r3, r7, #1
 800730a:	d007      	beq.n	800731c <_strtol_l.isra.0+0x84>
 800730c:	4584      	cmp	ip, r0
 800730e:	d31c      	bcc.n	800734a <_strtol_l.isra.0+0xb2>
 8007310:	d101      	bne.n	8007316 <_strtol_l.isra.0+0x7e>
 8007312:	45a6      	cmp	lr, r4
 8007314:	db19      	blt.n	800734a <_strtol_l.isra.0+0xb2>
 8007316:	fb00 4006 	mla	r0, r0, r6, r4
 800731a:	2701      	movs	r7, #1
 800731c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007320:	e7eb      	b.n	80072fa <_strtol_l.isra.0+0x62>
 8007322:	462f      	mov	r7, r5
 8007324:	e7bf      	b.n	80072a6 <_strtol_l.isra.0+0xe>
 8007326:	2c2b      	cmp	r4, #43	; 0x2b
 8007328:	bf04      	itt	eq
 800732a:	1cbd      	addeq	r5, r7, #2
 800732c:	787c      	ldrbeq	r4, [r7, #1]
 800732e:	461a      	mov	r2, r3
 8007330:	e7c9      	b.n	80072c6 <_strtol_l.isra.0+0x2e>
 8007332:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8007336:	2b19      	cmp	r3, #25
 8007338:	d801      	bhi.n	800733e <_strtol_l.isra.0+0xa6>
 800733a:	3c37      	subs	r4, #55	; 0x37
 800733c:	e7e2      	b.n	8007304 <_strtol_l.isra.0+0x6c>
 800733e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8007342:	2b19      	cmp	r3, #25
 8007344:	d804      	bhi.n	8007350 <_strtol_l.isra.0+0xb8>
 8007346:	3c57      	subs	r4, #87	; 0x57
 8007348:	e7dc      	b.n	8007304 <_strtol_l.isra.0+0x6c>
 800734a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800734e:	e7e5      	b.n	800731c <_strtol_l.isra.0+0x84>
 8007350:	1c7b      	adds	r3, r7, #1
 8007352:	d108      	bne.n	8007366 <_strtol_l.isra.0+0xce>
 8007354:	2322      	movs	r3, #34	; 0x22
 8007356:	f8c8 3000 	str.w	r3, [r8]
 800735a:	4608      	mov	r0, r1
 800735c:	f1ba 0f00 	cmp.w	sl, #0
 8007360:	d107      	bne.n	8007372 <_strtol_l.isra.0+0xda>
 8007362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007366:	b102      	cbz	r2, 800736a <_strtol_l.isra.0+0xd2>
 8007368:	4240      	negs	r0, r0
 800736a:	f1ba 0f00 	cmp.w	sl, #0
 800736e:	d0f8      	beq.n	8007362 <_strtol_l.isra.0+0xca>
 8007370:	b10f      	cbz	r7, 8007376 <_strtol_l.isra.0+0xde>
 8007372:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8007376:	f8ca 9000 	str.w	r9, [sl]
 800737a:	e7f2      	b.n	8007362 <_strtol_l.isra.0+0xca>
 800737c:	2430      	movs	r4, #48	; 0x30
 800737e:	2e00      	cmp	r6, #0
 8007380:	d1af      	bne.n	80072e2 <_strtol_l.isra.0+0x4a>
 8007382:	2608      	movs	r6, #8
 8007384:	e7ad      	b.n	80072e2 <_strtol_l.isra.0+0x4a>
 8007386:	2c30      	cmp	r4, #48	; 0x30
 8007388:	d0a3      	beq.n	80072d2 <_strtol_l.isra.0+0x3a>
 800738a:	260a      	movs	r6, #10
 800738c:	e7a9      	b.n	80072e2 <_strtol_l.isra.0+0x4a>
	...

08007390 <_strtol_r>:
 8007390:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007392:	4c06      	ldr	r4, [pc, #24]	; (80073ac <_strtol_r+0x1c>)
 8007394:	4d06      	ldr	r5, [pc, #24]	; (80073b0 <_strtol_r+0x20>)
 8007396:	6824      	ldr	r4, [r4, #0]
 8007398:	6a24      	ldr	r4, [r4, #32]
 800739a:	2c00      	cmp	r4, #0
 800739c:	bf08      	it	eq
 800739e:	462c      	moveq	r4, r5
 80073a0:	9400      	str	r4, [sp, #0]
 80073a2:	f7ff ff79 	bl	8007298 <_strtol_l.isra.0>
 80073a6:	b003      	add	sp, #12
 80073a8:	bd30      	pop	{r4, r5, pc}
 80073aa:	bf00      	nop
 80073ac:	2000000c 	.word	0x2000000c
 80073b0:	20000070 	.word	0x20000070

080073b4 <quorem>:
 80073b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073b8:	6903      	ldr	r3, [r0, #16]
 80073ba:	690c      	ldr	r4, [r1, #16]
 80073bc:	42a3      	cmp	r3, r4
 80073be:	4680      	mov	r8, r0
 80073c0:	f2c0 8082 	blt.w	80074c8 <quorem+0x114>
 80073c4:	3c01      	subs	r4, #1
 80073c6:	f101 0714 	add.w	r7, r1, #20
 80073ca:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80073ce:	f100 0614 	add.w	r6, r0, #20
 80073d2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80073d6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80073da:	eb06 030c 	add.w	r3, r6, ip
 80073de:	3501      	adds	r5, #1
 80073e0:	eb07 090c 	add.w	r9, r7, ip
 80073e4:	9301      	str	r3, [sp, #4]
 80073e6:	fbb0 f5f5 	udiv	r5, r0, r5
 80073ea:	b395      	cbz	r5, 8007452 <quorem+0x9e>
 80073ec:	f04f 0a00 	mov.w	sl, #0
 80073f0:	4638      	mov	r0, r7
 80073f2:	46b6      	mov	lr, r6
 80073f4:	46d3      	mov	fp, sl
 80073f6:	f850 2b04 	ldr.w	r2, [r0], #4
 80073fa:	b293      	uxth	r3, r2
 80073fc:	fb05 a303 	mla	r3, r5, r3, sl
 8007400:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007404:	b29b      	uxth	r3, r3
 8007406:	ebab 0303 	sub.w	r3, fp, r3
 800740a:	0c12      	lsrs	r2, r2, #16
 800740c:	f8de b000 	ldr.w	fp, [lr]
 8007410:	fb05 a202 	mla	r2, r5, r2, sl
 8007414:	fa13 f38b 	uxtah	r3, r3, fp
 8007418:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800741c:	fa1f fb82 	uxth.w	fp, r2
 8007420:	f8de 2000 	ldr.w	r2, [lr]
 8007424:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007428:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800742c:	b29b      	uxth	r3, r3
 800742e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007432:	4581      	cmp	r9, r0
 8007434:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007438:	f84e 3b04 	str.w	r3, [lr], #4
 800743c:	d2db      	bcs.n	80073f6 <quorem+0x42>
 800743e:	f856 300c 	ldr.w	r3, [r6, ip]
 8007442:	b933      	cbnz	r3, 8007452 <quorem+0x9e>
 8007444:	9b01      	ldr	r3, [sp, #4]
 8007446:	3b04      	subs	r3, #4
 8007448:	429e      	cmp	r6, r3
 800744a:	461a      	mov	r2, r3
 800744c:	d330      	bcc.n	80074b0 <quorem+0xfc>
 800744e:	f8c8 4010 	str.w	r4, [r8, #16]
 8007452:	4640      	mov	r0, r8
 8007454:	f001 fba6 	bl	8008ba4 <__mcmp>
 8007458:	2800      	cmp	r0, #0
 800745a:	db25      	blt.n	80074a8 <quorem+0xf4>
 800745c:	3501      	adds	r5, #1
 800745e:	4630      	mov	r0, r6
 8007460:	f04f 0c00 	mov.w	ip, #0
 8007464:	f857 2b04 	ldr.w	r2, [r7], #4
 8007468:	f8d0 e000 	ldr.w	lr, [r0]
 800746c:	b293      	uxth	r3, r2
 800746e:	ebac 0303 	sub.w	r3, ip, r3
 8007472:	0c12      	lsrs	r2, r2, #16
 8007474:	fa13 f38e 	uxtah	r3, r3, lr
 8007478:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800747c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007480:	b29b      	uxth	r3, r3
 8007482:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007486:	45b9      	cmp	r9, r7
 8007488:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800748c:	f840 3b04 	str.w	r3, [r0], #4
 8007490:	d2e8      	bcs.n	8007464 <quorem+0xb0>
 8007492:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8007496:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800749a:	b92a      	cbnz	r2, 80074a8 <quorem+0xf4>
 800749c:	3b04      	subs	r3, #4
 800749e:	429e      	cmp	r6, r3
 80074a0:	461a      	mov	r2, r3
 80074a2:	d30b      	bcc.n	80074bc <quorem+0x108>
 80074a4:	f8c8 4010 	str.w	r4, [r8, #16]
 80074a8:	4628      	mov	r0, r5
 80074aa:	b003      	add	sp, #12
 80074ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074b0:	6812      	ldr	r2, [r2, #0]
 80074b2:	3b04      	subs	r3, #4
 80074b4:	2a00      	cmp	r2, #0
 80074b6:	d1ca      	bne.n	800744e <quorem+0x9a>
 80074b8:	3c01      	subs	r4, #1
 80074ba:	e7c5      	b.n	8007448 <quorem+0x94>
 80074bc:	6812      	ldr	r2, [r2, #0]
 80074be:	3b04      	subs	r3, #4
 80074c0:	2a00      	cmp	r2, #0
 80074c2:	d1ef      	bne.n	80074a4 <quorem+0xf0>
 80074c4:	3c01      	subs	r4, #1
 80074c6:	e7ea      	b.n	800749e <quorem+0xea>
 80074c8:	2000      	movs	r0, #0
 80074ca:	e7ee      	b.n	80074aa <quorem+0xf6>
 80074cc:	0000      	movs	r0, r0
	...

080074d0 <_dtoa_r>:
 80074d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074d4:	ec57 6b10 	vmov	r6, r7, d0
 80074d8:	b097      	sub	sp, #92	; 0x5c
 80074da:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80074dc:	9106      	str	r1, [sp, #24]
 80074de:	4604      	mov	r4, r0
 80074e0:	920b      	str	r2, [sp, #44]	; 0x2c
 80074e2:	9312      	str	r3, [sp, #72]	; 0x48
 80074e4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80074e8:	e9cd 6700 	strd	r6, r7, [sp]
 80074ec:	b93d      	cbnz	r5, 80074fe <_dtoa_r+0x2e>
 80074ee:	2010      	movs	r0, #16
 80074f0:	f001 f8e0 	bl	80086b4 <malloc>
 80074f4:	6260      	str	r0, [r4, #36]	; 0x24
 80074f6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80074fa:	6005      	str	r5, [r0, #0]
 80074fc:	60c5      	str	r5, [r0, #12]
 80074fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007500:	6819      	ldr	r1, [r3, #0]
 8007502:	b151      	cbz	r1, 800751a <_dtoa_r+0x4a>
 8007504:	685a      	ldr	r2, [r3, #4]
 8007506:	604a      	str	r2, [r1, #4]
 8007508:	2301      	movs	r3, #1
 800750a:	4093      	lsls	r3, r2
 800750c:	608b      	str	r3, [r1, #8]
 800750e:	4620      	mov	r0, r4
 8007510:	f001 f929 	bl	8008766 <_Bfree>
 8007514:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007516:	2200      	movs	r2, #0
 8007518:	601a      	str	r2, [r3, #0]
 800751a:	1e3b      	subs	r3, r7, #0
 800751c:	bfbb      	ittet	lt
 800751e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007522:	9301      	strlt	r3, [sp, #4]
 8007524:	2300      	movge	r3, #0
 8007526:	2201      	movlt	r2, #1
 8007528:	bfac      	ite	ge
 800752a:	f8c8 3000 	strge.w	r3, [r8]
 800752e:	f8c8 2000 	strlt.w	r2, [r8]
 8007532:	4baf      	ldr	r3, [pc, #700]	; (80077f0 <_dtoa_r+0x320>)
 8007534:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007538:	ea33 0308 	bics.w	r3, r3, r8
 800753c:	d114      	bne.n	8007568 <_dtoa_r+0x98>
 800753e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007540:	f242 730f 	movw	r3, #9999	; 0x270f
 8007544:	6013      	str	r3, [r2, #0]
 8007546:	9b00      	ldr	r3, [sp, #0]
 8007548:	b923      	cbnz	r3, 8007554 <_dtoa_r+0x84>
 800754a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800754e:	2800      	cmp	r0, #0
 8007550:	f000 8542 	beq.w	8007fd8 <_dtoa_r+0xb08>
 8007554:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007556:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8007804 <_dtoa_r+0x334>
 800755a:	2b00      	cmp	r3, #0
 800755c:	f000 8544 	beq.w	8007fe8 <_dtoa_r+0xb18>
 8007560:	f10b 0303 	add.w	r3, fp, #3
 8007564:	f000 bd3e 	b.w	8007fe4 <_dtoa_r+0xb14>
 8007568:	e9dd 6700 	ldrd	r6, r7, [sp]
 800756c:	2200      	movs	r2, #0
 800756e:	2300      	movs	r3, #0
 8007570:	4630      	mov	r0, r6
 8007572:	4639      	mov	r1, r7
 8007574:	f7f9 fac8 	bl	8000b08 <__aeabi_dcmpeq>
 8007578:	4681      	mov	r9, r0
 800757a:	b168      	cbz	r0, 8007598 <_dtoa_r+0xc8>
 800757c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800757e:	2301      	movs	r3, #1
 8007580:	6013      	str	r3, [r2, #0]
 8007582:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007584:	2b00      	cmp	r3, #0
 8007586:	f000 8524 	beq.w	8007fd2 <_dtoa_r+0xb02>
 800758a:	4b9a      	ldr	r3, [pc, #616]	; (80077f4 <_dtoa_r+0x324>)
 800758c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800758e:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8007592:	6013      	str	r3, [r2, #0]
 8007594:	f000 bd28 	b.w	8007fe8 <_dtoa_r+0xb18>
 8007598:	aa14      	add	r2, sp, #80	; 0x50
 800759a:	a915      	add	r1, sp, #84	; 0x54
 800759c:	ec47 6b10 	vmov	d0, r6, r7
 80075a0:	4620      	mov	r0, r4
 80075a2:	f001 fbed 	bl	8008d80 <__d2b>
 80075a6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80075aa:	9004      	str	r0, [sp, #16]
 80075ac:	2d00      	cmp	r5, #0
 80075ae:	d07c      	beq.n	80076aa <_dtoa_r+0x1da>
 80075b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80075b4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80075b8:	46b2      	mov	sl, r6
 80075ba:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80075be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80075c2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80075c6:	2200      	movs	r2, #0
 80075c8:	4b8b      	ldr	r3, [pc, #556]	; (80077f8 <_dtoa_r+0x328>)
 80075ca:	4650      	mov	r0, sl
 80075cc:	4659      	mov	r1, fp
 80075ce:	f7f8 fe7b 	bl	80002c8 <__aeabi_dsub>
 80075d2:	a381      	add	r3, pc, #516	; (adr r3, 80077d8 <_dtoa_r+0x308>)
 80075d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075d8:	f7f9 f82e 	bl	8000638 <__aeabi_dmul>
 80075dc:	a380      	add	r3, pc, #512	; (adr r3, 80077e0 <_dtoa_r+0x310>)
 80075de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075e2:	f7f8 fe73 	bl	80002cc <__adddf3>
 80075e6:	4606      	mov	r6, r0
 80075e8:	4628      	mov	r0, r5
 80075ea:	460f      	mov	r7, r1
 80075ec:	f7f8 ffba 	bl	8000564 <__aeabi_i2d>
 80075f0:	a37d      	add	r3, pc, #500	; (adr r3, 80077e8 <_dtoa_r+0x318>)
 80075f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075f6:	f7f9 f81f 	bl	8000638 <__aeabi_dmul>
 80075fa:	4602      	mov	r2, r0
 80075fc:	460b      	mov	r3, r1
 80075fe:	4630      	mov	r0, r6
 8007600:	4639      	mov	r1, r7
 8007602:	f7f8 fe63 	bl	80002cc <__adddf3>
 8007606:	4606      	mov	r6, r0
 8007608:	460f      	mov	r7, r1
 800760a:	f7f9 fac5 	bl	8000b98 <__aeabi_d2iz>
 800760e:	2200      	movs	r2, #0
 8007610:	4682      	mov	sl, r0
 8007612:	2300      	movs	r3, #0
 8007614:	4630      	mov	r0, r6
 8007616:	4639      	mov	r1, r7
 8007618:	f7f9 fa80 	bl	8000b1c <__aeabi_dcmplt>
 800761c:	b148      	cbz	r0, 8007632 <_dtoa_r+0x162>
 800761e:	4650      	mov	r0, sl
 8007620:	f7f8 ffa0 	bl	8000564 <__aeabi_i2d>
 8007624:	4632      	mov	r2, r6
 8007626:	463b      	mov	r3, r7
 8007628:	f7f9 fa6e 	bl	8000b08 <__aeabi_dcmpeq>
 800762c:	b908      	cbnz	r0, 8007632 <_dtoa_r+0x162>
 800762e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007632:	f1ba 0f16 	cmp.w	sl, #22
 8007636:	d859      	bhi.n	80076ec <_dtoa_r+0x21c>
 8007638:	4970      	ldr	r1, [pc, #448]	; (80077fc <_dtoa_r+0x32c>)
 800763a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800763e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007642:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007646:	f7f9 fa87 	bl	8000b58 <__aeabi_dcmpgt>
 800764a:	2800      	cmp	r0, #0
 800764c:	d050      	beq.n	80076f0 <_dtoa_r+0x220>
 800764e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007652:	2300      	movs	r3, #0
 8007654:	930f      	str	r3, [sp, #60]	; 0x3c
 8007656:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007658:	1b5d      	subs	r5, r3, r5
 800765a:	f1b5 0801 	subs.w	r8, r5, #1
 800765e:	bf49      	itett	mi
 8007660:	f1c5 0301 	rsbmi	r3, r5, #1
 8007664:	2300      	movpl	r3, #0
 8007666:	9305      	strmi	r3, [sp, #20]
 8007668:	f04f 0800 	movmi.w	r8, #0
 800766c:	bf58      	it	pl
 800766e:	9305      	strpl	r3, [sp, #20]
 8007670:	f1ba 0f00 	cmp.w	sl, #0
 8007674:	db3e      	blt.n	80076f4 <_dtoa_r+0x224>
 8007676:	2300      	movs	r3, #0
 8007678:	44d0      	add	r8, sl
 800767a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800767e:	9307      	str	r3, [sp, #28]
 8007680:	9b06      	ldr	r3, [sp, #24]
 8007682:	2b09      	cmp	r3, #9
 8007684:	f200 8090 	bhi.w	80077a8 <_dtoa_r+0x2d8>
 8007688:	2b05      	cmp	r3, #5
 800768a:	bfc4      	itt	gt
 800768c:	3b04      	subgt	r3, #4
 800768e:	9306      	strgt	r3, [sp, #24]
 8007690:	9b06      	ldr	r3, [sp, #24]
 8007692:	f1a3 0302 	sub.w	r3, r3, #2
 8007696:	bfcc      	ite	gt
 8007698:	2500      	movgt	r5, #0
 800769a:	2501      	movle	r5, #1
 800769c:	2b03      	cmp	r3, #3
 800769e:	f200 808f 	bhi.w	80077c0 <_dtoa_r+0x2f0>
 80076a2:	e8df f003 	tbb	[pc, r3]
 80076a6:	7f7d      	.short	0x7f7d
 80076a8:	7131      	.short	0x7131
 80076aa:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80076ae:	441d      	add	r5, r3
 80076b0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80076b4:	2820      	cmp	r0, #32
 80076b6:	dd13      	ble.n	80076e0 <_dtoa_r+0x210>
 80076b8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80076bc:	9b00      	ldr	r3, [sp, #0]
 80076be:	fa08 f800 	lsl.w	r8, r8, r0
 80076c2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80076c6:	fa23 f000 	lsr.w	r0, r3, r0
 80076ca:	ea48 0000 	orr.w	r0, r8, r0
 80076ce:	f7f8 ff39 	bl	8000544 <__aeabi_ui2d>
 80076d2:	2301      	movs	r3, #1
 80076d4:	4682      	mov	sl, r0
 80076d6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80076da:	3d01      	subs	r5, #1
 80076dc:	9313      	str	r3, [sp, #76]	; 0x4c
 80076de:	e772      	b.n	80075c6 <_dtoa_r+0xf6>
 80076e0:	9b00      	ldr	r3, [sp, #0]
 80076e2:	f1c0 0020 	rsb	r0, r0, #32
 80076e6:	fa03 f000 	lsl.w	r0, r3, r0
 80076ea:	e7f0      	b.n	80076ce <_dtoa_r+0x1fe>
 80076ec:	2301      	movs	r3, #1
 80076ee:	e7b1      	b.n	8007654 <_dtoa_r+0x184>
 80076f0:	900f      	str	r0, [sp, #60]	; 0x3c
 80076f2:	e7b0      	b.n	8007656 <_dtoa_r+0x186>
 80076f4:	9b05      	ldr	r3, [sp, #20]
 80076f6:	eba3 030a 	sub.w	r3, r3, sl
 80076fa:	9305      	str	r3, [sp, #20]
 80076fc:	f1ca 0300 	rsb	r3, sl, #0
 8007700:	9307      	str	r3, [sp, #28]
 8007702:	2300      	movs	r3, #0
 8007704:	930e      	str	r3, [sp, #56]	; 0x38
 8007706:	e7bb      	b.n	8007680 <_dtoa_r+0x1b0>
 8007708:	2301      	movs	r3, #1
 800770a:	930a      	str	r3, [sp, #40]	; 0x28
 800770c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800770e:	2b00      	cmp	r3, #0
 8007710:	dd59      	ble.n	80077c6 <_dtoa_r+0x2f6>
 8007712:	9302      	str	r3, [sp, #8]
 8007714:	4699      	mov	r9, r3
 8007716:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007718:	2200      	movs	r2, #0
 800771a:	6072      	str	r2, [r6, #4]
 800771c:	2204      	movs	r2, #4
 800771e:	f102 0014 	add.w	r0, r2, #20
 8007722:	4298      	cmp	r0, r3
 8007724:	6871      	ldr	r1, [r6, #4]
 8007726:	d953      	bls.n	80077d0 <_dtoa_r+0x300>
 8007728:	4620      	mov	r0, r4
 800772a:	f000 ffe8 	bl	80086fe <_Balloc>
 800772e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007730:	6030      	str	r0, [r6, #0]
 8007732:	f1b9 0f0e 	cmp.w	r9, #14
 8007736:	f8d3 b000 	ldr.w	fp, [r3]
 800773a:	f200 80e6 	bhi.w	800790a <_dtoa_r+0x43a>
 800773e:	2d00      	cmp	r5, #0
 8007740:	f000 80e3 	beq.w	800790a <_dtoa_r+0x43a>
 8007744:	ed9d 7b00 	vldr	d7, [sp]
 8007748:	f1ba 0f00 	cmp.w	sl, #0
 800774c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8007750:	dd74      	ble.n	800783c <_dtoa_r+0x36c>
 8007752:	4a2a      	ldr	r2, [pc, #168]	; (80077fc <_dtoa_r+0x32c>)
 8007754:	f00a 030f 	and.w	r3, sl, #15
 8007758:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800775c:	ed93 7b00 	vldr	d7, [r3]
 8007760:	ea4f 162a 	mov.w	r6, sl, asr #4
 8007764:	06f0      	lsls	r0, r6, #27
 8007766:	ed8d 7b08 	vstr	d7, [sp, #32]
 800776a:	d565      	bpl.n	8007838 <_dtoa_r+0x368>
 800776c:	4b24      	ldr	r3, [pc, #144]	; (8007800 <_dtoa_r+0x330>)
 800776e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007772:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007776:	f7f9 f889 	bl	800088c <__aeabi_ddiv>
 800777a:	e9cd 0100 	strd	r0, r1, [sp]
 800777e:	f006 060f 	and.w	r6, r6, #15
 8007782:	2503      	movs	r5, #3
 8007784:	4f1e      	ldr	r7, [pc, #120]	; (8007800 <_dtoa_r+0x330>)
 8007786:	e04c      	b.n	8007822 <_dtoa_r+0x352>
 8007788:	2301      	movs	r3, #1
 800778a:	930a      	str	r3, [sp, #40]	; 0x28
 800778c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800778e:	4453      	add	r3, sl
 8007790:	f103 0901 	add.w	r9, r3, #1
 8007794:	9302      	str	r3, [sp, #8]
 8007796:	464b      	mov	r3, r9
 8007798:	2b01      	cmp	r3, #1
 800779a:	bfb8      	it	lt
 800779c:	2301      	movlt	r3, #1
 800779e:	e7ba      	b.n	8007716 <_dtoa_r+0x246>
 80077a0:	2300      	movs	r3, #0
 80077a2:	e7b2      	b.n	800770a <_dtoa_r+0x23a>
 80077a4:	2300      	movs	r3, #0
 80077a6:	e7f0      	b.n	800778a <_dtoa_r+0x2ba>
 80077a8:	2501      	movs	r5, #1
 80077aa:	2300      	movs	r3, #0
 80077ac:	9306      	str	r3, [sp, #24]
 80077ae:	950a      	str	r5, [sp, #40]	; 0x28
 80077b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80077b4:	9302      	str	r3, [sp, #8]
 80077b6:	4699      	mov	r9, r3
 80077b8:	2200      	movs	r2, #0
 80077ba:	2312      	movs	r3, #18
 80077bc:	920b      	str	r2, [sp, #44]	; 0x2c
 80077be:	e7aa      	b.n	8007716 <_dtoa_r+0x246>
 80077c0:	2301      	movs	r3, #1
 80077c2:	930a      	str	r3, [sp, #40]	; 0x28
 80077c4:	e7f4      	b.n	80077b0 <_dtoa_r+0x2e0>
 80077c6:	2301      	movs	r3, #1
 80077c8:	9302      	str	r3, [sp, #8]
 80077ca:	4699      	mov	r9, r3
 80077cc:	461a      	mov	r2, r3
 80077ce:	e7f5      	b.n	80077bc <_dtoa_r+0x2ec>
 80077d0:	3101      	adds	r1, #1
 80077d2:	6071      	str	r1, [r6, #4]
 80077d4:	0052      	lsls	r2, r2, #1
 80077d6:	e7a2      	b.n	800771e <_dtoa_r+0x24e>
 80077d8:	636f4361 	.word	0x636f4361
 80077dc:	3fd287a7 	.word	0x3fd287a7
 80077e0:	8b60c8b3 	.word	0x8b60c8b3
 80077e4:	3fc68a28 	.word	0x3fc68a28
 80077e8:	509f79fb 	.word	0x509f79fb
 80077ec:	3fd34413 	.word	0x3fd34413
 80077f0:	7ff00000 	.word	0x7ff00000
 80077f4:	08009465 	.word	0x08009465
 80077f8:	3ff80000 	.word	0x3ff80000
 80077fc:	08009520 	.word	0x08009520
 8007800:	080094f8 	.word	0x080094f8
 8007804:	080094e9 	.word	0x080094e9
 8007808:	07f1      	lsls	r1, r6, #31
 800780a:	d508      	bpl.n	800781e <_dtoa_r+0x34e>
 800780c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007810:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007814:	f7f8 ff10 	bl	8000638 <__aeabi_dmul>
 8007818:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800781c:	3501      	adds	r5, #1
 800781e:	1076      	asrs	r6, r6, #1
 8007820:	3708      	adds	r7, #8
 8007822:	2e00      	cmp	r6, #0
 8007824:	d1f0      	bne.n	8007808 <_dtoa_r+0x338>
 8007826:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800782a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800782e:	f7f9 f82d 	bl	800088c <__aeabi_ddiv>
 8007832:	e9cd 0100 	strd	r0, r1, [sp]
 8007836:	e01a      	b.n	800786e <_dtoa_r+0x39e>
 8007838:	2502      	movs	r5, #2
 800783a:	e7a3      	b.n	8007784 <_dtoa_r+0x2b4>
 800783c:	f000 80a0 	beq.w	8007980 <_dtoa_r+0x4b0>
 8007840:	f1ca 0600 	rsb	r6, sl, #0
 8007844:	4b9f      	ldr	r3, [pc, #636]	; (8007ac4 <_dtoa_r+0x5f4>)
 8007846:	4fa0      	ldr	r7, [pc, #640]	; (8007ac8 <_dtoa_r+0x5f8>)
 8007848:	f006 020f 	and.w	r2, r6, #15
 800784c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007854:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007858:	f7f8 feee 	bl	8000638 <__aeabi_dmul>
 800785c:	e9cd 0100 	strd	r0, r1, [sp]
 8007860:	1136      	asrs	r6, r6, #4
 8007862:	2300      	movs	r3, #0
 8007864:	2502      	movs	r5, #2
 8007866:	2e00      	cmp	r6, #0
 8007868:	d17f      	bne.n	800796a <_dtoa_r+0x49a>
 800786a:	2b00      	cmp	r3, #0
 800786c:	d1e1      	bne.n	8007832 <_dtoa_r+0x362>
 800786e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007870:	2b00      	cmp	r3, #0
 8007872:	f000 8087 	beq.w	8007984 <_dtoa_r+0x4b4>
 8007876:	e9dd 6700 	ldrd	r6, r7, [sp]
 800787a:	2200      	movs	r2, #0
 800787c:	4b93      	ldr	r3, [pc, #588]	; (8007acc <_dtoa_r+0x5fc>)
 800787e:	4630      	mov	r0, r6
 8007880:	4639      	mov	r1, r7
 8007882:	f7f9 f94b 	bl	8000b1c <__aeabi_dcmplt>
 8007886:	2800      	cmp	r0, #0
 8007888:	d07c      	beq.n	8007984 <_dtoa_r+0x4b4>
 800788a:	f1b9 0f00 	cmp.w	r9, #0
 800788e:	d079      	beq.n	8007984 <_dtoa_r+0x4b4>
 8007890:	9b02      	ldr	r3, [sp, #8]
 8007892:	2b00      	cmp	r3, #0
 8007894:	dd35      	ble.n	8007902 <_dtoa_r+0x432>
 8007896:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800789a:	9308      	str	r3, [sp, #32]
 800789c:	4639      	mov	r1, r7
 800789e:	2200      	movs	r2, #0
 80078a0:	4b8b      	ldr	r3, [pc, #556]	; (8007ad0 <_dtoa_r+0x600>)
 80078a2:	4630      	mov	r0, r6
 80078a4:	f7f8 fec8 	bl	8000638 <__aeabi_dmul>
 80078a8:	e9cd 0100 	strd	r0, r1, [sp]
 80078ac:	9f02      	ldr	r7, [sp, #8]
 80078ae:	3501      	adds	r5, #1
 80078b0:	4628      	mov	r0, r5
 80078b2:	f7f8 fe57 	bl	8000564 <__aeabi_i2d>
 80078b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80078ba:	f7f8 febd 	bl	8000638 <__aeabi_dmul>
 80078be:	2200      	movs	r2, #0
 80078c0:	4b84      	ldr	r3, [pc, #528]	; (8007ad4 <_dtoa_r+0x604>)
 80078c2:	f7f8 fd03 	bl	80002cc <__adddf3>
 80078c6:	4605      	mov	r5, r0
 80078c8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80078cc:	2f00      	cmp	r7, #0
 80078ce:	d15d      	bne.n	800798c <_dtoa_r+0x4bc>
 80078d0:	2200      	movs	r2, #0
 80078d2:	4b81      	ldr	r3, [pc, #516]	; (8007ad8 <_dtoa_r+0x608>)
 80078d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80078d8:	f7f8 fcf6 	bl	80002c8 <__aeabi_dsub>
 80078dc:	462a      	mov	r2, r5
 80078de:	4633      	mov	r3, r6
 80078e0:	e9cd 0100 	strd	r0, r1, [sp]
 80078e4:	f7f9 f938 	bl	8000b58 <__aeabi_dcmpgt>
 80078e8:	2800      	cmp	r0, #0
 80078ea:	f040 8288 	bne.w	8007dfe <_dtoa_r+0x92e>
 80078ee:	462a      	mov	r2, r5
 80078f0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80078f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80078f8:	f7f9 f910 	bl	8000b1c <__aeabi_dcmplt>
 80078fc:	2800      	cmp	r0, #0
 80078fe:	f040 827c 	bne.w	8007dfa <_dtoa_r+0x92a>
 8007902:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007906:	e9cd 2300 	strd	r2, r3, [sp]
 800790a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800790c:	2b00      	cmp	r3, #0
 800790e:	f2c0 8150 	blt.w	8007bb2 <_dtoa_r+0x6e2>
 8007912:	f1ba 0f0e 	cmp.w	sl, #14
 8007916:	f300 814c 	bgt.w	8007bb2 <_dtoa_r+0x6e2>
 800791a:	4b6a      	ldr	r3, [pc, #424]	; (8007ac4 <_dtoa_r+0x5f4>)
 800791c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007920:	ed93 7b00 	vldr	d7, [r3]
 8007924:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007926:	2b00      	cmp	r3, #0
 8007928:	ed8d 7b02 	vstr	d7, [sp, #8]
 800792c:	f280 80d8 	bge.w	8007ae0 <_dtoa_r+0x610>
 8007930:	f1b9 0f00 	cmp.w	r9, #0
 8007934:	f300 80d4 	bgt.w	8007ae0 <_dtoa_r+0x610>
 8007938:	f040 825e 	bne.w	8007df8 <_dtoa_r+0x928>
 800793c:	2200      	movs	r2, #0
 800793e:	4b66      	ldr	r3, [pc, #408]	; (8007ad8 <_dtoa_r+0x608>)
 8007940:	ec51 0b17 	vmov	r0, r1, d7
 8007944:	f7f8 fe78 	bl	8000638 <__aeabi_dmul>
 8007948:	e9dd 2300 	ldrd	r2, r3, [sp]
 800794c:	f7f9 f8fa 	bl	8000b44 <__aeabi_dcmpge>
 8007950:	464f      	mov	r7, r9
 8007952:	464e      	mov	r6, r9
 8007954:	2800      	cmp	r0, #0
 8007956:	f040 8234 	bne.w	8007dc2 <_dtoa_r+0x8f2>
 800795a:	2331      	movs	r3, #49	; 0x31
 800795c:	f10b 0501 	add.w	r5, fp, #1
 8007960:	f88b 3000 	strb.w	r3, [fp]
 8007964:	f10a 0a01 	add.w	sl, sl, #1
 8007968:	e22f      	b.n	8007dca <_dtoa_r+0x8fa>
 800796a:	07f2      	lsls	r2, r6, #31
 800796c:	d505      	bpl.n	800797a <_dtoa_r+0x4aa>
 800796e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007972:	f7f8 fe61 	bl	8000638 <__aeabi_dmul>
 8007976:	3501      	adds	r5, #1
 8007978:	2301      	movs	r3, #1
 800797a:	1076      	asrs	r6, r6, #1
 800797c:	3708      	adds	r7, #8
 800797e:	e772      	b.n	8007866 <_dtoa_r+0x396>
 8007980:	2502      	movs	r5, #2
 8007982:	e774      	b.n	800786e <_dtoa_r+0x39e>
 8007984:	f8cd a020 	str.w	sl, [sp, #32]
 8007988:	464f      	mov	r7, r9
 800798a:	e791      	b.n	80078b0 <_dtoa_r+0x3e0>
 800798c:	4b4d      	ldr	r3, [pc, #308]	; (8007ac4 <_dtoa_r+0x5f4>)
 800798e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007992:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8007996:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007998:	2b00      	cmp	r3, #0
 800799a:	d047      	beq.n	8007a2c <_dtoa_r+0x55c>
 800799c:	4602      	mov	r2, r0
 800799e:	460b      	mov	r3, r1
 80079a0:	2000      	movs	r0, #0
 80079a2:	494e      	ldr	r1, [pc, #312]	; (8007adc <_dtoa_r+0x60c>)
 80079a4:	f7f8 ff72 	bl	800088c <__aeabi_ddiv>
 80079a8:	462a      	mov	r2, r5
 80079aa:	4633      	mov	r3, r6
 80079ac:	f7f8 fc8c 	bl	80002c8 <__aeabi_dsub>
 80079b0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80079b4:	465d      	mov	r5, fp
 80079b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80079ba:	f7f9 f8ed 	bl	8000b98 <__aeabi_d2iz>
 80079be:	4606      	mov	r6, r0
 80079c0:	f7f8 fdd0 	bl	8000564 <__aeabi_i2d>
 80079c4:	4602      	mov	r2, r0
 80079c6:	460b      	mov	r3, r1
 80079c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80079cc:	f7f8 fc7c 	bl	80002c8 <__aeabi_dsub>
 80079d0:	3630      	adds	r6, #48	; 0x30
 80079d2:	f805 6b01 	strb.w	r6, [r5], #1
 80079d6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80079da:	e9cd 0100 	strd	r0, r1, [sp]
 80079de:	f7f9 f89d 	bl	8000b1c <__aeabi_dcmplt>
 80079e2:	2800      	cmp	r0, #0
 80079e4:	d163      	bne.n	8007aae <_dtoa_r+0x5de>
 80079e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80079ea:	2000      	movs	r0, #0
 80079ec:	4937      	ldr	r1, [pc, #220]	; (8007acc <_dtoa_r+0x5fc>)
 80079ee:	f7f8 fc6b 	bl	80002c8 <__aeabi_dsub>
 80079f2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80079f6:	f7f9 f891 	bl	8000b1c <__aeabi_dcmplt>
 80079fa:	2800      	cmp	r0, #0
 80079fc:	f040 80b7 	bne.w	8007b6e <_dtoa_r+0x69e>
 8007a00:	eba5 030b 	sub.w	r3, r5, fp
 8007a04:	429f      	cmp	r7, r3
 8007a06:	f77f af7c 	ble.w	8007902 <_dtoa_r+0x432>
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	4b30      	ldr	r3, [pc, #192]	; (8007ad0 <_dtoa_r+0x600>)
 8007a0e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007a12:	f7f8 fe11 	bl	8000638 <__aeabi_dmul>
 8007a16:	2200      	movs	r2, #0
 8007a18:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007a1c:	4b2c      	ldr	r3, [pc, #176]	; (8007ad0 <_dtoa_r+0x600>)
 8007a1e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007a22:	f7f8 fe09 	bl	8000638 <__aeabi_dmul>
 8007a26:	e9cd 0100 	strd	r0, r1, [sp]
 8007a2a:	e7c4      	b.n	80079b6 <_dtoa_r+0x4e6>
 8007a2c:	462a      	mov	r2, r5
 8007a2e:	4633      	mov	r3, r6
 8007a30:	f7f8 fe02 	bl	8000638 <__aeabi_dmul>
 8007a34:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007a38:	eb0b 0507 	add.w	r5, fp, r7
 8007a3c:	465e      	mov	r6, fp
 8007a3e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007a42:	f7f9 f8a9 	bl	8000b98 <__aeabi_d2iz>
 8007a46:	4607      	mov	r7, r0
 8007a48:	f7f8 fd8c 	bl	8000564 <__aeabi_i2d>
 8007a4c:	3730      	adds	r7, #48	; 0x30
 8007a4e:	4602      	mov	r2, r0
 8007a50:	460b      	mov	r3, r1
 8007a52:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007a56:	f7f8 fc37 	bl	80002c8 <__aeabi_dsub>
 8007a5a:	f806 7b01 	strb.w	r7, [r6], #1
 8007a5e:	42ae      	cmp	r6, r5
 8007a60:	e9cd 0100 	strd	r0, r1, [sp]
 8007a64:	f04f 0200 	mov.w	r2, #0
 8007a68:	d126      	bne.n	8007ab8 <_dtoa_r+0x5e8>
 8007a6a:	4b1c      	ldr	r3, [pc, #112]	; (8007adc <_dtoa_r+0x60c>)
 8007a6c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007a70:	f7f8 fc2c 	bl	80002cc <__adddf3>
 8007a74:	4602      	mov	r2, r0
 8007a76:	460b      	mov	r3, r1
 8007a78:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007a7c:	f7f9 f86c 	bl	8000b58 <__aeabi_dcmpgt>
 8007a80:	2800      	cmp	r0, #0
 8007a82:	d174      	bne.n	8007b6e <_dtoa_r+0x69e>
 8007a84:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007a88:	2000      	movs	r0, #0
 8007a8a:	4914      	ldr	r1, [pc, #80]	; (8007adc <_dtoa_r+0x60c>)
 8007a8c:	f7f8 fc1c 	bl	80002c8 <__aeabi_dsub>
 8007a90:	4602      	mov	r2, r0
 8007a92:	460b      	mov	r3, r1
 8007a94:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007a98:	f7f9 f840 	bl	8000b1c <__aeabi_dcmplt>
 8007a9c:	2800      	cmp	r0, #0
 8007a9e:	f43f af30 	beq.w	8007902 <_dtoa_r+0x432>
 8007aa2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007aa6:	2b30      	cmp	r3, #48	; 0x30
 8007aa8:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8007aac:	d002      	beq.n	8007ab4 <_dtoa_r+0x5e4>
 8007aae:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007ab2:	e04a      	b.n	8007b4a <_dtoa_r+0x67a>
 8007ab4:	4615      	mov	r5, r2
 8007ab6:	e7f4      	b.n	8007aa2 <_dtoa_r+0x5d2>
 8007ab8:	4b05      	ldr	r3, [pc, #20]	; (8007ad0 <_dtoa_r+0x600>)
 8007aba:	f7f8 fdbd 	bl	8000638 <__aeabi_dmul>
 8007abe:	e9cd 0100 	strd	r0, r1, [sp]
 8007ac2:	e7bc      	b.n	8007a3e <_dtoa_r+0x56e>
 8007ac4:	08009520 	.word	0x08009520
 8007ac8:	080094f8 	.word	0x080094f8
 8007acc:	3ff00000 	.word	0x3ff00000
 8007ad0:	40240000 	.word	0x40240000
 8007ad4:	401c0000 	.word	0x401c0000
 8007ad8:	40140000 	.word	0x40140000
 8007adc:	3fe00000 	.word	0x3fe00000
 8007ae0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007ae4:	465d      	mov	r5, fp
 8007ae6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007aea:	4630      	mov	r0, r6
 8007aec:	4639      	mov	r1, r7
 8007aee:	f7f8 fecd 	bl	800088c <__aeabi_ddiv>
 8007af2:	f7f9 f851 	bl	8000b98 <__aeabi_d2iz>
 8007af6:	4680      	mov	r8, r0
 8007af8:	f7f8 fd34 	bl	8000564 <__aeabi_i2d>
 8007afc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007b00:	f7f8 fd9a 	bl	8000638 <__aeabi_dmul>
 8007b04:	4602      	mov	r2, r0
 8007b06:	460b      	mov	r3, r1
 8007b08:	4630      	mov	r0, r6
 8007b0a:	4639      	mov	r1, r7
 8007b0c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8007b10:	f7f8 fbda 	bl	80002c8 <__aeabi_dsub>
 8007b14:	f805 6b01 	strb.w	r6, [r5], #1
 8007b18:	eba5 060b 	sub.w	r6, r5, fp
 8007b1c:	45b1      	cmp	r9, r6
 8007b1e:	4602      	mov	r2, r0
 8007b20:	460b      	mov	r3, r1
 8007b22:	d139      	bne.n	8007b98 <_dtoa_r+0x6c8>
 8007b24:	f7f8 fbd2 	bl	80002cc <__adddf3>
 8007b28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007b2c:	4606      	mov	r6, r0
 8007b2e:	460f      	mov	r7, r1
 8007b30:	f7f9 f812 	bl	8000b58 <__aeabi_dcmpgt>
 8007b34:	b9c8      	cbnz	r0, 8007b6a <_dtoa_r+0x69a>
 8007b36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007b3a:	4630      	mov	r0, r6
 8007b3c:	4639      	mov	r1, r7
 8007b3e:	f7f8 ffe3 	bl	8000b08 <__aeabi_dcmpeq>
 8007b42:	b110      	cbz	r0, 8007b4a <_dtoa_r+0x67a>
 8007b44:	f018 0f01 	tst.w	r8, #1
 8007b48:	d10f      	bne.n	8007b6a <_dtoa_r+0x69a>
 8007b4a:	9904      	ldr	r1, [sp, #16]
 8007b4c:	4620      	mov	r0, r4
 8007b4e:	f000 fe0a 	bl	8008766 <_Bfree>
 8007b52:	2300      	movs	r3, #0
 8007b54:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007b56:	702b      	strb	r3, [r5, #0]
 8007b58:	f10a 0301 	add.w	r3, sl, #1
 8007b5c:	6013      	str	r3, [r2, #0]
 8007b5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	f000 8241 	beq.w	8007fe8 <_dtoa_r+0xb18>
 8007b66:	601d      	str	r5, [r3, #0]
 8007b68:	e23e      	b.n	8007fe8 <_dtoa_r+0xb18>
 8007b6a:	f8cd a020 	str.w	sl, [sp, #32]
 8007b6e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007b72:	2a39      	cmp	r2, #57	; 0x39
 8007b74:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8007b78:	d108      	bne.n	8007b8c <_dtoa_r+0x6bc>
 8007b7a:	459b      	cmp	fp, r3
 8007b7c:	d10a      	bne.n	8007b94 <_dtoa_r+0x6c4>
 8007b7e:	9b08      	ldr	r3, [sp, #32]
 8007b80:	3301      	adds	r3, #1
 8007b82:	9308      	str	r3, [sp, #32]
 8007b84:	2330      	movs	r3, #48	; 0x30
 8007b86:	f88b 3000 	strb.w	r3, [fp]
 8007b8a:	465b      	mov	r3, fp
 8007b8c:	781a      	ldrb	r2, [r3, #0]
 8007b8e:	3201      	adds	r2, #1
 8007b90:	701a      	strb	r2, [r3, #0]
 8007b92:	e78c      	b.n	8007aae <_dtoa_r+0x5de>
 8007b94:	461d      	mov	r5, r3
 8007b96:	e7ea      	b.n	8007b6e <_dtoa_r+0x69e>
 8007b98:	2200      	movs	r2, #0
 8007b9a:	4b9b      	ldr	r3, [pc, #620]	; (8007e08 <_dtoa_r+0x938>)
 8007b9c:	f7f8 fd4c 	bl	8000638 <__aeabi_dmul>
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	4606      	mov	r6, r0
 8007ba6:	460f      	mov	r7, r1
 8007ba8:	f7f8 ffae 	bl	8000b08 <__aeabi_dcmpeq>
 8007bac:	2800      	cmp	r0, #0
 8007bae:	d09a      	beq.n	8007ae6 <_dtoa_r+0x616>
 8007bb0:	e7cb      	b.n	8007b4a <_dtoa_r+0x67a>
 8007bb2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007bb4:	2a00      	cmp	r2, #0
 8007bb6:	f000 808b 	beq.w	8007cd0 <_dtoa_r+0x800>
 8007bba:	9a06      	ldr	r2, [sp, #24]
 8007bbc:	2a01      	cmp	r2, #1
 8007bbe:	dc6e      	bgt.n	8007c9e <_dtoa_r+0x7ce>
 8007bc0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007bc2:	2a00      	cmp	r2, #0
 8007bc4:	d067      	beq.n	8007c96 <_dtoa_r+0x7c6>
 8007bc6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007bca:	9f07      	ldr	r7, [sp, #28]
 8007bcc:	9d05      	ldr	r5, [sp, #20]
 8007bce:	9a05      	ldr	r2, [sp, #20]
 8007bd0:	2101      	movs	r1, #1
 8007bd2:	441a      	add	r2, r3
 8007bd4:	4620      	mov	r0, r4
 8007bd6:	9205      	str	r2, [sp, #20]
 8007bd8:	4498      	add	r8, r3
 8007bda:	f000 fea2 	bl	8008922 <__i2b>
 8007bde:	4606      	mov	r6, r0
 8007be0:	2d00      	cmp	r5, #0
 8007be2:	dd0c      	ble.n	8007bfe <_dtoa_r+0x72e>
 8007be4:	f1b8 0f00 	cmp.w	r8, #0
 8007be8:	dd09      	ble.n	8007bfe <_dtoa_r+0x72e>
 8007bea:	4545      	cmp	r5, r8
 8007bec:	9a05      	ldr	r2, [sp, #20]
 8007bee:	462b      	mov	r3, r5
 8007bf0:	bfa8      	it	ge
 8007bf2:	4643      	movge	r3, r8
 8007bf4:	1ad2      	subs	r2, r2, r3
 8007bf6:	9205      	str	r2, [sp, #20]
 8007bf8:	1aed      	subs	r5, r5, r3
 8007bfa:	eba8 0803 	sub.w	r8, r8, r3
 8007bfe:	9b07      	ldr	r3, [sp, #28]
 8007c00:	b1eb      	cbz	r3, 8007c3e <_dtoa_r+0x76e>
 8007c02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d067      	beq.n	8007cd8 <_dtoa_r+0x808>
 8007c08:	b18f      	cbz	r7, 8007c2e <_dtoa_r+0x75e>
 8007c0a:	4631      	mov	r1, r6
 8007c0c:	463a      	mov	r2, r7
 8007c0e:	4620      	mov	r0, r4
 8007c10:	f000 ff26 	bl	8008a60 <__pow5mult>
 8007c14:	9a04      	ldr	r2, [sp, #16]
 8007c16:	4601      	mov	r1, r0
 8007c18:	4606      	mov	r6, r0
 8007c1a:	4620      	mov	r0, r4
 8007c1c:	f000 fe8a 	bl	8008934 <__multiply>
 8007c20:	9904      	ldr	r1, [sp, #16]
 8007c22:	9008      	str	r0, [sp, #32]
 8007c24:	4620      	mov	r0, r4
 8007c26:	f000 fd9e 	bl	8008766 <_Bfree>
 8007c2a:	9b08      	ldr	r3, [sp, #32]
 8007c2c:	9304      	str	r3, [sp, #16]
 8007c2e:	9b07      	ldr	r3, [sp, #28]
 8007c30:	1bda      	subs	r2, r3, r7
 8007c32:	d004      	beq.n	8007c3e <_dtoa_r+0x76e>
 8007c34:	9904      	ldr	r1, [sp, #16]
 8007c36:	4620      	mov	r0, r4
 8007c38:	f000 ff12 	bl	8008a60 <__pow5mult>
 8007c3c:	9004      	str	r0, [sp, #16]
 8007c3e:	2101      	movs	r1, #1
 8007c40:	4620      	mov	r0, r4
 8007c42:	f000 fe6e 	bl	8008922 <__i2b>
 8007c46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c48:	4607      	mov	r7, r0
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	f000 81d0 	beq.w	8007ff0 <_dtoa_r+0xb20>
 8007c50:	461a      	mov	r2, r3
 8007c52:	4601      	mov	r1, r0
 8007c54:	4620      	mov	r0, r4
 8007c56:	f000 ff03 	bl	8008a60 <__pow5mult>
 8007c5a:	9b06      	ldr	r3, [sp, #24]
 8007c5c:	2b01      	cmp	r3, #1
 8007c5e:	4607      	mov	r7, r0
 8007c60:	dc40      	bgt.n	8007ce4 <_dtoa_r+0x814>
 8007c62:	9b00      	ldr	r3, [sp, #0]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d139      	bne.n	8007cdc <_dtoa_r+0x80c>
 8007c68:	9b01      	ldr	r3, [sp, #4]
 8007c6a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d136      	bne.n	8007ce0 <_dtoa_r+0x810>
 8007c72:	9b01      	ldr	r3, [sp, #4]
 8007c74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007c78:	0d1b      	lsrs	r3, r3, #20
 8007c7a:	051b      	lsls	r3, r3, #20
 8007c7c:	b12b      	cbz	r3, 8007c8a <_dtoa_r+0x7ba>
 8007c7e:	9b05      	ldr	r3, [sp, #20]
 8007c80:	3301      	adds	r3, #1
 8007c82:	9305      	str	r3, [sp, #20]
 8007c84:	f108 0801 	add.w	r8, r8, #1
 8007c88:	2301      	movs	r3, #1
 8007c8a:	9307      	str	r3, [sp, #28]
 8007c8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d12a      	bne.n	8007ce8 <_dtoa_r+0x818>
 8007c92:	2001      	movs	r0, #1
 8007c94:	e030      	b.n	8007cf8 <_dtoa_r+0x828>
 8007c96:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007c98:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007c9c:	e795      	b.n	8007bca <_dtoa_r+0x6fa>
 8007c9e:	9b07      	ldr	r3, [sp, #28]
 8007ca0:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 8007ca4:	42bb      	cmp	r3, r7
 8007ca6:	bfbf      	itttt	lt
 8007ca8:	9b07      	ldrlt	r3, [sp, #28]
 8007caa:	9707      	strlt	r7, [sp, #28]
 8007cac:	1afa      	sublt	r2, r7, r3
 8007cae:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007cb0:	bfbb      	ittet	lt
 8007cb2:	189b      	addlt	r3, r3, r2
 8007cb4:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007cb6:	1bdf      	subge	r7, r3, r7
 8007cb8:	2700      	movlt	r7, #0
 8007cba:	f1b9 0f00 	cmp.w	r9, #0
 8007cbe:	bfb5      	itete	lt
 8007cc0:	9b05      	ldrlt	r3, [sp, #20]
 8007cc2:	9d05      	ldrge	r5, [sp, #20]
 8007cc4:	eba3 0509 	sublt.w	r5, r3, r9
 8007cc8:	464b      	movge	r3, r9
 8007cca:	bfb8      	it	lt
 8007ccc:	2300      	movlt	r3, #0
 8007cce:	e77e      	b.n	8007bce <_dtoa_r+0x6fe>
 8007cd0:	9f07      	ldr	r7, [sp, #28]
 8007cd2:	9d05      	ldr	r5, [sp, #20]
 8007cd4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8007cd6:	e783      	b.n	8007be0 <_dtoa_r+0x710>
 8007cd8:	9a07      	ldr	r2, [sp, #28]
 8007cda:	e7ab      	b.n	8007c34 <_dtoa_r+0x764>
 8007cdc:	2300      	movs	r3, #0
 8007cde:	e7d4      	b.n	8007c8a <_dtoa_r+0x7ba>
 8007ce0:	9b00      	ldr	r3, [sp, #0]
 8007ce2:	e7d2      	b.n	8007c8a <_dtoa_r+0x7ba>
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	9307      	str	r3, [sp, #28]
 8007ce8:	693b      	ldr	r3, [r7, #16]
 8007cea:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8007cee:	6918      	ldr	r0, [r3, #16]
 8007cf0:	f000 fdc9 	bl	8008886 <__hi0bits>
 8007cf4:	f1c0 0020 	rsb	r0, r0, #32
 8007cf8:	4440      	add	r0, r8
 8007cfa:	f010 001f 	ands.w	r0, r0, #31
 8007cfe:	d047      	beq.n	8007d90 <_dtoa_r+0x8c0>
 8007d00:	f1c0 0320 	rsb	r3, r0, #32
 8007d04:	2b04      	cmp	r3, #4
 8007d06:	dd3b      	ble.n	8007d80 <_dtoa_r+0x8b0>
 8007d08:	9b05      	ldr	r3, [sp, #20]
 8007d0a:	f1c0 001c 	rsb	r0, r0, #28
 8007d0e:	4403      	add	r3, r0
 8007d10:	9305      	str	r3, [sp, #20]
 8007d12:	4405      	add	r5, r0
 8007d14:	4480      	add	r8, r0
 8007d16:	9b05      	ldr	r3, [sp, #20]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	dd05      	ble.n	8007d28 <_dtoa_r+0x858>
 8007d1c:	461a      	mov	r2, r3
 8007d1e:	9904      	ldr	r1, [sp, #16]
 8007d20:	4620      	mov	r0, r4
 8007d22:	f000 feeb 	bl	8008afc <__lshift>
 8007d26:	9004      	str	r0, [sp, #16]
 8007d28:	f1b8 0f00 	cmp.w	r8, #0
 8007d2c:	dd05      	ble.n	8007d3a <_dtoa_r+0x86a>
 8007d2e:	4639      	mov	r1, r7
 8007d30:	4642      	mov	r2, r8
 8007d32:	4620      	mov	r0, r4
 8007d34:	f000 fee2 	bl	8008afc <__lshift>
 8007d38:	4607      	mov	r7, r0
 8007d3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007d3c:	b353      	cbz	r3, 8007d94 <_dtoa_r+0x8c4>
 8007d3e:	4639      	mov	r1, r7
 8007d40:	9804      	ldr	r0, [sp, #16]
 8007d42:	f000 ff2f 	bl	8008ba4 <__mcmp>
 8007d46:	2800      	cmp	r0, #0
 8007d48:	da24      	bge.n	8007d94 <_dtoa_r+0x8c4>
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	220a      	movs	r2, #10
 8007d4e:	9904      	ldr	r1, [sp, #16]
 8007d50:	4620      	mov	r0, r4
 8007d52:	f000 fd1f 	bl	8008794 <__multadd>
 8007d56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d58:	9004      	str	r0, [sp, #16]
 8007d5a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	f000 814d 	beq.w	8007ffe <_dtoa_r+0xb2e>
 8007d64:	2300      	movs	r3, #0
 8007d66:	4631      	mov	r1, r6
 8007d68:	220a      	movs	r2, #10
 8007d6a:	4620      	mov	r0, r4
 8007d6c:	f000 fd12 	bl	8008794 <__multadd>
 8007d70:	9b02      	ldr	r3, [sp, #8]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	4606      	mov	r6, r0
 8007d76:	dc4f      	bgt.n	8007e18 <_dtoa_r+0x948>
 8007d78:	9b06      	ldr	r3, [sp, #24]
 8007d7a:	2b02      	cmp	r3, #2
 8007d7c:	dd4c      	ble.n	8007e18 <_dtoa_r+0x948>
 8007d7e:	e011      	b.n	8007da4 <_dtoa_r+0x8d4>
 8007d80:	d0c9      	beq.n	8007d16 <_dtoa_r+0x846>
 8007d82:	9a05      	ldr	r2, [sp, #20]
 8007d84:	331c      	adds	r3, #28
 8007d86:	441a      	add	r2, r3
 8007d88:	9205      	str	r2, [sp, #20]
 8007d8a:	441d      	add	r5, r3
 8007d8c:	4498      	add	r8, r3
 8007d8e:	e7c2      	b.n	8007d16 <_dtoa_r+0x846>
 8007d90:	4603      	mov	r3, r0
 8007d92:	e7f6      	b.n	8007d82 <_dtoa_r+0x8b2>
 8007d94:	f1b9 0f00 	cmp.w	r9, #0
 8007d98:	dc38      	bgt.n	8007e0c <_dtoa_r+0x93c>
 8007d9a:	9b06      	ldr	r3, [sp, #24]
 8007d9c:	2b02      	cmp	r3, #2
 8007d9e:	dd35      	ble.n	8007e0c <_dtoa_r+0x93c>
 8007da0:	f8cd 9008 	str.w	r9, [sp, #8]
 8007da4:	9b02      	ldr	r3, [sp, #8]
 8007da6:	b963      	cbnz	r3, 8007dc2 <_dtoa_r+0x8f2>
 8007da8:	4639      	mov	r1, r7
 8007daa:	2205      	movs	r2, #5
 8007dac:	4620      	mov	r0, r4
 8007dae:	f000 fcf1 	bl	8008794 <__multadd>
 8007db2:	4601      	mov	r1, r0
 8007db4:	4607      	mov	r7, r0
 8007db6:	9804      	ldr	r0, [sp, #16]
 8007db8:	f000 fef4 	bl	8008ba4 <__mcmp>
 8007dbc:	2800      	cmp	r0, #0
 8007dbe:	f73f adcc 	bgt.w	800795a <_dtoa_r+0x48a>
 8007dc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007dc4:	465d      	mov	r5, fp
 8007dc6:	ea6f 0a03 	mvn.w	sl, r3
 8007dca:	f04f 0900 	mov.w	r9, #0
 8007dce:	4639      	mov	r1, r7
 8007dd0:	4620      	mov	r0, r4
 8007dd2:	f000 fcc8 	bl	8008766 <_Bfree>
 8007dd6:	2e00      	cmp	r6, #0
 8007dd8:	f43f aeb7 	beq.w	8007b4a <_dtoa_r+0x67a>
 8007ddc:	f1b9 0f00 	cmp.w	r9, #0
 8007de0:	d005      	beq.n	8007dee <_dtoa_r+0x91e>
 8007de2:	45b1      	cmp	r9, r6
 8007de4:	d003      	beq.n	8007dee <_dtoa_r+0x91e>
 8007de6:	4649      	mov	r1, r9
 8007de8:	4620      	mov	r0, r4
 8007dea:	f000 fcbc 	bl	8008766 <_Bfree>
 8007dee:	4631      	mov	r1, r6
 8007df0:	4620      	mov	r0, r4
 8007df2:	f000 fcb8 	bl	8008766 <_Bfree>
 8007df6:	e6a8      	b.n	8007b4a <_dtoa_r+0x67a>
 8007df8:	2700      	movs	r7, #0
 8007dfa:	463e      	mov	r6, r7
 8007dfc:	e7e1      	b.n	8007dc2 <_dtoa_r+0x8f2>
 8007dfe:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007e02:	463e      	mov	r6, r7
 8007e04:	e5a9      	b.n	800795a <_dtoa_r+0x48a>
 8007e06:	bf00      	nop
 8007e08:	40240000 	.word	0x40240000
 8007e0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e0e:	f8cd 9008 	str.w	r9, [sp, #8]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	f000 80fa 	beq.w	800800c <_dtoa_r+0xb3c>
 8007e18:	2d00      	cmp	r5, #0
 8007e1a:	dd05      	ble.n	8007e28 <_dtoa_r+0x958>
 8007e1c:	4631      	mov	r1, r6
 8007e1e:	462a      	mov	r2, r5
 8007e20:	4620      	mov	r0, r4
 8007e22:	f000 fe6b 	bl	8008afc <__lshift>
 8007e26:	4606      	mov	r6, r0
 8007e28:	9b07      	ldr	r3, [sp, #28]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d04c      	beq.n	8007ec8 <_dtoa_r+0x9f8>
 8007e2e:	6871      	ldr	r1, [r6, #4]
 8007e30:	4620      	mov	r0, r4
 8007e32:	f000 fc64 	bl	80086fe <_Balloc>
 8007e36:	6932      	ldr	r2, [r6, #16]
 8007e38:	3202      	adds	r2, #2
 8007e3a:	4605      	mov	r5, r0
 8007e3c:	0092      	lsls	r2, r2, #2
 8007e3e:	f106 010c 	add.w	r1, r6, #12
 8007e42:	300c      	adds	r0, #12
 8007e44:	f000 fc50 	bl	80086e8 <memcpy>
 8007e48:	2201      	movs	r2, #1
 8007e4a:	4629      	mov	r1, r5
 8007e4c:	4620      	mov	r0, r4
 8007e4e:	f000 fe55 	bl	8008afc <__lshift>
 8007e52:	9b00      	ldr	r3, [sp, #0]
 8007e54:	f8cd b014 	str.w	fp, [sp, #20]
 8007e58:	f003 0301 	and.w	r3, r3, #1
 8007e5c:	46b1      	mov	r9, r6
 8007e5e:	9307      	str	r3, [sp, #28]
 8007e60:	4606      	mov	r6, r0
 8007e62:	4639      	mov	r1, r7
 8007e64:	9804      	ldr	r0, [sp, #16]
 8007e66:	f7ff faa5 	bl	80073b4 <quorem>
 8007e6a:	4649      	mov	r1, r9
 8007e6c:	4605      	mov	r5, r0
 8007e6e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007e72:	9804      	ldr	r0, [sp, #16]
 8007e74:	f000 fe96 	bl	8008ba4 <__mcmp>
 8007e78:	4632      	mov	r2, r6
 8007e7a:	9000      	str	r0, [sp, #0]
 8007e7c:	4639      	mov	r1, r7
 8007e7e:	4620      	mov	r0, r4
 8007e80:	f000 feaa 	bl	8008bd8 <__mdiff>
 8007e84:	68c3      	ldr	r3, [r0, #12]
 8007e86:	4602      	mov	r2, r0
 8007e88:	bb03      	cbnz	r3, 8007ecc <_dtoa_r+0x9fc>
 8007e8a:	4601      	mov	r1, r0
 8007e8c:	9008      	str	r0, [sp, #32]
 8007e8e:	9804      	ldr	r0, [sp, #16]
 8007e90:	f000 fe88 	bl	8008ba4 <__mcmp>
 8007e94:	9a08      	ldr	r2, [sp, #32]
 8007e96:	4603      	mov	r3, r0
 8007e98:	4611      	mov	r1, r2
 8007e9a:	4620      	mov	r0, r4
 8007e9c:	9308      	str	r3, [sp, #32]
 8007e9e:	f000 fc62 	bl	8008766 <_Bfree>
 8007ea2:	9b08      	ldr	r3, [sp, #32]
 8007ea4:	b9a3      	cbnz	r3, 8007ed0 <_dtoa_r+0xa00>
 8007ea6:	9a06      	ldr	r2, [sp, #24]
 8007ea8:	b992      	cbnz	r2, 8007ed0 <_dtoa_r+0xa00>
 8007eaa:	9a07      	ldr	r2, [sp, #28]
 8007eac:	b982      	cbnz	r2, 8007ed0 <_dtoa_r+0xa00>
 8007eae:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007eb2:	d029      	beq.n	8007f08 <_dtoa_r+0xa38>
 8007eb4:	9b00      	ldr	r3, [sp, #0]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	dd01      	ble.n	8007ebe <_dtoa_r+0x9ee>
 8007eba:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8007ebe:	9b05      	ldr	r3, [sp, #20]
 8007ec0:	1c5d      	adds	r5, r3, #1
 8007ec2:	f883 8000 	strb.w	r8, [r3]
 8007ec6:	e782      	b.n	8007dce <_dtoa_r+0x8fe>
 8007ec8:	4630      	mov	r0, r6
 8007eca:	e7c2      	b.n	8007e52 <_dtoa_r+0x982>
 8007ecc:	2301      	movs	r3, #1
 8007ece:	e7e3      	b.n	8007e98 <_dtoa_r+0x9c8>
 8007ed0:	9a00      	ldr	r2, [sp, #0]
 8007ed2:	2a00      	cmp	r2, #0
 8007ed4:	db04      	blt.n	8007ee0 <_dtoa_r+0xa10>
 8007ed6:	d125      	bne.n	8007f24 <_dtoa_r+0xa54>
 8007ed8:	9a06      	ldr	r2, [sp, #24]
 8007eda:	bb1a      	cbnz	r2, 8007f24 <_dtoa_r+0xa54>
 8007edc:	9a07      	ldr	r2, [sp, #28]
 8007ede:	bb0a      	cbnz	r2, 8007f24 <_dtoa_r+0xa54>
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	ddec      	ble.n	8007ebe <_dtoa_r+0x9ee>
 8007ee4:	2201      	movs	r2, #1
 8007ee6:	9904      	ldr	r1, [sp, #16]
 8007ee8:	4620      	mov	r0, r4
 8007eea:	f000 fe07 	bl	8008afc <__lshift>
 8007eee:	4639      	mov	r1, r7
 8007ef0:	9004      	str	r0, [sp, #16]
 8007ef2:	f000 fe57 	bl	8008ba4 <__mcmp>
 8007ef6:	2800      	cmp	r0, #0
 8007ef8:	dc03      	bgt.n	8007f02 <_dtoa_r+0xa32>
 8007efa:	d1e0      	bne.n	8007ebe <_dtoa_r+0x9ee>
 8007efc:	f018 0f01 	tst.w	r8, #1
 8007f00:	d0dd      	beq.n	8007ebe <_dtoa_r+0x9ee>
 8007f02:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007f06:	d1d8      	bne.n	8007eba <_dtoa_r+0x9ea>
 8007f08:	9b05      	ldr	r3, [sp, #20]
 8007f0a:	9a05      	ldr	r2, [sp, #20]
 8007f0c:	1c5d      	adds	r5, r3, #1
 8007f0e:	2339      	movs	r3, #57	; 0x39
 8007f10:	7013      	strb	r3, [r2, #0]
 8007f12:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007f16:	2b39      	cmp	r3, #57	; 0x39
 8007f18:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8007f1c:	d04f      	beq.n	8007fbe <_dtoa_r+0xaee>
 8007f1e:	3301      	adds	r3, #1
 8007f20:	7013      	strb	r3, [r2, #0]
 8007f22:	e754      	b.n	8007dce <_dtoa_r+0x8fe>
 8007f24:	9a05      	ldr	r2, [sp, #20]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	f102 0501 	add.w	r5, r2, #1
 8007f2c:	dd06      	ble.n	8007f3c <_dtoa_r+0xa6c>
 8007f2e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007f32:	d0e9      	beq.n	8007f08 <_dtoa_r+0xa38>
 8007f34:	f108 0801 	add.w	r8, r8, #1
 8007f38:	9b05      	ldr	r3, [sp, #20]
 8007f3a:	e7c2      	b.n	8007ec2 <_dtoa_r+0x9f2>
 8007f3c:	9a02      	ldr	r2, [sp, #8]
 8007f3e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8007f42:	eba5 030b 	sub.w	r3, r5, fp
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d021      	beq.n	8007f8e <_dtoa_r+0xabe>
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	220a      	movs	r2, #10
 8007f4e:	9904      	ldr	r1, [sp, #16]
 8007f50:	4620      	mov	r0, r4
 8007f52:	f000 fc1f 	bl	8008794 <__multadd>
 8007f56:	45b1      	cmp	r9, r6
 8007f58:	9004      	str	r0, [sp, #16]
 8007f5a:	f04f 0300 	mov.w	r3, #0
 8007f5e:	f04f 020a 	mov.w	r2, #10
 8007f62:	4649      	mov	r1, r9
 8007f64:	4620      	mov	r0, r4
 8007f66:	d105      	bne.n	8007f74 <_dtoa_r+0xaa4>
 8007f68:	f000 fc14 	bl	8008794 <__multadd>
 8007f6c:	4681      	mov	r9, r0
 8007f6e:	4606      	mov	r6, r0
 8007f70:	9505      	str	r5, [sp, #20]
 8007f72:	e776      	b.n	8007e62 <_dtoa_r+0x992>
 8007f74:	f000 fc0e 	bl	8008794 <__multadd>
 8007f78:	4631      	mov	r1, r6
 8007f7a:	4681      	mov	r9, r0
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	220a      	movs	r2, #10
 8007f80:	4620      	mov	r0, r4
 8007f82:	f000 fc07 	bl	8008794 <__multadd>
 8007f86:	4606      	mov	r6, r0
 8007f88:	e7f2      	b.n	8007f70 <_dtoa_r+0xaa0>
 8007f8a:	f04f 0900 	mov.w	r9, #0
 8007f8e:	2201      	movs	r2, #1
 8007f90:	9904      	ldr	r1, [sp, #16]
 8007f92:	4620      	mov	r0, r4
 8007f94:	f000 fdb2 	bl	8008afc <__lshift>
 8007f98:	4639      	mov	r1, r7
 8007f9a:	9004      	str	r0, [sp, #16]
 8007f9c:	f000 fe02 	bl	8008ba4 <__mcmp>
 8007fa0:	2800      	cmp	r0, #0
 8007fa2:	dcb6      	bgt.n	8007f12 <_dtoa_r+0xa42>
 8007fa4:	d102      	bne.n	8007fac <_dtoa_r+0xadc>
 8007fa6:	f018 0f01 	tst.w	r8, #1
 8007faa:	d1b2      	bne.n	8007f12 <_dtoa_r+0xa42>
 8007fac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007fb0:	2b30      	cmp	r3, #48	; 0x30
 8007fb2:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8007fb6:	f47f af0a 	bne.w	8007dce <_dtoa_r+0x8fe>
 8007fba:	4615      	mov	r5, r2
 8007fbc:	e7f6      	b.n	8007fac <_dtoa_r+0xadc>
 8007fbe:	4593      	cmp	fp, r2
 8007fc0:	d105      	bne.n	8007fce <_dtoa_r+0xafe>
 8007fc2:	2331      	movs	r3, #49	; 0x31
 8007fc4:	f10a 0a01 	add.w	sl, sl, #1
 8007fc8:	f88b 3000 	strb.w	r3, [fp]
 8007fcc:	e6ff      	b.n	8007dce <_dtoa_r+0x8fe>
 8007fce:	4615      	mov	r5, r2
 8007fd0:	e79f      	b.n	8007f12 <_dtoa_r+0xa42>
 8007fd2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8008038 <_dtoa_r+0xb68>
 8007fd6:	e007      	b.n	8007fe8 <_dtoa_r+0xb18>
 8007fd8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007fda:	f8df b060 	ldr.w	fp, [pc, #96]	; 800803c <_dtoa_r+0xb6c>
 8007fde:	b11b      	cbz	r3, 8007fe8 <_dtoa_r+0xb18>
 8007fe0:	f10b 0308 	add.w	r3, fp, #8
 8007fe4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007fe6:	6013      	str	r3, [r2, #0]
 8007fe8:	4658      	mov	r0, fp
 8007fea:	b017      	add	sp, #92	; 0x5c
 8007fec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ff0:	9b06      	ldr	r3, [sp, #24]
 8007ff2:	2b01      	cmp	r3, #1
 8007ff4:	f77f ae35 	ble.w	8007c62 <_dtoa_r+0x792>
 8007ff8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007ffa:	9307      	str	r3, [sp, #28]
 8007ffc:	e649      	b.n	8007c92 <_dtoa_r+0x7c2>
 8007ffe:	9b02      	ldr	r3, [sp, #8]
 8008000:	2b00      	cmp	r3, #0
 8008002:	dc03      	bgt.n	800800c <_dtoa_r+0xb3c>
 8008004:	9b06      	ldr	r3, [sp, #24]
 8008006:	2b02      	cmp	r3, #2
 8008008:	f73f aecc 	bgt.w	8007da4 <_dtoa_r+0x8d4>
 800800c:	465d      	mov	r5, fp
 800800e:	4639      	mov	r1, r7
 8008010:	9804      	ldr	r0, [sp, #16]
 8008012:	f7ff f9cf 	bl	80073b4 <quorem>
 8008016:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800801a:	f805 8b01 	strb.w	r8, [r5], #1
 800801e:	9a02      	ldr	r2, [sp, #8]
 8008020:	eba5 030b 	sub.w	r3, r5, fp
 8008024:	429a      	cmp	r2, r3
 8008026:	ddb0      	ble.n	8007f8a <_dtoa_r+0xaba>
 8008028:	2300      	movs	r3, #0
 800802a:	220a      	movs	r2, #10
 800802c:	9904      	ldr	r1, [sp, #16]
 800802e:	4620      	mov	r0, r4
 8008030:	f000 fbb0 	bl	8008794 <__multadd>
 8008034:	9004      	str	r0, [sp, #16]
 8008036:	e7ea      	b.n	800800e <_dtoa_r+0xb3e>
 8008038:	08009464 	.word	0x08009464
 800803c:	080094e0 	.word	0x080094e0

08008040 <rshift>:
 8008040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008042:	6906      	ldr	r6, [r0, #16]
 8008044:	114b      	asrs	r3, r1, #5
 8008046:	429e      	cmp	r6, r3
 8008048:	f100 0414 	add.w	r4, r0, #20
 800804c:	dd30      	ble.n	80080b0 <rshift+0x70>
 800804e:	f011 011f 	ands.w	r1, r1, #31
 8008052:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8008056:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800805a:	d108      	bne.n	800806e <rshift+0x2e>
 800805c:	4621      	mov	r1, r4
 800805e:	42b2      	cmp	r2, r6
 8008060:	460b      	mov	r3, r1
 8008062:	d211      	bcs.n	8008088 <rshift+0x48>
 8008064:	f852 3b04 	ldr.w	r3, [r2], #4
 8008068:	f841 3b04 	str.w	r3, [r1], #4
 800806c:	e7f7      	b.n	800805e <rshift+0x1e>
 800806e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8008072:	f1c1 0c20 	rsb	ip, r1, #32
 8008076:	40cd      	lsrs	r5, r1
 8008078:	3204      	adds	r2, #4
 800807a:	4623      	mov	r3, r4
 800807c:	42b2      	cmp	r2, r6
 800807e:	4617      	mov	r7, r2
 8008080:	d30c      	bcc.n	800809c <rshift+0x5c>
 8008082:	601d      	str	r5, [r3, #0]
 8008084:	b105      	cbz	r5, 8008088 <rshift+0x48>
 8008086:	3304      	adds	r3, #4
 8008088:	1b1a      	subs	r2, r3, r4
 800808a:	42a3      	cmp	r3, r4
 800808c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008090:	bf08      	it	eq
 8008092:	2300      	moveq	r3, #0
 8008094:	6102      	str	r2, [r0, #16]
 8008096:	bf08      	it	eq
 8008098:	6143      	streq	r3, [r0, #20]
 800809a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800809c:	683f      	ldr	r7, [r7, #0]
 800809e:	fa07 f70c 	lsl.w	r7, r7, ip
 80080a2:	433d      	orrs	r5, r7
 80080a4:	f843 5b04 	str.w	r5, [r3], #4
 80080a8:	f852 5b04 	ldr.w	r5, [r2], #4
 80080ac:	40cd      	lsrs	r5, r1
 80080ae:	e7e5      	b.n	800807c <rshift+0x3c>
 80080b0:	4623      	mov	r3, r4
 80080b2:	e7e9      	b.n	8008088 <rshift+0x48>

080080b4 <__hexdig_fun>:
 80080b4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80080b8:	2b09      	cmp	r3, #9
 80080ba:	d802      	bhi.n	80080c2 <__hexdig_fun+0xe>
 80080bc:	3820      	subs	r0, #32
 80080be:	b2c0      	uxtb	r0, r0
 80080c0:	4770      	bx	lr
 80080c2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80080c6:	2b05      	cmp	r3, #5
 80080c8:	d801      	bhi.n	80080ce <__hexdig_fun+0x1a>
 80080ca:	3847      	subs	r0, #71	; 0x47
 80080cc:	e7f7      	b.n	80080be <__hexdig_fun+0xa>
 80080ce:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80080d2:	2b05      	cmp	r3, #5
 80080d4:	d801      	bhi.n	80080da <__hexdig_fun+0x26>
 80080d6:	3827      	subs	r0, #39	; 0x27
 80080d8:	e7f1      	b.n	80080be <__hexdig_fun+0xa>
 80080da:	2000      	movs	r0, #0
 80080dc:	4770      	bx	lr

080080de <__gethex>:
 80080de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080e2:	b08b      	sub	sp, #44	; 0x2c
 80080e4:	468a      	mov	sl, r1
 80080e6:	9002      	str	r0, [sp, #8]
 80080e8:	9816      	ldr	r0, [sp, #88]	; 0x58
 80080ea:	9306      	str	r3, [sp, #24]
 80080ec:	4690      	mov	r8, r2
 80080ee:	f000 fad0 	bl	8008692 <__localeconv_l>
 80080f2:	6803      	ldr	r3, [r0, #0]
 80080f4:	9303      	str	r3, [sp, #12]
 80080f6:	4618      	mov	r0, r3
 80080f8:	f7f8 f88a 	bl	8000210 <strlen>
 80080fc:	9b03      	ldr	r3, [sp, #12]
 80080fe:	9001      	str	r0, [sp, #4]
 8008100:	4403      	add	r3, r0
 8008102:	f04f 0b00 	mov.w	fp, #0
 8008106:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800810a:	9307      	str	r3, [sp, #28]
 800810c:	f8da 3000 	ldr.w	r3, [sl]
 8008110:	3302      	adds	r3, #2
 8008112:	461f      	mov	r7, r3
 8008114:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008118:	2830      	cmp	r0, #48	; 0x30
 800811a:	d06c      	beq.n	80081f6 <__gethex+0x118>
 800811c:	f7ff ffca 	bl	80080b4 <__hexdig_fun>
 8008120:	4604      	mov	r4, r0
 8008122:	2800      	cmp	r0, #0
 8008124:	d16a      	bne.n	80081fc <__gethex+0x11e>
 8008126:	9a01      	ldr	r2, [sp, #4]
 8008128:	9903      	ldr	r1, [sp, #12]
 800812a:	4638      	mov	r0, r7
 800812c:	f001 f8fe 	bl	800932c <strncmp>
 8008130:	2800      	cmp	r0, #0
 8008132:	d166      	bne.n	8008202 <__gethex+0x124>
 8008134:	9b01      	ldr	r3, [sp, #4]
 8008136:	5cf8      	ldrb	r0, [r7, r3]
 8008138:	18fe      	adds	r6, r7, r3
 800813a:	f7ff ffbb 	bl	80080b4 <__hexdig_fun>
 800813e:	2800      	cmp	r0, #0
 8008140:	d062      	beq.n	8008208 <__gethex+0x12a>
 8008142:	4633      	mov	r3, r6
 8008144:	7818      	ldrb	r0, [r3, #0]
 8008146:	2830      	cmp	r0, #48	; 0x30
 8008148:	461f      	mov	r7, r3
 800814a:	f103 0301 	add.w	r3, r3, #1
 800814e:	d0f9      	beq.n	8008144 <__gethex+0x66>
 8008150:	f7ff ffb0 	bl	80080b4 <__hexdig_fun>
 8008154:	fab0 f580 	clz	r5, r0
 8008158:	096d      	lsrs	r5, r5, #5
 800815a:	4634      	mov	r4, r6
 800815c:	f04f 0b01 	mov.w	fp, #1
 8008160:	463a      	mov	r2, r7
 8008162:	4616      	mov	r6, r2
 8008164:	3201      	adds	r2, #1
 8008166:	7830      	ldrb	r0, [r6, #0]
 8008168:	f7ff ffa4 	bl	80080b4 <__hexdig_fun>
 800816c:	2800      	cmp	r0, #0
 800816e:	d1f8      	bne.n	8008162 <__gethex+0x84>
 8008170:	9a01      	ldr	r2, [sp, #4]
 8008172:	9903      	ldr	r1, [sp, #12]
 8008174:	4630      	mov	r0, r6
 8008176:	f001 f8d9 	bl	800932c <strncmp>
 800817a:	b950      	cbnz	r0, 8008192 <__gethex+0xb4>
 800817c:	b954      	cbnz	r4, 8008194 <__gethex+0xb6>
 800817e:	9b01      	ldr	r3, [sp, #4]
 8008180:	18f4      	adds	r4, r6, r3
 8008182:	4622      	mov	r2, r4
 8008184:	4616      	mov	r6, r2
 8008186:	3201      	adds	r2, #1
 8008188:	7830      	ldrb	r0, [r6, #0]
 800818a:	f7ff ff93 	bl	80080b4 <__hexdig_fun>
 800818e:	2800      	cmp	r0, #0
 8008190:	d1f8      	bne.n	8008184 <__gethex+0xa6>
 8008192:	b10c      	cbz	r4, 8008198 <__gethex+0xba>
 8008194:	1ba4      	subs	r4, r4, r6
 8008196:	00a4      	lsls	r4, r4, #2
 8008198:	7833      	ldrb	r3, [r6, #0]
 800819a:	2b50      	cmp	r3, #80	; 0x50
 800819c:	d001      	beq.n	80081a2 <__gethex+0xc4>
 800819e:	2b70      	cmp	r3, #112	; 0x70
 80081a0:	d140      	bne.n	8008224 <__gethex+0x146>
 80081a2:	7873      	ldrb	r3, [r6, #1]
 80081a4:	2b2b      	cmp	r3, #43	; 0x2b
 80081a6:	d031      	beq.n	800820c <__gethex+0x12e>
 80081a8:	2b2d      	cmp	r3, #45	; 0x2d
 80081aa:	d033      	beq.n	8008214 <__gethex+0x136>
 80081ac:	1c71      	adds	r1, r6, #1
 80081ae:	f04f 0900 	mov.w	r9, #0
 80081b2:	7808      	ldrb	r0, [r1, #0]
 80081b4:	f7ff ff7e 	bl	80080b4 <__hexdig_fun>
 80081b8:	1e43      	subs	r3, r0, #1
 80081ba:	b2db      	uxtb	r3, r3
 80081bc:	2b18      	cmp	r3, #24
 80081be:	d831      	bhi.n	8008224 <__gethex+0x146>
 80081c0:	f1a0 0210 	sub.w	r2, r0, #16
 80081c4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80081c8:	f7ff ff74 	bl	80080b4 <__hexdig_fun>
 80081cc:	1e43      	subs	r3, r0, #1
 80081ce:	b2db      	uxtb	r3, r3
 80081d0:	2b18      	cmp	r3, #24
 80081d2:	d922      	bls.n	800821a <__gethex+0x13c>
 80081d4:	f1b9 0f00 	cmp.w	r9, #0
 80081d8:	d000      	beq.n	80081dc <__gethex+0xfe>
 80081da:	4252      	negs	r2, r2
 80081dc:	4414      	add	r4, r2
 80081de:	f8ca 1000 	str.w	r1, [sl]
 80081e2:	b30d      	cbz	r5, 8008228 <__gethex+0x14a>
 80081e4:	f1bb 0f00 	cmp.w	fp, #0
 80081e8:	bf0c      	ite	eq
 80081ea:	2706      	moveq	r7, #6
 80081ec:	2700      	movne	r7, #0
 80081ee:	4638      	mov	r0, r7
 80081f0:	b00b      	add	sp, #44	; 0x2c
 80081f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081f6:	f10b 0b01 	add.w	fp, fp, #1
 80081fa:	e78a      	b.n	8008112 <__gethex+0x34>
 80081fc:	2500      	movs	r5, #0
 80081fe:	462c      	mov	r4, r5
 8008200:	e7ae      	b.n	8008160 <__gethex+0x82>
 8008202:	463e      	mov	r6, r7
 8008204:	2501      	movs	r5, #1
 8008206:	e7c7      	b.n	8008198 <__gethex+0xba>
 8008208:	4604      	mov	r4, r0
 800820a:	e7fb      	b.n	8008204 <__gethex+0x126>
 800820c:	f04f 0900 	mov.w	r9, #0
 8008210:	1cb1      	adds	r1, r6, #2
 8008212:	e7ce      	b.n	80081b2 <__gethex+0xd4>
 8008214:	f04f 0901 	mov.w	r9, #1
 8008218:	e7fa      	b.n	8008210 <__gethex+0x132>
 800821a:	230a      	movs	r3, #10
 800821c:	fb03 0202 	mla	r2, r3, r2, r0
 8008220:	3a10      	subs	r2, #16
 8008222:	e7cf      	b.n	80081c4 <__gethex+0xe6>
 8008224:	4631      	mov	r1, r6
 8008226:	e7da      	b.n	80081de <__gethex+0x100>
 8008228:	1bf3      	subs	r3, r6, r7
 800822a:	3b01      	subs	r3, #1
 800822c:	4629      	mov	r1, r5
 800822e:	2b07      	cmp	r3, #7
 8008230:	dc49      	bgt.n	80082c6 <__gethex+0x1e8>
 8008232:	9802      	ldr	r0, [sp, #8]
 8008234:	f000 fa63 	bl	80086fe <_Balloc>
 8008238:	9b01      	ldr	r3, [sp, #4]
 800823a:	f100 0914 	add.w	r9, r0, #20
 800823e:	f04f 0b00 	mov.w	fp, #0
 8008242:	f1c3 0301 	rsb	r3, r3, #1
 8008246:	4605      	mov	r5, r0
 8008248:	f8cd 9010 	str.w	r9, [sp, #16]
 800824c:	46da      	mov	sl, fp
 800824e:	9308      	str	r3, [sp, #32]
 8008250:	42b7      	cmp	r7, r6
 8008252:	d33b      	bcc.n	80082cc <__gethex+0x1ee>
 8008254:	9804      	ldr	r0, [sp, #16]
 8008256:	f840 ab04 	str.w	sl, [r0], #4
 800825a:	eba0 0009 	sub.w	r0, r0, r9
 800825e:	1080      	asrs	r0, r0, #2
 8008260:	6128      	str	r0, [r5, #16]
 8008262:	0147      	lsls	r7, r0, #5
 8008264:	4650      	mov	r0, sl
 8008266:	f000 fb0e 	bl	8008886 <__hi0bits>
 800826a:	f8d8 6000 	ldr.w	r6, [r8]
 800826e:	1a3f      	subs	r7, r7, r0
 8008270:	42b7      	cmp	r7, r6
 8008272:	dd64      	ble.n	800833e <__gethex+0x260>
 8008274:	1bbf      	subs	r7, r7, r6
 8008276:	4639      	mov	r1, r7
 8008278:	4628      	mov	r0, r5
 800827a:	f000 fe1d 	bl	8008eb8 <__any_on>
 800827e:	4682      	mov	sl, r0
 8008280:	b178      	cbz	r0, 80082a2 <__gethex+0x1c4>
 8008282:	1e7b      	subs	r3, r7, #1
 8008284:	1159      	asrs	r1, r3, #5
 8008286:	f003 021f 	and.w	r2, r3, #31
 800828a:	f04f 0a01 	mov.w	sl, #1
 800828e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008292:	fa0a f202 	lsl.w	r2, sl, r2
 8008296:	420a      	tst	r2, r1
 8008298:	d003      	beq.n	80082a2 <__gethex+0x1c4>
 800829a:	4553      	cmp	r3, sl
 800829c:	dc46      	bgt.n	800832c <__gethex+0x24e>
 800829e:	f04f 0a02 	mov.w	sl, #2
 80082a2:	4639      	mov	r1, r7
 80082a4:	4628      	mov	r0, r5
 80082a6:	f7ff fecb 	bl	8008040 <rshift>
 80082aa:	443c      	add	r4, r7
 80082ac:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80082b0:	42a3      	cmp	r3, r4
 80082b2:	da52      	bge.n	800835a <__gethex+0x27c>
 80082b4:	4629      	mov	r1, r5
 80082b6:	9802      	ldr	r0, [sp, #8]
 80082b8:	f000 fa55 	bl	8008766 <_Bfree>
 80082bc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80082be:	2300      	movs	r3, #0
 80082c0:	6013      	str	r3, [r2, #0]
 80082c2:	27a3      	movs	r7, #163	; 0xa3
 80082c4:	e793      	b.n	80081ee <__gethex+0x110>
 80082c6:	3101      	adds	r1, #1
 80082c8:	105b      	asrs	r3, r3, #1
 80082ca:	e7b0      	b.n	800822e <__gethex+0x150>
 80082cc:	1e73      	subs	r3, r6, #1
 80082ce:	9305      	str	r3, [sp, #20]
 80082d0:	9a07      	ldr	r2, [sp, #28]
 80082d2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d018      	beq.n	800830c <__gethex+0x22e>
 80082da:	f1bb 0f20 	cmp.w	fp, #32
 80082de:	d107      	bne.n	80082f0 <__gethex+0x212>
 80082e0:	9b04      	ldr	r3, [sp, #16]
 80082e2:	f8c3 a000 	str.w	sl, [r3]
 80082e6:	3304      	adds	r3, #4
 80082e8:	f04f 0a00 	mov.w	sl, #0
 80082ec:	9304      	str	r3, [sp, #16]
 80082ee:	46d3      	mov	fp, sl
 80082f0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80082f4:	f7ff fede 	bl	80080b4 <__hexdig_fun>
 80082f8:	f000 000f 	and.w	r0, r0, #15
 80082fc:	fa00 f00b 	lsl.w	r0, r0, fp
 8008300:	ea4a 0a00 	orr.w	sl, sl, r0
 8008304:	f10b 0b04 	add.w	fp, fp, #4
 8008308:	9b05      	ldr	r3, [sp, #20]
 800830a:	e00d      	b.n	8008328 <__gethex+0x24a>
 800830c:	9b05      	ldr	r3, [sp, #20]
 800830e:	9a08      	ldr	r2, [sp, #32]
 8008310:	4413      	add	r3, r2
 8008312:	42bb      	cmp	r3, r7
 8008314:	d3e1      	bcc.n	80082da <__gethex+0x1fc>
 8008316:	4618      	mov	r0, r3
 8008318:	9a01      	ldr	r2, [sp, #4]
 800831a:	9903      	ldr	r1, [sp, #12]
 800831c:	9309      	str	r3, [sp, #36]	; 0x24
 800831e:	f001 f805 	bl	800932c <strncmp>
 8008322:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008324:	2800      	cmp	r0, #0
 8008326:	d1d8      	bne.n	80082da <__gethex+0x1fc>
 8008328:	461e      	mov	r6, r3
 800832a:	e791      	b.n	8008250 <__gethex+0x172>
 800832c:	1eb9      	subs	r1, r7, #2
 800832e:	4628      	mov	r0, r5
 8008330:	f000 fdc2 	bl	8008eb8 <__any_on>
 8008334:	2800      	cmp	r0, #0
 8008336:	d0b2      	beq.n	800829e <__gethex+0x1c0>
 8008338:	f04f 0a03 	mov.w	sl, #3
 800833c:	e7b1      	b.n	80082a2 <__gethex+0x1c4>
 800833e:	da09      	bge.n	8008354 <__gethex+0x276>
 8008340:	1bf7      	subs	r7, r6, r7
 8008342:	4629      	mov	r1, r5
 8008344:	463a      	mov	r2, r7
 8008346:	9802      	ldr	r0, [sp, #8]
 8008348:	f000 fbd8 	bl	8008afc <__lshift>
 800834c:	1be4      	subs	r4, r4, r7
 800834e:	4605      	mov	r5, r0
 8008350:	f100 0914 	add.w	r9, r0, #20
 8008354:	f04f 0a00 	mov.w	sl, #0
 8008358:	e7a8      	b.n	80082ac <__gethex+0x1ce>
 800835a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800835e:	42a0      	cmp	r0, r4
 8008360:	dd6a      	ble.n	8008438 <__gethex+0x35a>
 8008362:	1b04      	subs	r4, r0, r4
 8008364:	42a6      	cmp	r6, r4
 8008366:	dc2e      	bgt.n	80083c6 <__gethex+0x2e8>
 8008368:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800836c:	2b02      	cmp	r3, #2
 800836e:	d022      	beq.n	80083b6 <__gethex+0x2d8>
 8008370:	2b03      	cmp	r3, #3
 8008372:	d024      	beq.n	80083be <__gethex+0x2e0>
 8008374:	2b01      	cmp	r3, #1
 8008376:	d115      	bne.n	80083a4 <__gethex+0x2c6>
 8008378:	42a6      	cmp	r6, r4
 800837a:	d113      	bne.n	80083a4 <__gethex+0x2c6>
 800837c:	2e01      	cmp	r6, #1
 800837e:	dc0b      	bgt.n	8008398 <__gethex+0x2ba>
 8008380:	9a06      	ldr	r2, [sp, #24]
 8008382:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008386:	6013      	str	r3, [r2, #0]
 8008388:	2301      	movs	r3, #1
 800838a:	612b      	str	r3, [r5, #16]
 800838c:	f8c9 3000 	str.w	r3, [r9]
 8008390:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008392:	2762      	movs	r7, #98	; 0x62
 8008394:	601d      	str	r5, [r3, #0]
 8008396:	e72a      	b.n	80081ee <__gethex+0x110>
 8008398:	1e71      	subs	r1, r6, #1
 800839a:	4628      	mov	r0, r5
 800839c:	f000 fd8c 	bl	8008eb8 <__any_on>
 80083a0:	2800      	cmp	r0, #0
 80083a2:	d1ed      	bne.n	8008380 <__gethex+0x2a2>
 80083a4:	4629      	mov	r1, r5
 80083a6:	9802      	ldr	r0, [sp, #8]
 80083a8:	f000 f9dd 	bl	8008766 <_Bfree>
 80083ac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80083ae:	2300      	movs	r3, #0
 80083b0:	6013      	str	r3, [r2, #0]
 80083b2:	2750      	movs	r7, #80	; 0x50
 80083b4:	e71b      	b.n	80081ee <__gethex+0x110>
 80083b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d0e1      	beq.n	8008380 <__gethex+0x2a2>
 80083bc:	e7f2      	b.n	80083a4 <__gethex+0x2c6>
 80083be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d1dd      	bne.n	8008380 <__gethex+0x2a2>
 80083c4:	e7ee      	b.n	80083a4 <__gethex+0x2c6>
 80083c6:	1e67      	subs	r7, r4, #1
 80083c8:	f1ba 0f00 	cmp.w	sl, #0
 80083cc:	d131      	bne.n	8008432 <__gethex+0x354>
 80083ce:	b127      	cbz	r7, 80083da <__gethex+0x2fc>
 80083d0:	4639      	mov	r1, r7
 80083d2:	4628      	mov	r0, r5
 80083d4:	f000 fd70 	bl	8008eb8 <__any_on>
 80083d8:	4682      	mov	sl, r0
 80083da:	117a      	asrs	r2, r7, #5
 80083dc:	2301      	movs	r3, #1
 80083de:	f007 071f 	and.w	r7, r7, #31
 80083e2:	fa03 f707 	lsl.w	r7, r3, r7
 80083e6:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80083ea:	4621      	mov	r1, r4
 80083ec:	421f      	tst	r7, r3
 80083ee:	4628      	mov	r0, r5
 80083f0:	bf18      	it	ne
 80083f2:	f04a 0a02 	orrne.w	sl, sl, #2
 80083f6:	1b36      	subs	r6, r6, r4
 80083f8:	f7ff fe22 	bl	8008040 <rshift>
 80083fc:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8008400:	2702      	movs	r7, #2
 8008402:	f1ba 0f00 	cmp.w	sl, #0
 8008406:	d048      	beq.n	800849a <__gethex+0x3bc>
 8008408:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800840c:	2b02      	cmp	r3, #2
 800840e:	d015      	beq.n	800843c <__gethex+0x35e>
 8008410:	2b03      	cmp	r3, #3
 8008412:	d017      	beq.n	8008444 <__gethex+0x366>
 8008414:	2b01      	cmp	r3, #1
 8008416:	d109      	bne.n	800842c <__gethex+0x34e>
 8008418:	f01a 0f02 	tst.w	sl, #2
 800841c:	d006      	beq.n	800842c <__gethex+0x34e>
 800841e:	f8d9 3000 	ldr.w	r3, [r9]
 8008422:	ea4a 0a03 	orr.w	sl, sl, r3
 8008426:	f01a 0f01 	tst.w	sl, #1
 800842a:	d10e      	bne.n	800844a <__gethex+0x36c>
 800842c:	f047 0710 	orr.w	r7, r7, #16
 8008430:	e033      	b.n	800849a <__gethex+0x3bc>
 8008432:	f04f 0a01 	mov.w	sl, #1
 8008436:	e7d0      	b.n	80083da <__gethex+0x2fc>
 8008438:	2701      	movs	r7, #1
 800843a:	e7e2      	b.n	8008402 <__gethex+0x324>
 800843c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800843e:	f1c3 0301 	rsb	r3, r3, #1
 8008442:	9315      	str	r3, [sp, #84]	; 0x54
 8008444:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008446:	2b00      	cmp	r3, #0
 8008448:	d0f0      	beq.n	800842c <__gethex+0x34e>
 800844a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800844e:	f105 0314 	add.w	r3, r5, #20
 8008452:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8008456:	eb03 010a 	add.w	r1, r3, sl
 800845a:	f04f 0c00 	mov.w	ip, #0
 800845e:	4618      	mov	r0, r3
 8008460:	f853 2b04 	ldr.w	r2, [r3], #4
 8008464:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8008468:	d01c      	beq.n	80084a4 <__gethex+0x3c6>
 800846a:	3201      	adds	r2, #1
 800846c:	6002      	str	r2, [r0, #0]
 800846e:	2f02      	cmp	r7, #2
 8008470:	f105 0314 	add.w	r3, r5, #20
 8008474:	d138      	bne.n	80084e8 <__gethex+0x40a>
 8008476:	f8d8 2000 	ldr.w	r2, [r8]
 800847a:	3a01      	subs	r2, #1
 800847c:	42b2      	cmp	r2, r6
 800847e:	d10a      	bne.n	8008496 <__gethex+0x3b8>
 8008480:	1171      	asrs	r1, r6, #5
 8008482:	2201      	movs	r2, #1
 8008484:	f006 061f 	and.w	r6, r6, #31
 8008488:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800848c:	fa02 f606 	lsl.w	r6, r2, r6
 8008490:	421e      	tst	r6, r3
 8008492:	bf18      	it	ne
 8008494:	4617      	movne	r7, r2
 8008496:	f047 0720 	orr.w	r7, r7, #32
 800849a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800849c:	601d      	str	r5, [r3, #0]
 800849e:	9b06      	ldr	r3, [sp, #24]
 80084a0:	601c      	str	r4, [r3, #0]
 80084a2:	e6a4      	b.n	80081ee <__gethex+0x110>
 80084a4:	4299      	cmp	r1, r3
 80084a6:	f843 cc04 	str.w	ip, [r3, #-4]
 80084aa:	d8d8      	bhi.n	800845e <__gethex+0x380>
 80084ac:	68ab      	ldr	r3, [r5, #8]
 80084ae:	4599      	cmp	r9, r3
 80084b0:	db12      	blt.n	80084d8 <__gethex+0x3fa>
 80084b2:	6869      	ldr	r1, [r5, #4]
 80084b4:	9802      	ldr	r0, [sp, #8]
 80084b6:	3101      	adds	r1, #1
 80084b8:	f000 f921 	bl	80086fe <_Balloc>
 80084bc:	692a      	ldr	r2, [r5, #16]
 80084be:	3202      	adds	r2, #2
 80084c0:	f105 010c 	add.w	r1, r5, #12
 80084c4:	4683      	mov	fp, r0
 80084c6:	0092      	lsls	r2, r2, #2
 80084c8:	300c      	adds	r0, #12
 80084ca:	f000 f90d 	bl	80086e8 <memcpy>
 80084ce:	4629      	mov	r1, r5
 80084d0:	9802      	ldr	r0, [sp, #8]
 80084d2:	f000 f948 	bl	8008766 <_Bfree>
 80084d6:	465d      	mov	r5, fp
 80084d8:	692b      	ldr	r3, [r5, #16]
 80084da:	1c5a      	adds	r2, r3, #1
 80084dc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80084e0:	612a      	str	r2, [r5, #16]
 80084e2:	2201      	movs	r2, #1
 80084e4:	615a      	str	r2, [r3, #20]
 80084e6:	e7c2      	b.n	800846e <__gethex+0x390>
 80084e8:	692a      	ldr	r2, [r5, #16]
 80084ea:	454a      	cmp	r2, r9
 80084ec:	dd0b      	ble.n	8008506 <__gethex+0x428>
 80084ee:	2101      	movs	r1, #1
 80084f0:	4628      	mov	r0, r5
 80084f2:	f7ff fda5 	bl	8008040 <rshift>
 80084f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80084fa:	3401      	adds	r4, #1
 80084fc:	42a3      	cmp	r3, r4
 80084fe:	f6ff aed9 	blt.w	80082b4 <__gethex+0x1d6>
 8008502:	2701      	movs	r7, #1
 8008504:	e7c7      	b.n	8008496 <__gethex+0x3b8>
 8008506:	f016 061f 	ands.w	r6, r6, #31
 800850a:	d0fa      	beq.n	8008502 <__gethex+0x424>
 800850c:	449a      	add	sl, r3
 800850e:	f1c6 0620 	rsb	r6, r6, #32
 8008512:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8008516:	f000 f9b6 	bl	8008886 <__hi0bits>
 800851a:	42b0      	cmp	r0, r6
 800851c:	dbe7      	blt.n	80084ee <__gethex+0x410>
 800851e:	e7f0      	b.n	8008502 <__gethex+0x424>

08008520 <L_shift>:
 8008520:	f1c2 0208 	rsb	r2, r2, #8
 8008524:	0092      	lsls	r2, r2, #2
 8008526:	b570      	push	{r4, r5, r6, lr}
 8008528:	f1c2 0620 	rsb	r6, r2, #32
 800852c:	6843      	ldr	r3, [r0, #4]
 800852e:	6804      	ldr	r4, [r0, #0]
 8008530:	fa03 f506 	lsl.w	r5, r3, r6
 8008534:	432c      	orrs	r4, r5
 8008536:	40d3      	lsrs	r3, r2
 8008538:	6004      	str	r4, [r0, #0]
 800853a:	f840 3f04 	str.w	r3, [r0, #4]!
 800853e:	4288      	cmp	r0, r1
 8008540:	d3f4      	bcc.n	800852c <L_shift+0xc>
 8008542:	bd70      	pop	{r4, r5, r6, pc}

08008544 <__match>:
 8008544:	b530      	push	{r4, r5, lr}
 8008546:	6803      	ldr	r3, [r0, #0]
 8008548:	3301      	adds	r3, #1
 800854a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800854e:	b914      	cbnz	r4, 8008556 <__match+0x12>
 8008550:	6003      	str	r3, [r0, #0]
 8008552:	2001      	movs	r0, #1
 8008554:	bd30      	pop	{r4, r5, pc}
 8008556:	f813 2b01 	ldrb.w	r2, [r3], #1
 800855a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800855e:	2d19      	cmp	r5, #25
 8008560:	bf98      	it	ls
 8008562:	3220      	addls	r2, #32
 8008564:	42a2      	cmp	r2, r4
 8008566:	d0f0      	beq.n	800854a <__match+0x6>
 8008568:	2000      	movs	r0, #0
 800856a:	e7f3      	b.n	8008554 <__match+0x10>

0800856c <__hexnan>:
 800856c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008570:	680b      	ldr	r3, [r1, #0]
 8008572:	6801      	ldr	r1, [r0, #0]
 8008574:	115f      	asrs	r7, r3, #5
 8008576:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800857a:	f013 031f 	ands.w	r3, r3, #31
 800857e:	b087      	sub	sp, #28
 8008580:	bf18      	it	ne
 8008582:	3704      	addne	r7, #4
 8008584:	2500      	movs	r5, #0
 8008586:	1f3e      	subs	r6, r7, #4
 8008588:	4682      	mov	sl, r0
 800858a:	4690      	mov	r8, r2
 800858c:	9301      	str	r3, [sp, #4]
 800858e:	f847 5c04 	str.w	r5, [r7, #-4]
 8008592:	46b1      	mov	r9, r6
 8008594:	4634      	mov	r4, r6
 8008596:	9502      	str	r5, [sp, #8]
 8008598:	46ab      	mov	fp, r5
 800859a:	784a      	ldrb	r2, [r1, #1]
 800859c:	1c4b      	adds	r3, r1, #1
 800859e:	9303      	str	r3, [sp, #12]
 80085a0:	b342      	cbz	r2, 80085f4 <__hexnan+0x88>
 80085a2:	4610      	mov	r0, r2
 80085a4:	9105      	str	r1, [sp, #20]
 80085a6:	9204      	str	r2, [sp, #16]
 80085a8:	f7ff fd84 	bl	80080b4 <__hexdig_fun>
 80085ac:	2800      	cmp	r0, #0
 80085ae:	d143      	bne.n	8008638 <__hexnan+0xcc>
 80085b0:	9a04      	ldr	r2, [sp, #16]
 80085b2:	9905      	ldr	r1, [sp, #20]
 80085b4:	2a20      	cmp	r2, #32
 80085b6:	d818      	bhi.n	80085ea <__hexnan+0x7e>
 80085b8:	9b02      	ldr	r3, [sp, #8]
 80085ba:	459b      	cmp	fp, r3
 80085bc:	dd13      	ble.n	80085e6 <__hexnan+0x7a>
 80085be:	454c      	cmp	r4, r9
 80085c0:	d206      	bcs.n	80085d0 <__hexnan+0x64>
 80085c2:	2d07      	cmp	r5, #7
 80085c4:	dc04      	bgt.n	80085d0 <__hexnan+0x64>
 80085c6:	462a      	mov	r2, r5
 80085c8:	4649      	mov	r1, r9
 80085ca:	4620      	mov	r0, r4
 80085cc:	f7ff ffa8 	bl	8008520 <L_shift>
 80085d0:	4544      	cmp	r4, r8
 80085d2:	d944      	bls.n	800865e <__hexnan+0xf2>
 80085d4:	2300      	movs	r3, #0
 80085d6:	f1a4 0904 	sub.w	r9, r4, #4
 80085da:	f844 3c04 	str.w	r3, [r4, #-4]
 80085de:	f8cd b008 	str.w	fp, [sp, #8]
 80085e2:	464c      	mov	r4, r9
 80085e4:	461d      	mov	r5, r3
 80085e6:	9903      	ldr	r1, [sp, #12]
 80085e8:	e7d7      	b.n	800859a <__hexnan+0x2e>
 80085ea:	2a29      	cmp	r2, #41	; 0x29
 80085ec:	d14a      	bne.n	8008684 <__hexnan+0x118>
 80085ee:	3102      	adds	r1, #2
 80085f0:	f8ca 1000 	str.w	r1, [sl]
 80085f4:	f1bb 0f00 	cmp.w	fp, #0
 80085f8:	d044      	beq.n	8008684 <__hexnan+0x118>
 80085fa:	454c      	cmp	r4, r9
 80085fc:	d206      	bcs.n	800860c <__hexnan+0xa0>
 80085fe:	2d07      	cmp	r5, #7
 8008600:	dc04      	bgt.n	800860c <__hexnan+0xa0>
 8008602:	462a      	mov	r2, r5
 8008604:	4649      	mov	r1, r9
 8008606:	4620      	mov	r0, r4
 8008608:	f7ff ff8a 	bl	8008520 <L_shift>
 800860c:	4544      	cmp	r4, r8
 800860e:	d928      	bls.n	8008662 <__hexnan+0xf6>
 8008610:	4643      	mov	r3, r8
 8008612:	f854 2b04 	ldr.w	r2, [r4], #4
 8008616:	f843 2b04 	str.w	r2, [r3], #4
 800861a:	42a6      	cmp	r6, r4
 800861c:	d2f9      	bcs.n	8008612 <__hexnan+0xa6>
 800861e:	2200      	movs	r2, #0
 8008620:	f843 2b04 	str.w	r2, [r3], #4
 8008624:	429e      	cmp	r6, r3
 8008626:	d2fb      	bcs.n	8008620 <__hexnan+0xb4>
 8008628:	6833      	ldr	r3, [r6, #0]
 800862a:	b91b      	cbnz	r3, 8008634 <__hexnan+0xc8>
 800862c:	4546      	cmp	r6, r8
 800862e:	d127      	bne.n	8008680 <__hexnan+0x114>
 8008630:	2301      	movs	r3, #1
 8008632:	6033      	str	r3, [r6, #0]
 8008634:	2005      	movs	r0, #5
 8008636:	e026      	b.n	8008686 <__hexnan+0x11a>
 8008638:	3501      	adds	r5, #1
 800863a:	2d08      	cmp	r5, #8
 800863c:	f10b 0b01 	add.w	fp, fp, #1
 8008640:	dd06      	ble.n	8008650 <__hexnan+0xe4>
 8008642:	4544      	cmp	r4, r8
 8008644:	d9cf      	bls.n	80085e6 <__hexnan+0x7a>
 8008646:	2300      	movs	r3, #0
 8008648:	f844 3c04 	str.w	r3, [r4, #-4]
 800864c:	2501      	movs	r5, #1
 800864e:	3c04      	subs	r4, #4
 8008650:	6822      	ldr	r2, [r4, #0]
 8008652:	f000 000f 	and.w	r0, r0, #15
 8008656:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800865a:	6020      	str	r0, [r4, #0]
 800865c:	e7c3      	b.n	80085e6 <__hexnan+0x7a>
 800865e:	2508      	movs	r5, #8
 8008660:	e7c1      	b.n	80085e6 <__hexnan+0x7a>
 8008662:	9b01      	ldr	r3, [sp, #4]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d0df      	beq.n	8008628 <__hexnan+0xbc>
 8008668:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800866c:	f1c3 0320 	rsb	r3, r3, #32
 8008670:	fa22 f303 	lsr.w	r3, r2, r3
 8008674:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8008678:	401a      	ands	r2, r3
 800867a:	f847 2c04 	str.w	r2, [r7, #-4]
 800867e:	e7d3      	b.n	8008628 <__hexnan+0xbc>
 8008680:	3e04      	subs	r6, #4
 8008682:	e7d1      	b.n	8008628 <__hexnan+0xbc>
 8008684:	2004      	movs	r0, #4
 8008686:	b007      	add	sp, #28
 8008688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800868c <__locale_ctype_ptr_l>:
 800868c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8008690:	4770      	bx	lr

08008692 <__localeconv_l>:
 8008692:	30f0      	adds	r0, #240	; 0xf0
 8008694:	4770      	bx	lr
	...

08008698 <_localeconv_r>:
 8008698:	4b04      	ldr	r3, [pc, #16]	; (80086ac <_localeconv_r+0x14>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	6a18      	ldr	r0, [r3, #32]
 800869e:	4b04      	ldr	r3, [pc, #16]	; (80086b0 <_localeconv_r+0x18>)
 80086a0:	2800      	cmp	r0, #0
 80086a2:	bf08      	it	eq
 80086a4:	4618      	moveq	r0, r3
 80086a6:	30f0      	adds	r0, #240	; 0xf0
 80086a8:	4770      	bx	lr
 80086aa:	bf00      	nop
 80086ac:	2000000c 	.word	0x2000000c
 80086b0:	20000070 	.word	0x20000070

080086b4 <malloc>:
 80086b4:	4b02      	ldr	r3, [pc, #8]	; (80086c0 <malloc+0xc>)
 80086b6:	4601      	mov	r1, r0
 80086b8:	6818      	ldr	r0, [r3, #0]
 80086ba:	f000 bc7b 	b.w	8008fb4 <_malloc_r>
 80086be:	bf00      	nop
 80086c0:	2000000c 	.word	0x2000000c

080086c4 <__ascii_mbtowc>:
 80086c4:	b082      	sub	sp, #8
 80086c6:	b901      	cbnz	r1, 80086ca <__ascii_mbtowc+0x6>
 80086c8:	a901      	add	r1, sp, #4
 80086ca:	b142      	cbz	r2, 80086de <__ascii_mbtowc+0x1a>
 80086cc:	b14b      	cbz	r3, 80086e2 <__ascii_mbtowc+0x1e>
 80086ce:	7813      	ldrb	r3, [r2, #0]
 80086d0:	600b      	str	r3, [r1, #0]
 80086d2:	7812      	ldrb	r2, [r2, #0]
 80086d4:	1c10      	adds	r0, r2, #0
 80086d6:	bf18      	it	ne
 80086d8:	2001      	movne	r0, #1
 80086da:	b002      	add	sp, #8
 80086dc:	4770      	bx	lr
 80086de:	4610      	mov	r0, r2
 80086e0:	e7fb      	b.n	80086da <__ascii_mbtowc+0x16>
 80086e2:	f06f 0001 	mvn.w	r0, #1
 80086e6:	e7f8      	b.n	80086da <__ascii_mbtowc+0x16>

080086e8 <memcpy>:
 80086e8:	b510      	push	{r4, lr}
 80086ea:	1e43      	subs	r3, r0, #1
 80086ec:	440a      	add	r2, r1
 80086ee:	4291      	cmp	r1, r2
 80086f0:	d100      	bne.n	80086f4 <memcpy+0xc>
 80086f2:	bd10      	pop	{r4, pc}
 80086f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80086f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80086fc:	e7f7      	b.n	80086ee <memcpy+0x6>

080086fe <_Balloc>:
 80086fe:	b570      	push	{r4, r5, r6, lr}
 8008700:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008702:	4604      	mov	r4, r0
 8008704:	460e      	mov	r6, r1
 8008706:	b93d      	cbnz	r5, 8008718 <_Balloc+0x1a>
 8008708:	2010      	movs	r0, #16
 800870a:	f7ff ffd3 	bl	80086b4 <malloc>
 800870e:	6260      	str	r0, [r4, #36]	; 0x24
 8008710:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008714:	6005      	str	r5, [r0, #0]
 8008716:	60c5      	str	r5, [r0, #12]
 8008718:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800871a:	68eb      	ldr	r3, [r5, #12]
 800871c:	b183      	cbz	r3, 8008740 <_Balloc+0x42>
 800871e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008720:	68db      	ldr	r3, [r3, #12]
 8008722:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008726:	b9b8      	cbnz	r0, 8008758 <_Balloc+0x5a>
 8008728:	2101      	movs	r1, #1
 800872a:	fa01 f506 	lsl.w	r5, r1, r6
 800872e:	1d6a      	adds	r2, r5, #5
 8008730:	0092      	lsls	r2, r2, #2
 8008732:	4620      	mov	r0, r4
 8008734:	f000 fbe1 	bl	8008efa <_calloc_r>
 8008738:	b160      	cbz	r0, 8008754 <_Balloc+0x56>
 800873a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800873e:	e00e      	b.n	800875e <_Balloc+0x60>
 8008740:	2221      	movs	r2, #33	; 0x21
 8008742:	2104      	movs	r1, #4
 8008744:	4620      	mov	r0, r4
 8008746:	f000 fbd8 	bl	8008efa <_calloc_r>
 800874a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800874c:	60e8      	str	r0, [r5, #12]
 800874e:	68db      	ldr	r3, [r3, #12]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d1e4      	bne.n	800871e <_Balloc+0x20>
 8008754:	2000      	movs	r0, #0
 8008756:	bd70      	pop	{r4, r5, r6, pc}
 8008758:	6802      	ldr	r2, [r0, #0]
 800875a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800875e:	2300      	movs	r3, #0
 8008760:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008764:	e7f7      	b.n	8008756 <_Balloc+0x58>

08008766 <_Bfree>:
 8008766:	b570      	push	{r4, r5, r6, lr}
 8008768:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800876a:	4606      	mov	r6, r0
 800876c:	460d      	mov	r5, r1
 800876e:	b93c      	cbnz	r4, 8008780 <_Bfree+0x1a>
 8008770:	2010      	movs	r0, #16
 8008772:	f7ff ff9f 	bl	80086b4 <malloc>
 8008776:	6270      	str	r0, [r6, #36]	; 0x24
 8008778:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800877c:	6004      	str	r4, [r0, #0]
 800877e:	60c4      	str	r4, [r0, #12]
 8008780:	b13d      	cbz	r5, 8008792 <_Bfree+0x2c>
 8008782:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008784:	686a      	ldr	r2, [r5, #4]
 8008786:	68db      	ldr	r3, [r3, #12]
 8008788:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800878c:	6029      	str	r1, [r5, #0]
 800878e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008792:	bd70      	pop	{r4, r5, r6, pc}

08008794 <__multadd>:
 8008794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008798:	690d      	ldr	r5, [r1, #16]
 800879a:	461f      	mov	r7, r3
 800879c:	4606      	mov	r6, r0
 800879e:	460c      	mov	r4, r1
 80087a0:	f101 0c14 	add.w	ip, r1, #20
 80087a4:	2300      	movs	r3, #0
 80087a6:	f8dc 0000 	ldr.w	r0, [ip]
 80087aa:	b281      	uxth	r1, r0
 80087ac:	fb02 7101 	mla	r1, r2, r1, r7
 80087b0:	0c0f      	lsrs	r7, r1, #16
 80087b2:	0c00      	lsrs	r0, r0, #16
 80087b4:	fb02 7000 	mla	r0, r2, r0, r7
 80087b8:	b289      	uxth	r1, r1
 80087ba:	3301      	adds	r3, #1
 80087bc:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80087c0:	429d      	cmp	r5, r3
 80087c2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80087c6:	f84c 1b04 	str.w	r1, [ip], #4
 80087ca:	dcec      	bgt.n	80087a6 <__multadd+0x12>
 80087cc:	b1d7      	cbz	r7, 8008804 <__multadd+0x70>
 80087ce:	68a3      	ldr	r3, [r4, #8]
 80087d0:	42ab      	cmp	r3, r5
 80087d2:	dc12      	bgt.n	80087fa <__multadd+0x66>
 80087d4:	6861      	ldr	r1, [r4, #4]
 80087d6:	4630      	mov	r0, r6
 80087d8:	3101      	adds	r1, #1
 80087da:	f7ff ff90 	bl	80086fe <_Balloc>
 80087de:	6922      	ldr	r2, [r4, #16]
 80087e0:	3202      	adds	r2, #2
 80087e2:	f104 010c 	add.w	r1, r4, #12
 80087e6:	4680      	mov	r8, r0
 80087e8:	0092      	lsls	r2, r2, #2
 80087ea:	300c      	adds	r0, #12
 80087ec:	f7ff ff7c 	bl	80086e8 <memcpy>
 80087f0:	4621      	mov	r1, r4
 80087f2:	4630      	mov	r0, r6
 80087f4:	f7ff ffb7 	bl	8008766 <_Bfree>
 80087f8:	4644      	mov	r4, r8
 80087fa:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80087fe:	3501      	adds	r5, #1
 8008800:	615f      	str	r7, [r3, #20]
 8008802:	6125      	str	r5, [r4, #16]
 8008804:	4620      	mov	r0, r4
 8008806:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800880a <__s2b>:
 800880a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800880e:	460c      	mov	r4, r1
 8008810:	4615      	mov	r5, r2
 8008812:	461f      	mov	r7, r3
 8008814:	2209      	movs	r2, #9
 8008816:	3308      	adds	r3, #8
 8008818:	4606      	mov	r6, r0
 800881a:	fb93 f3f2 	sdiv	r3, r3, r2
 800881e:	2100      	movs	r1, #0
 8008820:	2201      	movs	r2, #1
 8008822:	429a      	cmp	r2, r3
 8008824:	db20      	blt.n	8008868 <__s2b+0x5e>
 8008826:	4630      	mov	r0, r6
 8008828:	f7ff ff69 	bl	80086fe <_Balloc>
 800882c:	9b08      	ldr	r3, [sp, #32]
 800882e:	6143      	str	r3, [r0, #20]
 8008830:	2d09      	cmp	r5, #9
 8008832:	f04f 0301 	mov.w	r3, #1
 8008836:	6103      	str	r3, [r0, #16]
 8008838:	dd19      	ble.n	800886e <__s2b+0x64>
 800883a:	f104 0809 	add.w	r8, r4, #9
 800883e:	46c1      	mov	r9, r8
 8008840:	442c      	add	r4, r5
 8008842:	f819 3b01 	ldrb.w	r3, [r9], #1
 8008846:	4601      	mov	r1, r0
 8008848:	3b30      	subs	r3, #48	; 0x30
 800884a:	220a      	movs	r2, #10
 800884c:	4630      	mov	r0, r6
 800884e:	f7ff ffa1 	bl	8008794 <__multadd>
 8008852:	45a1      	cmp	r9, r4
 8008854:	d1f5      	bne.n	8008842 <__s2b+0x38>
 8008856:	eb08 0405 	add.w	r4, r8, r5
 800885a:	3c08      	subs	r4, #8
 800885c:	1b2d      	subs	r5, r5, r4
 800885e:	1963      	adds	r3, r4, r5
 8008860:	42bb      	cmp	r3, r7
 8008862:	db07      	blt.n	8008874 <__s2b+0x6a>
 8008864:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008868:	0052      	lsls	r2, r2, #1
 800886a:	3101      	adds	r1, #1
 800886c:	e7d9      	b.n	8008822 <__s2b+0x18>
 800886e:	340a      	adds	r4, #10
 8008870:	2509      	movs	r5, #9
 8008872:	e7f3      	b.n	800885c <__s2b+0x52>
 8008874:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008878:	4601      	mov	r1, r0
 800887a:	3b30      	subs	r3, #48	; 0x30
 800887c:	220a      	movs	r2, #10
 800887e:	4630      	mov	r0, r6
 8008880:	f7ff ff88 	bl	8008794 <__multadd>
 8008884:	e7eb      	b.n	800885e <__s2b+0x54>

08008886 <__hi0bits>:
 8008886:	0c02      	lsrs	r2, r0, #16
 8008888:	0412      	lsls	r2, r2, #16
 800888a:	4603      	mov	r3, r0
 800888c:	b9b2      	cbnz	r2, 80088bc <__hi0bits+0x36>
 800888e:	0403      	lsls	r3, r0, #16
 8008890:	2010      	movs	r0, #16
 8008892:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008896:	bf04      	itt	eq
 8008898:	021b      	lsleq	r3, r3, #8
 800889a:	3008      	addeq	r0, #8
 800889c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80088a0:	bf04      	itt	eq
 80088a2:	011b      	lsleq	r3, r3, #4
 80088a4:	3004      	addeq	r0, #4
 80088a6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80088aa:	bf04      	itt	eq
 80088ac:	009b      	lsleq	r3, r3, #2
 80088ae:	3002      	addeq	r0, #2
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	db06      	blt.n	80088c2 <__hi0bits+0x3c>
 80088b4:	005b      	lsls	r3, r3, #1
 80088b6:	d503      	bpl.n	80088c0 <__hi0bits+0x3a>
 80088b8:	3001      	adds	r0, #1
 80088ba:	4770      	bx	lr
 80088bc:	2000      	movs	r0, #0
 80088be:	e7e8      	b.n	8008892 <__hi0bits+0xc>
 80088c0:	2020      	movs	r0, #32
 80088c2:	4770      	bx	lr

080088c4 <__lo0bits>:
 80088c4:	6803      	ldr	r3, [r0, #0]
 80088c6:	f013 0207 	ands.w	r2, r3, #7
 80088ca:	4601      	mov	r1, r0
 80088cc:	d00b      	beq.n	80088e6 <__lo0bits+0x22>
 80088ce:	07da      	lsls	r2, r3, #31
 80088d0:	d423      	bmi.n	800891a <__lo0bits+0x56>
 80088d2:	0798      	lsls	r0, r3, #30
 80088d4:	bf49      	itett	mi
 80088d6:	085b      	lsrmi	r3, r3, #1
 80088d8:	089b      	lsrpl	r3, r3, #2
 80088da:	2001      	movmi	r0, #1
 80088dc:	600b      	strmi	r3, [r1, #0]
 80088de:	bf5c      	itt	pl
 80088e0:	600b      	strpl	r3, [r1, #0]
 80088e2:	2002      	movpl	r0, #2
 80088e4:	4770      	bx	lr
 80088e6:	b298      	uxth	r0, r3
 80088e8:	b9a8      	cbnz	r0, 8008916 <__lo0bits+0x52>
 80088ea:	0c1b      	lsrs	r3, r3, #16
 80088ec:	2010      	movs	r0, #16
 80088ee:	f013 0fff 	tst.w	r3, #255	; 0xff
 80088f2:	bf04      	itt	eq
 80088f4:	0a1b      	lsreq	r3, r3, #8
 80088f6:	3008      	addeq	r0, #8
 80088f8:	071a      	lsls	r2, r3, #28
 80088fa:	bf04      	itt	eq
 80088fc:	091b      	lsreq	r3, r3, #4
 80088fe:	3004      	addeq	r0, #4
 8008900:	079a      	lsls	r2, r3, #30
 8008902:	bf04      	itt	eq
 8008904:	089b      	lsreq	r3, r3, #2
 8008906:	3002      	addeq	r0, #2
 8008908:	07da      	lsls	r2, r3, #31
 800890a:	d402      	bmi.n	8008912 <__lo0bits+0x4e>
 800890c:	085b      	lsrs	r3, r3, #1
 800890e:	d006      	beq.n	800891e <__lo0bits+0x5a>
 8008910:	3001      	adds	r0, #1
 8008912:	600b      	str	r3, [r1, #0]
 8008914:	4770      	bx	lr
 8008916:	4610      	mov	r0, r2
 8008918:	e7e9      	b.n	80088ee <__lo0bits+0x2a>
 800891a:	2000      	movs	r0, #0
 800891c:	4770      	bx	lr
 800891e:	2020      	movs	r0, #32
 8008920:	4770      	bx	lr

08008922 <__i2b>:
 8008922:	b510      	push	{r4, lr}
 8008924:	460c      	mov	r4, r1
 8008926:	2101      	movs	r1, #1
 8008928:	f7ff fee9 	bl	80086fe <_Balloc>
 800892c:	2201      	movs	r2, #1
 800892e:	6144      	str	r4, [r0, #20]
 8008930:	6102      	str	r2, [r0, #16]
 8008932:	bd10      	pop	{r4, pc}

08008934 <__multiply>:
 8008934:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008938:	4614      	mov	r4, r2
 800893a:	690a      	ldr	r2, [r1, #16]
 800893c:	6923      	ldr	r3, [r4, #16]
 800893e:	429a      	cmp	r2, r3
 8008940:	bfb8      	it	lt
 8008942:	460b      	movlt	r3, r1
 8008944:	4688      	mov	r8, r1
 8008946:	bfbc      	itt	lt
 8008948:	46a0      	movlt	r8, r4
 800894a:	461c      	movlt	r4, r3
 800894c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008950:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008954:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008958:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800895c:	eb07 0609 	add.w	r6, r7, r9
 8008960:	42b3      	cmp	r3, r6
 8008962:	bfb8      	it	lt
 8008964:	3101      	addlt	r1, #1
 8008966:	f7ff feca 	bl	80086fe <_Balloc>
 800896a:	f100 0514 	add.w	r5, r0, #20
 800896e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8008972:	462b      	mov	r3, r5
 8008974:	2200      	movs	r2, #0
 8008976:	4573      	cmp	r3, lr
 8008978:	d316      	bcc.n	80089a8 <__multiply+0x74>
 800897a:	f104 0214 	add.w	r2, r4, #20
 800897e:	f108 0114 	add.w	r1, r8, #20
 8008982:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8008986:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800898a:	9300      	str	r3, [sp, #0]
 800898c:	9b00      	ldr	r3, [sp, #0]
 800898e:	9201      	str	r2, [sp, #4]
 8008990:	4293      	cmp	r3, r2
 8008992:	d80c      	bhi.n	80089ae <__multiply+0x7a>
 8008994:	2e00      	cmp	r6, #0
 8008996:	dd03      	ble.n	80089a0 <__multiply+0x6c>
 8008998:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800899c:	2b00      	cmp	r3, #0
 800899e:	d05d      	beq.n	8008a5c <__multiply+0x128>
 80089a0:	6106      	str	r6, [r0, #16]
 80089a2:	b003      	add	sp, #12
 80089a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089a8:	f843 2b04 	str.w	r2, [r3], #4
 80089ac:	e7e3      	b.n	8008976 <__multiply+0x42>
 80089ae:	f8b2 b000 	ldrh.w	fp, [r2]
 80089b2:	f1bb 0f00 	cmp.w	fp, #0
 80089b6:	d023      	beq.n	8008a00 <__multiply+0xcc>
 80089b8:	4689      	mov	r9, r1
 80089ba:	46ac      	mov	ip, r5
 80089bc:	f04f 0800 	mov.w	r8, #0
 80089c0:	f859 4b04 	ldr.w	r4, [r9], #4
 80089c4:	f8dc a000 	ldr.w	sl, [ip]
 80089c8:	b2a3      	uxth	r3, r4
 80089ca:	fa1f fa8a 	uxth.w	sl, sl
 80089ce:	fb0b a303 	mla	r3, fp, r3, sl
 80089d2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80089d6:	f8dc 4000 	ldr.w	r4, [ip]
 80089da:	4443      	add	r3, r8
 80089dc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80089e0:	fb0b 840a 	mla	r4, fp, sl, r8
 80089e4:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80089e8:	46e2      	mov	sl, ip
 80089ea:	b29b      	uxth	r3, r3
 80089ec:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80089f0:	454f      	cmp	r7, r9
 80089f2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80089f6:	f84a 3b04 	str.w	r3, [sl], #4
 80089fa:	d82b      	bhi.n	8008a54 <__multiply+0x120>
 80089fc:	f8cc 8004 	str.w	r8, [ip, #4]
 8008a00:	9b01      	ldr	r3, [sp, #4]
 8008a02:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8008a06:	3204      	adds	r2, #4
 8008a08:	f1ba 0f00 	cmp.w	sl, #0
 8008a0c:	d020      	beq.n	8008a50 <__multiply+0x11c>
 8008a0e:	682b      	ldr	r3, [r5, #0]
 8008a10:	4689      	mov	r9, r1
 8008a12:	46a8      	mov	r8, r5
 8008a14:	f04f 0b00 	mov.w	fp, #0
 8008a18:	f8b9 c000 	ldrh.w	ip, [r9]
 8008a1c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8008a20:	fb0a 440c 	mla	r4, sl, ip, r4
 8008a24:	445c      	add	r4, fp
 8008a26:	46c4      	mov	ip, r8
 8008a28:	b29b      	uxth	r3, r3
 8008a2a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008a2e:	f84c 3b04 	str.w	r3, [ip], #4
 8008a32:	f859 3b04 	ldr.w	r3, [r9], #4
 8008a36:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8008a3a:	0c1b      	lsrs	r3, r3, #16
 8008a3c:	fb0a b303 	mla	r3, sl, r3, fp
 8008a40:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008a44:	454f      	cmp	r7, r9
 8008a46:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8008a4a:	d805      	bhi.n	8008a58 <__multiply+0x124>
 8008a4c:	f8c8 3004 	str.w	r3, [r8, #4]
 8008a50:	3504      	adds	r5, #4
 8008a52:	e79b      	b.n	800898c <__multiply+0x58>
 8008a54:	46d4      	mov	ip, sl
 8008a56:	e7b3      	b.n	80089c0 <__multiply+0x8c>
 8008a58:	46e0      	mov	r8, ip
 8008a5a:	e7dd      	b.n	8008a18 <__multiply+0xe4>
 8008a5c:	3e01      	subs	r6, #1
 8008a5e:	e799      	b.n	8008994 <__multiply+0x60>

08008a60 <__pow5mult>:
 8008a60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a64:	4615      	mov	r5, r2
 8008a66:	f012 0203 	ands.w	r2, r2, #3
 8008a6a:	4606      	mov	r6, r0
 8008a6c:	460f      	mov	r7, r1
 8008a6e:	d007      	beq.n	8008a80 <__pow5mult+0x20>
 8008a70:	3a01      	subs	r2, #1
 8008a72:	4c21      	ldr	r4, [pc, #132]	; (8008af8 <__pow5mult+0x98>)
 8008a74:	2300      	movs	r3, #0
 8008a76:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008a7a:	f7ff fe8b 	bl	8008794 <__multadd>
 8008a7e:	4607      	mov	r7, r0
 8008a80:	10ad      	asrs	r5, r5, #2
 8008a82:	d035      	beq.n	8008af0 <__pow5mult+0x90>
 8008a84:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008a86:	b93c      	cbnz	r4, 8008a98 <__pow5mult+0x38>
 8008a88:	2010      	movs	r0, #16
 8008a8a:	f7ff fe13 	bl	80086b4 <malloc>
 8008a8e:	6270      	str	r0, [r6, #36]	; 0x24
 8008a90:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008a94:	6004      	str	r4, [r0, #0]
 8008a96:	60c4      	str	r4, [r0, #12]
 8008a98:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008a9c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008aa0:	b94c      	cbnz	r4, 8008ab6 <__pow5mult+0x56>
 8008aa2:	f240 2171 	movw	r1, #625	; 0x271
 8008aa6:	4630      	mov	r0, r6
 8008aa8:	f7ff ff3b 	bl	8008922 <__i2b>
 8008aac:	2300      	movs	r3, #0
 8008aae:	f8c8 0008 	str.w	r0, [r8, #8]
 8008ab2:	4604      	mov	r4, r0
 8008ab4:	6003      	str	r3, [r0, #0]
 8008ab6:	f04f 0800 	mov.w	r8, #0
 8008aba:	07eb      	lsls	r3, r5, #31
 8008abc:	d50a      	bpl.n	8008ad4 <__pow5mult+0x74>
 8008abe:	4639      	mov	r1, r7
 8008ac0:	4622      	mov	r2, r4
 8008ac2:	4630      	mov	r0, r6
 8008ac4:	f7ff ff36 	bl	8008934 <__multiply>
 8008ac8:	4639      	mov	r1, r7
 8008aca:	4681      	mov	r9, r0
 8008acc:	4630      	mov	r0, r6
 8008ace:	f7ff fe4a 	bl	8008766 <_Bfree>
 8008ad2:	464f      	mov	r7, r9
 8008ad4:	106d      	asrs	r5, r5, #1
 8008ad6:	d00b      	beq.n	8008af0 <__pow5mult+0x90>
 8008ad8:	6820      	ldr	r0, [r4, #0]
 8008ada:	b938      	cbnz	r0, 8008aec <__pow5mult+0x8c>
 8008adc:	4622      	mov	r2, r4
 8008ade:	4621      	mov	r1, r4
 8008ae0:	4630      	mov	r0, r6
 8008ae2:	f7ff ff27 	bl	8008934 <__multiply>
 8008ae6:	6020      	str	r0, [r4, #0]
 8008ae8:	f8c0 8000 	str.w	r8, [r0]
 8008aec:	4604      	mov	r4, r0
 8008aee:	e7e4      	b.n	8008aba <__pow5mult+0x5a>
 8008af0:	4638      	mov	r0, r7
 8008af2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008af6:	bf00      	nop
 8008af8:	080095e8 	.word	0x080095e8

08008afc <__lshift>:
 8008afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b00:	460c      	mov	r4, r1
 8008b02:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008b06:	6923      	ldr	r3, [r4, #16]
 8008b08:	6849      	ldr	r1, [r1, #4]
 8008b0a:	eb0a 0903 	add.w	r9, sl, r3
 8008b0e:	68a3      	ldr	r3, [r4, #8]
 8008b10:	4607      	mov	r7, r0
 8008b12:	4616      	mov	r6, r2
 8008b14:	f109 0501 	add.w	r5, r9, #1
 8008b18:	42ab      	cmp	r3, r5
 8008b1a:	db32      	blt.n	8008b82 <__lshift+0x86>
 8008b1c:	4638      	mov	r0, r7
 8008b1e:	f7ff fdee 	bl	80086fe <_Balloc>
 8008b22:	2300      	movs	r3, #0
 8008b24:	4680      	mov	r8, r0
 8008b26:	f100 0114 	add.w	r1, r0, #20
 8008b2a:	461a      	mov	r2, r3
 8008b2c:	4553      	cmp	r3, sl
 8008b2e:	db2b      	blt.n	8008b88 <__lshift+0x8c>
 8008b30:	6920      	ldr	r0, [r4, #16]
 8008b32:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008b36:	f104 0314 	add.w	r3, r4, #20
 8008b3a:	f016 021f 	ands.w	r2, r6, #31
 8008b3e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008b42:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008b46:	d025      	beq.n	8008b94 <__lshift+0x98>
 8008b48:	f1c2 0e20 	rsb	lr, r2, #32
 8008b4c:	2000      	movs	r0, #0
 8008b4e:	681e      	ldr	r6, [r3, #0]
 8008b50:	468a      	mov	sl, r1
 8008b52:	4096      	lsls	r6, r2
 8008b54:	4330      	orrs	r0, r6
 8008b56:	f84a 0b04 	str.w	r0, [sl], #4
 8008b5a:	f853 0b04 	ldr.w	r0, [r3], #4
 8008b5e:	459c      	cmp	ip, r3
 8008b60:	fa20 f00e 	lsr.w	r0, r0, lr
 8008b64:	d814      	bhi.n	8008b90 <__lshift+0x94>
 8008b66:	6048      	str	r0, [r1, #4]
 8008b68:	b108      	cbz	r0, 8008b6e <__lshift+0x72>
 8008b6a:	f109 0502 	add.w	r5, r9, #2
 8008b6e:	3d01      	subs	r5, #1
 8008b70:	4638      	mov	r0, r7
 8008b72:	f8c8 5010 	str.w	r5, [r8, #16]
 8008b76:	4621      	mov	r1, r4
 8008b78:	f7ff fdf5 	bl	8008766 <_Bfree>
 8008b7c:	4640      	mov	r0, r8
 8008b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b82:	3101      	adds	r1, #1
 8008b84:	005b      	lsls	r3, r3, #1
 8008b86:	e7c7      	b.n	8008b18 <__lshift+0x1c>
 8008b88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008b8c:	3301      	adds	r3, #1
 8008b8e:	e7cd      	b.n	8008b2c <__lshift+0x30>
 8008b90:	4651      	mov	r1, sl
 8008b92:	e7dc      	b.n	8008b4e <__lshift+0x52>
 8008b94:	3904      	subs	r1, #4
 8008b96:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b9a:	f841 2f04 	str.w	r2, [r1, #4]!
 8008b9e:	459c      	cmp	ip, r3
 8008ba0:	d8f9      	bhi.n	8008b96 <__lshift+0x9a>
 8008ba2:	e7e4      	b.n	8008b6e <__lshift+0x72>

08008ba4 <__mcmp>:
 8008ba4:	6903      	ldr	r3, [r0, #16]
 8008ba6:	690a      	ldr	r2, [r1, #16]
 8008ba8:	1a9b      	subs	r3, r3, r2
 8008baa:	b530      	push	{r4, r5, lr}
 8008bac:	d10c      	bne.n	8008bc8 <__mcmp+0x24>
 8008bae:	0092      	lsls	r2, r2, #2
 8008bb0:	3014      	adds	r0, #20
 8008bb2:	3114      	adds	r1, #20
 8008bb4:	1884      	adds	r4, r0, r2
 8008bb6:	4411      	add	r1, r2
 8008bb8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008bbc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008bc0:	4295      	cmp	r5, r2
 8008bc2:	d003      	beq.n	8008bcc <__mcmp+0x28>
 8008bc4:	d305      	bcc.n	8008bd2 <__mcmp+0x2e>
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	4618      	mov	r0, r3
 8008bca:	bd30      	pop	{r4, r5, pc}
 8008bcc:	42a0      	cmp	r0, r4
 8008bce:	d3f3      	bcc.n	8008bb8 <__mcmp+0x14>
 8008bd0:	e7fa      	b.n	8008bc8 <__mcmp+0x24>
 8008bd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008bd6:	e7f7      	b.n	8008bc8 <__mcmp+0x24>

08008bd8 <__mdiff>:
 8008bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bdc:	460d      	mov	r5, r1
 8008bde:	4607      	mov	r7, r0
 8008be0:	4611      	mov	r1, r2
 8008be2:	4628      	mov	r0, r5
 8008be4:	4614      	mov	r4, r2
 8008be6:	f7ff ffdd 	bl	8008ba4 <__mcmp>
 8008bea:	1e06      	subs	r6, r0, #0
 8008bec:	d108      	bne.n	8008c00 <__mdiff+0x28>
 8008bee:	4631      	mov	r1, r6
 8008bf0:	4638      	mov	r0, r7
 8008bf2:	f7ff fd84 	bl	80086fe <_Balloc>
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008bfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c00:	bfa4      	itt	ge
 8008c02:	4623      	movge	r3, r4
 8008c04:	462c      	movge	r4, r5
 8008c06:	4638      	mov	r0, r7
 8008c08:	6861      	ldr	r1, [r4, #4]
 8008c0a:	bfa6      	itte	ge
 8008c0c:	461d      	movge	r5, r3
 8008c0e:	2600      	movge	r6, #0
 8008c10:	2601      	movlt	r6, #1
 8008c12:	f7ff fd74 	bl	80086fe <_Balloc>
 8008c16:	692b      	ldr	r3, [r5, #16]
 8008c18:	60c6      	str	r6, [r0, #12]
 8008c1a:	6926      	ldr	r6, [r4, #16]
 8008c1c:	f105 0914 	add.w	r9, r5, #20
 8008c20:	f104 0214 	add.w	r2, r4, #20
 8008c24:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8008c28:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8008c2c:	f100 0514 	add.w	r5, r0, #20
 8008c30:	f04f 0e00 	mov.w	lr, #0
 8008c34:	f852 ab04 	ldr.w	sl, [r2], #4
 8008c38:	f859 4b04 	ldr.w	r4, [r9], #4
 8008c3c:	fa1e f18a 	uxtah	r1, lr, sl
 8008c40:	b2a3      	uxth	r3, r4
 8008c42:	1ac9      	subs	r1, r1, r3
 8008c44:	0c23      	lsrs	r3, r4, #16
 8008c46:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8008c4a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008c4e:	b289      	uxth	r1, r1
 8008c50:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8008c54:	45c8      	cmp	r8, r9
 8008c56:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008c5a:	4694      	mov	ip, r2
 8008c5c:	f845 3b04 	str.w	r3, [r5], #4
 8008c60:	d8e8      	bhi.n	8008c34 <__mdiff+0x5c>
 8008c62:	45bc      	cmp	ip, r7
 8008c64:	d304      	bcc.n	8008c70 <__mdiff+0x98>
 8008c66:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8008c6a:	b183      	cbz	r3, 8008c8e <__mdiff+0xb6>
 8008c6c:	6106      	str	r6, [r0, #16]
 8008c6e:	e7c5      	b.n	8008bfc <__mdiff+0x24>
 8008c70:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008c74:	fa1e f381 	uxtah	r3, lr, r1
 8008c78:	141a      	asrs	r2, r3, #16
 8008c7a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008c7e:	b29b      	uxth	r3, r3
 8008c80:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008c84:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8008c88:	f845 3b04 	str.w	r3, [r5], #4
 8008c8c:	e7e9      	b.n	8008c62 <__mdiff+0x8a>
 8008c8e:	3e01      	subs	r6, #1
 8008c90:	e7e9      	b.n	8008c66 <__mdiff+0x8e>
	...

08008c94 <__ulp>:
 8008c94:	4b12      	ldr	r3, [pc, #72]	; (8008ce0 <__ulp+0x4c>)
 8008c96:	ee10 2a90 	vmov	r2, s1
 8008c9a:	401a      	ands	r2, r3
 8008c9c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	dd04      	ble.n	8008cae <__ulp+0x1a>
 8008ca4:	2000      	movs	r0, #0
 8008ca6:	4619      	mov	r1, r3
 8008ca8:	ec41 0b10 	vmov	d0, r0, r1
 8008cac:	4770      	bx	lr
 8008cae:	425b      	negs	r3, r3
 8008cb0:	151b      	asrs	r3, r3, #20
 8008cb2:	2b13      	cmp	r3, #19
 8008cb4:	f04f 0000 	mov.w	r0, #0
 8008cb8:	f04f 0100 	mov.w	r1, #0
 8008cbc:	dc04      	bgt.n	8008cc8 <__ulp+0x34>
 8008cbe:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8008cc2:	fa42 f103 	asr.w	r1, r2, r3
 8008cc6:	e7ef      	b.n	8008ca8 <__ulp+0x14>
 8008cc8:	3b14      	subs	r3, #20
 8008cca:	2b1e      	cmp	r3, #30
 8008ccc:	f04f 0201 	mov.w	r2, #1
 8008cd0:	bfda      	itte	le
 8008cd2:	f1c3 031f 	rsble	r3, r3, #31
 8008cd6:	fa02 f303 	lslle.w	r3, r2, r3
 8008cda:	4613      	movgt	r3, r2
 8008cdc:	4618      	mov	r0, r3
 8008cde:	e7e3      	b.n	8008ca8 <__ulp+0x14>
 8008ce0:	7ff00000 	.word	0x7ff00000

08008ce4 <__b2d>:
 8008ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ce6:	6905      	ldr	r5, [r0, #16]
 8008ce8:	f100 0714 	add.w	r7, r0, #20
 8008cec:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008cf0:	1f2e      	subs	r6, r5, #4
 8008cf2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8008cf6:	4620      	mov	r0, r4
 8008cf8:	f7ff fdc5 	bl	8008886 <__hi0bits>
 8008cfc:	f1c0 0320 	rsb	r3, r0, #32
 8008d00:	280a      	cmp	r0, #10
 8008d02:	600b      	str	r3, [r1, #0]
 8008d04:	f8df c074 	ldr.w	ip, [pc, #116]	; 8008d7c <__b2d+0x98>
 8008d08:	dc14      	bgt.n	8008d34 <__b2d+0x50>
 8008d0a:	f1c0 0e0b 	rsb	lr, r0, #11
 8008d0e:	fa24 f10e 	lsr.w	r1, r4, lr
 8008d12:	42b7      	cmp	r7, r6
 8008d14:	ea41 030c 	orr.w	r3, r1, ip
 8008d18:	bf34      	ite	cc
 8008d1a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008d1e:	2100      	movcs	r1, #0
 8008d20:	3015      	adds	r0, #21
 8008d22:	fa04 f000 	lsl.w	r0, r4, r0
 8008d26:	fa21 f10e 	lsr.w	r1, r1, lr
 8008d2a:	ea40 0201 	orr.w	r2, r0, r1
 8008d2e:	ec43 2b10 	vmov	d0, r2, r3
 8008d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d34:	42b7      	cmp	r7, r6
 8008d36:	bf3a      	itte	cc
 8008d38:	f1a5 0608 	subcc.w	r6, r5, #8
 8008d3c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008d40:	2100      	movcs	r1, #0
 8008d42:	380b      	subs	r0, #11
 8008d44:	d015      	beq.n	8008d72 <__b2d+0x8e>
 8008d46:	4084      	lsls	r4, r0
 8008d48:	f1c0 0520 	rsb	r5, r0, #32
 8008d4c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8008d50:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8008d54:	42be      	cmp	r6, r7
 8008d56:	fa21 fc05 	lsr.w	ip, r1, r5
 8008d5a:	ea44 030c 	orr.w	r3, r4, ip
 8008d5e:	bf8c      	ite	hi
 8008d60:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8008d64:	2400      	movls	r4, #0
 8008d66:	fa01 f000 	lsl.w	r0, r1, r0
 8008d6a:	40ec      	lsrs	r4, r5
 8008d6c:	ea40 0204 	orr.w	r2, r0, r4
 8008d70:	e7dd      	b.n	8008d2e <__b2d+0x4a>
 8008d72:	ea44 030c 	orr.w	r3, r4, ip
 8008d76:	460a      	mov	r2, r1
 8008d78:	e7d9      	b.n	8008d2e <__b2d+0x4a>
 8008d7a:	bf00      	nop
 8008d7c:	3ff00000 	.word	0x3ff00000

08008d80 <__d2b>:
 8008d80:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008d84:	460e      	mov	r6, r1
 8008d86:	2101      	movs	r1, #1
 8008d88:	ec59 8b10 	vmov	r8, r9, d0
 8008d8c:	4615      	mov	r5, r2
 8008d8e:	f7ff fcb6 	bl	80086fe <_Balloc>
 8008d92:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008d96:	4607      	mov	r7, r0
 8008d98:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008d9c:	bb34      	cbnz	r4, 8008dec <__d2b+0x6c>
 8008d9e:	9301      	str	r3, [sp, #4]
 8008da0:	f1b8 0300 	subs.w	r3, r8, #0
 8008da4:	d027      	beq.n	8008df6 <__d2b+0x76>
 8008da6:	a802      	add	r0, sp, #8
 8008da8:	f840 3d08 	str.w	r3, [r0, #-8]!
 8008dac:	f7ff fd8a 	bl	80088c4 <__lo0bits>
 8008db0:	9900      	ldr	r1, [sp, #0]
 8008db2:	b1f0      	cbz	r0, 8008df2 <__d2b+0x72>
 8008db4:	9a01      	ldr	r2, [sp, #4]
 8008db6:	f1c0 0320 	rsb	r3, r0, #32
 8008dba:	fa02 f303 	lsl.w	r3, r2, r3
 8008dbe:	430b      	orrs	r3, r1
 8008dc0:	40c2      	lsrs	r2, r0
 8008dc2:	617b      	str	r3, [r7, #20]
 8008dc4:	9201      	str	r2, [sp, #4]
 8008dc6:	9b01      	ldr	r3, [sp, #4]
 8008dc8:	61bb      	str	r3, [r7, #24]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	bf14      	ite	ne
 8008dce:	2102      	movne	r1, #2
 8008dd0:	2101      	moveq	r1, #1
 8008dd2:	6139      	str	r1, [r7, #16]
 8008dd4:	b1c4      	cbz	r4, 8008e08 <__d2b+0x88>
 8008dd6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008dda:	4404      	add	r4, r0
 8008ddc:	6034      	str	r4, [r6, #0]
 8008dde:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008de2:	6028      	str	r0, [r5, #0]
 8008de4:	4638      	mov	r0, r7
 8008de6:	b003      	add	sp, #12
 8008de8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008dec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008df0:	e7d5      	b.n	8008d9e <__d2b+0x1e>
 8008df2:	6179      	str	r1, [r7, #20]
 8008df4:	e7e7      	b.n	8008dc6 <__d2b+0x46>
 8008df6:	a801      	add	r0, sp, #4
 8008df8:	f7ff fd64 	bl	80088c4 <__lo0bits>
 8008dfc:	9b01      	ldr	r3, [sp, #4]
 8008dfe:	617b      	str	r3, [r7, #20]
 8008e00:	2101      	movs	r1, #1
 8008e02:	6139      	str	r1, [r7, #16]
 8008e04:	3020      	adds	r0, #32
 8008e06:	e7e5      	b.n	8008dd4 <__d2b+0x54>
 8008e08:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8008e0c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008e10:	6030      	str	r0, [r6, #0]
 8008e12:	6918      	ldr	r0, [r3, #16]
 8008e14:	f7ff fd37 	bl	8008886 <__hi0bits>
 8008e18:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008e1c:	e7e1      	b.n	8008de2 <__d2b+0x62>

08008e1e <__ratio>:
 8008e1e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e22:	4688      	mov	r8, r1
 8008e24:	4669      	mov	r1, sp
 8008e26:	4681      	mov	r9, r0
 8008e28:	f7ff ff5c 	bl	8008ce4 <__b2d>
 8008e2c:	a901      	add	r1, sp, #4
 8008e2e:	4640      	mov	r0, r8
 8008e30:	ec57 6b10 	vmov	r6, r7, d0
 8008e34:	f7ff ff56 	bl	8008ce4 <__b2d>
 8008e38:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008e3c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008e40:	eba3 0c02 	sub.w	ip, r3, r2
 8008e44:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008e48:	1a9b      	subs	r3, r3, r2
 8008e4a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008e4e:	ec5b ab10 	vmov	sl, fp, d0
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	bfce      	itee	gt
 8008e56:	463a      	movgt	r2, r7
 8008e58:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008e5c:	465a      	movle	r2, fp
 8008e5e:	4659      	mov	r1, fp
 8008e60:	463d      	mov	r5, r7
 8008e62:	bfd4      	ite	le
 8008e64:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8008e68:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8008e6c:	4630      	mov	r0, r6
 8008e6e:	ee10 2a10 	vmov	r2, s0
 8008e72:	460b      	mov	r3, r1
 8008e74:	4629      	mov	r1, r5
 8008e76:	f7f7 fd09 	bl	800088c <__aeabi_ddiv>
 8008e7a:	ec41 0b10 	vmov	d0, r0, r1
 8008e7e:	b003      	add	sp, #12
 8008e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008e84 <__copybits>:
 8008e84:	3901      	subs	r1, #1
 8008e86:	b510      	push	{r4, lr}
 8008e88:	1149      	asrs	r1, r1, #5
 8008e8a:	6914      	ldr	r4, [r2, #16]
 8008e8c:	3101      	adds	r1, #1
 8008e8e:	f102 0314 	add.w	r3, r2, #20
 8008e92:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008e96:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008e9a:	42a3      	cmp	r3, r4
 8008e9c:	4602      	mov	r2, r0
 8008e9e:	d303      	bcc.n	8008ea8 <__copybits+0x24>
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	428a      	cmp	r2, r1
 8008ea4:	d305      	bcc.n	8008eb2 <__copybits+0x2e>
 8008ea6:	bd10      	pop	{r4, pc}
 8008ea8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008eac:	f840 2b04 	str.w	r2, [r0], #4
 8008eb0:	e7f3      	b.n	8008e9a <__copybits+0x16>
 8008eb2:	f842 3b04 	str.w	r3, [r2], #4
 8008eb6:	e7f4      	b.n	8008ea2 <__copybits+0x1e>

08008eb8 <__any_on>:
 8008eb8:	f100 0214 	add.w	r2, r0, #20
 8008ebc:	6900      	ldr	r0, [r0, #16]
 8008ebe:	114b      	asrs	r3, r1, #5
 8008ec0:	4298      	cmp	r0, r3
 8008ec2:	b510      	push	{r4, lr}
 8008ec4:	db11      	blt.n	8008eea <__any_on+0x32>
 8008ec6:	dd0a      	ble.n	8008ede <__any_on+0x26>
 8008ec8:	f011 011f 	ands.w	r1, r1, #31
 8008ecc:	d007      	beq.n	8008ede <__any_on+0x26>
 8008ece:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008ed2:	fa24 f001 	lsr.w	r0, r4, r1
 8008ed6:	fa00 f101 	lsl.w	r1, r0, r1
 8008eda:	428c      	cmp	r4, r1
 8008edc:	d10b      	bne.n	8008ef6 <__any_on+0x3e>
 8008ede:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008ee2:	4293      	cmp	r3, r2
 8008ee4:	d803      	bhi.n	8008eee <__any_on+0x36>
 8008ee6:	2000      	movs	r0, #0
 8008ee8:	bd10      	pop	{r4, pc}
 8008eea:	4603      	mov	r3, r0
 8008eec:	e7f7      	b.n	8008ede <__any_on+0x26>
 8008eee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008ef2:	2900      	cmp	r1, #0
 8008ef4:	d0f5      	beq.n	8008ee2 <__any_on+0x2a>
 8008ef6:	2001      	movs	r0, #1
 8008ef8:	e7f6      	b.n	8008ee8 <__any_on+0x30>

08008efa <_calloc_r>:
 8008efa:	b538      	push	{r3, r4, r5, lr}
 8008efc:	fb02 f401 	mul.w	r4, r2, r1
 8008f00:	4621      	mov	r1, r4
 8008f02:	f000 f857 	bl	8008fb4 <_malloc_r>
 8008f06:	4605      	mov	r5, r0
 8008f08:	b118      	cbz	r0, 8008f12 <_calloc_r+0x18>
 8008f0a:	4622      	mov	r2, r4
 8008f0c:	2100      	movs	r1, #0
 8008f0e:	f7fc fd37 	bl	8005980 <memset>
 8008f12:	4628      	mov	r0, r5
 8008f14:	bd38      	pop	{r3, r4, r5, pc}
	...

08008f18 <_free_r>:
 8008f18:	b538      	push	{r3, r4, r5, lr}
 8008f1a:	4605      	mov	r5, r0
 8008f1c:	2900      	cmp	r1, #0
 8008f1e:	d045      	beq.n	8008fac <_free_r+0x94>
 8008f20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f24:	1f0c      	subs	r4, r1, #4
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	bfb8      	it	lt
 8008f2a:	18e4      	addlt	r4, r4, r3
 8008f2c:	f000 fa36 	bl	800939c <__malloc_lock>
 8008f30:	4a1f      	ldr	r2, [pc, #124]	; (8008fb0 <_free_r+0x98>)
 8008f32:	6813      	ldr	r3, [r2, #0]
 8008f34:	4610      	mov	r0, r2
 8008f36:	b933      	cbnz	r3, 8008f46 <_free_r+0x2e>
 8008f38:	6063      	str	r3, [r4, #4]
 8008f3a:	6014      	str	r4, [r2, #0]
 8008f3c:	4628      	mov	r0, r5
 8008f3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f42:	f000 ba2c 	b.w	800939e <__malloc_unlock>
 8008f46:	42a3      	cmp	r3, r4
 8008f48:	d90c      	bls.n	8008f64 <_free_r+0x4c>
 8008f4a:	6821      	ldr	r1, [r4, #0]
 8008f4c:	1862      	adds	r2, r4, r1
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	bf04      	itt	eq
 8008f52:	681a      	ldreq	r2, [r3, #0]
 8008f54:	685b      	ldreq	r3, [r3, #4]
 8008f56:	6063      	str	r3, [r4, #4]
 8008f58:	bf04      	itt	eq
 8008f5a:	1852      	addeq	r2, r2, r1
 8008f5c:	6022      	streq	r2, [r4, #0]
 8008f5e:	6004      	str	r4, [r0, #0]
 8008f60:	e7ec      	b.n	8008f3c <_free_r+0x24>
 8008f62:	4613      	mov	r3, r2
 8008f64:	685a      	ldr	r2, [r3, #4]
 8008f66:	b10a      	cbz	r2, 8008f6c <_free_r+0x54>
 8008f68:	42a2      	cmp	r2, r4
 8008f6a:	d9fa      	bls.n	8008f62 <_free_r+0x4a>
 8008f6c:	6819      	ldr	r1, [r3, #0]
 8008f6e:	1858      	adds	r0, r3, r1
 8008f70:	42a0      	cmp	r0, r4
 8008f72:	d10b      	bne.n	8008f8c <_free_r+0x74>
 8008f74:	6820      	ldr	r0, [r4, #0]
 8008f76:	4401      	add	r1, r0
 8008f78:	1858      	adds	r0, r3, r1
 8008f7a:	4282      	cmp	r2, r0
 8008f7c:	6019      	str	r1, [r3, #0]
 8008f7e:	d1dd      	bne.n	8008f3c <_free_r+0x24>
 8008f80:	6810      	ldr	r0, [r2, #0]
 8008f82:	6852      	ldr	r2, [r2, #4]
 8008f84:	605a      	str	r2, [r3, #4]
 8008f86:	4401      	add	r1, r0
 8008f88:	6019      	str	r1, [r3, #0]
 8008f8a:	e7d7      	b.n	8008f3c <_free_r+0x24>
 8008f8c:	d902      	bls.n	8008f94 <_free_r+0x7c>
 8008f8e:	230c      	movs	r3, #12
 8008f90:	602b      	str	r3, [r5, #0]
 8008f92:	e7d3      	b.n	8008f3c <_free_r+0x24>
 8008f94:	6820      	ldr	r0, [r4, #0]
 8008f96:	1821      	adds	r1, r4, r0
 8008f98:	428a      	cmp	r2, r1
 8008f9a:	bf04      	itt	eq
 8008f9c:	6811      	ldreq	r1, [r2, #0]
 8008f9e:	6852      	ldreq	r2, [r2, #4]
 8008fa0:	6062      	str	r2, [r4, #4]
 8008fa2:	bf04      	itt	eq
 8008fa4:	1809      	addeq	r1, r1, r0
 8008fa6:	6021      	streq	r1, [r4, #0]
 8008fa8:	605c      	str	r4, [r3, #4]
 8008faa:	e7c7      	b.n	8008f3c <_free_r+0x24>
 8008fac:	bd38      	pop	{r3, r4, r5, pc}
 8008fae:	bf00      	nop
 8008fb0:	20000208 	.word	0x20000208

08008fb4 <_malloc_r>:
 8008fb4:	b570      	push	{r4, r5, r6, lr}
 8008fb6:	1ccd      	adds	r5, r1, #3
 8008fb8:	f025 0503 	bic.w	r5, r5, #3
 8008fbc:	3508      	adds	r5, #8
 8008fbe:	2d0c      	cmp	r5, #12
 8008fc0:	bf38      	it	cc
 8008fc2:	250c      	movcc	r5, #12
 8008fc4:	2d00      	cmp	r5, #0
 8008fc6:	4606      	mov	r6, r0
 8008fc8:	db01      	blt.n	8008fce <_malloc_r+0x1a>
 8008fca:	42a9      	cmp	r1, r5
 8008fcc:	d903      	bls.n	8008fd6 <_malloc_r+0x22>
 8008fce:	230c      	movs	r3, #12
 8008fd0:	6033      	str	r3, [r6, #0]
 8008fd2:	2000      	movs	r0, #0
 8008fd4:	bd70      	pop	{r4, r5, r6, pc}
 8008fd6:	f000 f9e1 	bl	800939c <__malloc_lock>
 8008fda:	4a21      	ldr	r2, [pc, #132]	; (8009060 <_malloc_r+0xac>)
 8008fdc:	6814      	ldr	r4, [r2, #0]
 8008fde:	4621      	mov	r1, r4
 8008fe0:	b991      	cbnz	r1, 8009008 <_malloc_r+0x54>
 8008fe2:	4c20      	ldr	r4, [pc, #128]	; (8009064 <_malloc_r+0xb0>)
 8008fe4:	6823      	ldr	r3, [r4, #0]
 8008fe6:	b91b      	cbnz	r3, 8008ff0 <_malloc_r+0x3c>
 8008fe8:	4630      	mov	r0, r6
 8008fea:	f000 f98f 	bl	800930c <_sbrk_r>
 8008fee:	6020      	str	r0, [r4, #0]
 8008ff0:	4629      	mov	r1, r5
 8008ff2:	4630      	mov	r0, r6
 8008ff4:	f000 f98a 	bl	800930c <_sbrk_r>
 8008ff8:	1c43      	adds	r3, r0, #1
 8008ffa:	d124      	bne.n	8009046 <_malloc_r+0x92>
 8008ffc:	230c      	movs	r3, #12
 8008ffe:	6033      	str	r3, [r6, #0]
 8009000:	4630      	mov	r0, r6
 8009002:	f000 f9cc 	bl	800939e <__malloc_unlock>
 8009006:	e7e4      	b.n	8008fd2 <_malloc_r+0x1e>
 8009008:	680b      	ldr	r3, [r1, #0]
 800900a:	1b5b      	subs	r3, r3, r5
 800900c:	d418      	bmi.n	8009040 <_malloc_r+0x8c>
 800900e:	2b0b      	cmp	r3, #11
 8009010:	d90f      	bls.n	8009032 <_malloc_r+0x7e>
 8009012:	600b      	str	r3, [r1, #0]
 8009014:	50cd      	str	r5, [r1, r3]
 8009016:	18cc      	adds	r4, r1, r3
 8009018:	4630      	mov	r0, r6
 800901a:	f000 f9c0 	bl	800939e <__malloc_unlock>
 800901e:	f104 000b 	add.w	r0, r4, #11
 8009022:	1d23      	adds	r3, r4, #4
 8009024:	f020 0007 	bic.w	r0, r0, #7
 8009028:	1ac3      	subs	r3, r0, r3
 800902a:	d0d3      	beq.n	8008fd4 <_malloc_r+0x20>
 800902c:	425a      	negs	r2, r3
 800902e:	50e2      	str	r2, [r4, r3]
 8009030:	e7d0      	b.n	8008fd4 <_malloc_r+0x20>
 8009032:	428c      	cmp	r4, r1
 8009034:	684b      	ldr	r3, [r1, #4]
 8009036:	bf16      	itet	ne
 8009038:	6063      	strne	r3, [r4, #4]
 800903a:	6013      	streq	r3, [r2, #0]
 800903c:	460c      	movne	r4, r1
 800903e:	e7eb      	b.n	8009018 <_malloc_r+0x64>
 8009040:	460c      	mov	r4, r1
 8009042:	6849      	ldr	r1, [r1, #4]
 8009044:	e7cc      	b.n	8008fe0 <_malloc_r+0x2c>
 8009046:	1cc4      	adds	r4, r0, #3
 8009048:	f024 0403 	bic.w	r4, r4, #3
 800904c:	42a0      	cmp	r0, r4
 800904e:	d005      	beq.n	800905c <_malloc_r+0xa8>
 8009050:	1a21      	subs	r1, r4, r0
 8009052:	4630      	mov	r0, r6
 8009054:	f000 f95a 	bl	800930c <_sbrk_r>
 8009058:	3001      	adds	r0, #1
 800905a:	d0cf      	beq.n	8008ffc <_malloc_r+0x48>
 800905c:	6025      	str	r5, [r4, #0]
 800905e:	e7db      	b.n	8009018 <_malloc_r+0x64>
 8009060:	20000208 	.word	0x20000208
 8009064:	2000020c 	.word	0x2000020c

08009068 <__ssputs_r>:
 8009068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800906c:	688e      	ldr	r6, [r1, #8]
 800906e:	429e      	cmp	r6, r3
 8009070:	4682      	mov	sl, r0
 8009072:	460c      	mov	r4, r1
 8009074:	4690      	mov	r8, r2
 8009076:	4699      	mov	r9, r3
 8009078:	d837      	bhi.n	80090ea <__ssputs_r+0x82>
 800907a:	898a      	ldrh	r2, [r1, #12]
 800907c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009080:	d031      	beq.n	80090e6 <__ssputs_r+0x7e>
 8009082:	6825      	ldr	r5, [r4, #0]
 8009084:	6909      	ldr	r1, [r1, #16]
 8009086:	1a6f      	subs	r7, r5, r1
 8009088:	6965      	ldr	r5, [r4, #20]
 800908a:	2302      	movs	r3, #2
 800908c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009090:	fb95 f5f3 	sdiv	r5, r5, r3
 8009094:	f109 0301 	add.w	r3, r9, #1
 8009098:	443b      	add	r3, r7
 800909a:	429d      	cmp	r5, r3
 800909c:	bf38      	it	cc
 800909e:	461d      	movcc	r5, r3
 80090a0:	0553      	lsls	r3, r2, #21
 80090a2:	d530      	bpl.n	8009106 <__ssputs_r+0x9e>
 80090a4:	4629      	mov	r1, r5
 80090a6:	f7ff ff85 	bl	8008fb4 <_malloc_r>
 80090aa:	4606      	mov	r6, r0
 80090ac:	b950      	cbnz	r0, 80090c4 <__ssputs_r+0x5c>
 80090ae:	230c      	movs	r3, #12
 80090b0:	f8ca 3000 	str.w	r3, [sl]
 80090b4:	89a3      	ldrh	r3, [r4, #12]
 80090b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090ba:	81a3      	strh	r3, [r4, #12]
 80090bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80090c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090c4:	463a      	mov	r2, r7
 80090c6:	6921      	ldr	r1, [r4, #16]
 80090c8:	f7ff fb0e 	bl	80086e8 <memcpy>
 80090cc:	89a3      	ldrh	r3, [r4, #12]
 80090ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80090d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090d6:	81a3      	strh	r3, [r4, #12]
 80090d8:	6126      	str	r6, [r4, #16]
 80090da:	6165      	str	r5, [r4, #20]
 80090dc:	443e      	add	r6, r7
 80090de:	1bed      	subs	r5, r5, r7
 80090e0:	6026      	str	r6, [r4, #0]
 80090e2:	60a5      	str	r5, [r4, #8]
 80090e4:	464e      	mov	r6, r9
 80090e6:	454e      	cmp	r6, r9
 80090e8:	d900      	bls.n	80090ec <__ssputs_r+0x84>
 80090ea:	464e      	mov	r6, r9
 80090ec:	4632      	mov	r2, r6
 80090ee:	4641      	mov	r1, r8
 80090f0:	6820      	ldr	r0, [r4, #0]
 80090f2:	f000 f93a 	bl	800936a <memmove>
 80090f6:	68a3      	ldr	r3, [r4, #8]
 80090f8:	1b9b      	subs	r3, r3, r6
 80090fa:	60a3      	str	r3, [r4, #8]
 80090fc:	6823      	ldr	r3, [r4, #0]
 80090fe:	441e      	add	r6, r3
 8009100:	6026      	str	r6, [r4, #0]
 8009102:	2000      	movs	r0, #0
 8009104:	e7dc      	b.n	80090c0 <__ssputs_r+0x58>
 8009106:	462a      	mov	r2, r5
 8009108:	f000 f94a 	bl	80093a0 <_realloc_r>
 800910c:	4606      	mov	r6, r0
 800910e:	2800      	cmp	r0, #0
 8009110:	d1e2      	bne.n	80090d8 <__ssputs_r+0x70>
 8009112:	6921      	ldr	r1, [r4, #16]
 8009114:	4650      	mov	r0, sl
 8009116:	f7ff feff 	bl	8008f18 <_free_r>
 800911a:	e7c8      	b.n	80090ae <__ssputs_r+0x46>

0800911c <_svfiprintf_r>:
 800911c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009120:	461d      	mov	r5, r3
 8009122:	898b      	ldrh	r3, [r1, #12]
 8009124:	061f      	lsls	r7, r3, #24
 8009126:	b09d      	sub	sp, #116	; 0x74
 8009128:	4680      	mov	r8, r0
 800912a:	460c      	mov	r4, r1
 800912c:	4616      	mov	r6, r2
 800912e:	d50f      	bpl.n	8009150 <_svfiprintf_r+0x34>
 8009130:	690b      	ldr	r3, [r1, #16]
 8009132:	b96b      	cbnz	r3, 8009150 <_svfiprintf_r+0x34>
 8009134:	2140      	movs	r1, #64	; 0x40
 8009136:	f7ff ff3d 	bl	8008fb4 <_malloc_r>
 800913a:	6020      	str	r0, [r4, #0]
 800913c:	6120      	str	r0, [r4, #16]
 800913e:	b928      	cbnz	r0, 800914c <_svfiprintf_r+0x30>
 8009140:	230c      	movs	r3, #12
 8009142:	f8c8 3000 	str.w	r3, [r8]
 8009146:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800914a:	e0c8      	b.n	80092de <_svfiprintf_r+0x1c2>
 800914c:	2340      	movs	r3, #64	; 0x40
 800914e:	6163      	str	r3, [r4, #20]
 8009150:	2300      	movs	r3, #0
 8009152:	9309      	str	r3, [sp, #36]	; 0x24
 8009154:	2320      	movs	r3, #32
 8009156:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800915a:	2330      	movs	r3, #48	; 0x30
 800915c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009160:	9503      	str	r5, [sp, #12]
 8009162:	f04f 0b01 	mov.w	fp, #1
 8009166:	4637      	mov	r7, r6
 8009168:	463d      	mov	r5, r7
 800916a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800916e:	b10b      	cbz	r3, 8009174 <_svfiprintf_r+0x58>
 8009170:	2b25      	cmp	r3, #37	; 0x25
 8009172:	d13e      	bne.n	80091f2 <_svfiprintf_r+0xd6>
 8009174:	ebb7 0a06 	subs.w	sl, r7, r6
 8009178:	d00b      	beq.n	8009192 <_svfiprintf_r+0x76>
 800917a:	4653      	mov	r3, sl
 800917c:	4632      	mov	r2, r6
 800917e:	4621      	mov	r1, r4
 8009180:	4640      	mov	r0, r8
 8009182:	f7ff ff71 	bl	8009068 <__ssputs_r>
 8009186:	3001      	adds	r0, #1
 8009188:	f000 80a4 	beq.w	80092d4 <_svfiprintf_r+0x1b8>
 800918c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800918e:	4453      	add	r3, sl
 8009190:	9309      	str	r3, [sp, #36]	; 0x24
 8009192:	783b      	ldrb	r3, [r7, #0]
 8009194:	2b00      	cmp	r3, #0
 8009196:	f000 809d 	beq.w	80092d4 <_svfiprintf_r+0x1b8>
 800919a:	2300      	movs	r3, #0
 800919c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80091a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80091a4:	9304      	str	r3, [sp, #16]
 80091a6:	9307      	str	r3, [sp, #28]
 80091a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80091ac:	931a      	str	r3, [sp, #104]	; 0x68
 80091ae:	462f      	mov	r7, r5
 80091b0:	2205      	movs	r2, #5
 80091b2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80091b6:	4850      	ldr	r0, [pc, #320]	; (80092f8 <_svfiprintf_r+0x1dc>)
 80091b8:	f7f7 f832 	bl	8000220 <memchr>
 80091bc:	9b04      	ldr	r3, [sp, #16]
 80091be:	b9d0      	cbnz	r0, 80091f6 <_svfiprintf_r+0xda>
 80091c0:	06d9      	lsls	r1, r3, #27
 80091c2:	bf44      	itt	mi
 80091c4:	2220      	movmi	r2, #32
 80091c6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80091ca:	071a      	lsls	r2, r3, #28
 80091cc:	bf44      	itt	mi
 80091ce:	222b      	movmi	r2, #43	; 0x2b
 80091d0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80091d4:	782a      	ldrb	r2, [r5, #0]
 80091d6:	2a2a      	cmp	r2, #42	; 0x2a
 80091d8:	d015      	beq.n	8009206 <_svfiprintf_r+0xea>
 80091da:	9a07      	ldr	r2, [sp, #28]
 80091dc:	462f      	mov	r7, r5
 80091de:	2000      	movs	r0, #0
 80091e0:	250a      	movs	r5, #10
 80091e2:	4639      	mov	r1, r7
 80091e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80091e8:	3b30      	subs	r3, #48	; 0x30
 80091ea:	2b09      	cmp	r3, #9
 80091ec:	d94d      	bls.n	800928a <_svfiprintf_r+0x16e>
 80091ee:	b1b8      	cbz	r0, 8009220 <_svfiprintf_r+0x104>
 80091f0:	e00f      	b.n	8009212 <_svfiprintf_r+0xf6>
 80091f2:	462f      	mov	r7, r5
 80091f4:	e7b8      	b.n	8009168 <_svfiprintf_r+0x4c>
 80091f6:	4a40      	ldr	r2, [pc, #256]	; (80092f8 <_svfiprintf_r+0x1dc>)
 80091f8:	1a80      	subs	r0, r0, r2
 80091fa:	fa0b f000 	lsl.w	r0, fp, r0
 80091fe:	4318      	orrs	r0, r3
 8009200:	9004      	str	r0, [sp, #16]
 8009202:	463d      	mov	r5, r7
 8009204:	e7d3      	b.n	80091ae <_svfiprintf_r+0x92>
 8009206:	9a03      	ldr	r2, [sp, #12]
 8009208:	1d11      	adds	r1, r2, #4
 800920a:	6812      	ldr	r2, [r2, #0]
 800920c:	9103      	str	r1, [sp, #12]
 800920e:	2a00      	cmp	r2, #0
 8009210:	db01      	blt.n	8009216 <_svfiprintf_r+0xfa>
 8009212:	9207      	str	r2, [sp, #28]
 8009214:	e004      	b.n	8009220 <_svfiprintf_r+0x104>
 8009216:	4252      	negs	r2, r2
 8009218:	f043 0302 	orr.w	r3, r3, #2
 800921c:	9207      	str	r2, [sp, #28]
 800921e:	9304      	str	r3, [sp, #16]
 8009220:	783b      	ldrb	r3, [r7, #0]
 8009222:	2b2e      	cmp	r3, #46	; 0x2e
 8009224:	d10c      	bne.n	8009240 <_svfiprintf_r+0x124>
 8009226:	787b      	ldrb	r3, [r7, #1]
 8009228:	2b2a      	cmp	r3, #42	; 0x2a
 800922a:	d133      	bne.n	8009294 <_svfiprintf_r+0x178>
 800922c:	9b03      	ldr	r3, [sp, #12]
 800922e:	1d1a      	adds	r2, r3, #4
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	9203      	str	r2, [sp, #12]
 8009234:	2b00      	cmp	r3, #0
 8009236:	bfb8      	it	lt
 8009238:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800923c:	3702      	adds	r7, #2
 800923e:	9305      	str	r3, [sp, #20]
 8009240:	4d2e      	ldr	r5, [pc, #184]	; (80092fc <_svfiprintf_r+0x1e0>)
 8009242:	7839      	ldrb	r1, [r7, #0]
 8009244:	2203      	movs	r2, #3
 8009246:	4628      	mov	r0, r5
 8009248:	f7f6 ffea 	bl	8000220 <memchr>
 800924c:	b138      	cbz	r0, 800925e <_svfiprintf_r+0x142>
 800924e:	2340      	movs	r3, #64	; 0x40
 8009250:	1b40      	subs	r0, r0, r5
 8009252:	fa03 f000 	lsl.w	r0, r3, r0
 8009256:	9b04      	ldr	r3, [sp, #16]
 8009258:	4303      	orrs	r3, r0
 800925a:	3701      	adds	r7, #1
 800925c:	9304      	str	r3, [sp, #16]
 800925e:	7839      	ldrb	r1, [r7, #0]
 8009260:	4827      	ldr	r0, [pc, #156]	; (8009300 <_svfiprintf_r+0x1e4>)
 8009262:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009266:	2206      	movs	r2, #6
 8009268:	1c7e      	adds	r6, r7, #1
 800926a:	f7f6 ffd9 	bl	8000220 <memchr>
 800926e:	2800      	cmp	r0, #0
 8009270:	d038      	beq.n	80092e4 <_svfiprintf_r+0x1c8>
 8009272:	4b24      	ldr	r3, [pc, #144]	; (8009304 <_svfiprintf_r+0x1e8>)
 8009274:	bb13      	cbnz	r3, 80092bc <_svfiprintf_r+0x1a0>
 8009276:	9b03      	ldr	r3, [sp, #12]
 8009278:	3307      	adds	r3, #7
 800927a:	f023 0307 	bic.w	r3, r3, #7
 800927e:	3308      	adds	r3, #8
 8009280:	9303      	str	r3, [sp, #12]
 8009282:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009284:	444b      	add	r3, r9
 8009286:	9309      	str	r3, [sp, #36]	; 0x24
 8009288:	e76d      	b.n	8009166 <_svfiprintf_r+0x4a>
 800928a:	fb05 3202 	mla	r2, r5, r2, r3
 800928e:	2001      	movs	r0, #1
 8009290:	460f      	mov	r7, r1
 8009292:	e7a6      	b.n	80091e2 <_svfiprintf_r+0xc6>
 8009294:	2300      	movs	r3, #0
 8009296:	3701      	adds	r7, #1
 8009298:	9305      	str	r3, [sp, #20]
 800929a:	4619      	mov	r1, r3
 800929c:	250a      	movs	r5, #10
 800929e:	4638      	mov	r0, r7
 80092a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092a4:	3a30      	subs	r2, #48	; 0x30
 80092a6:	2a09      	cmp	r2, #9
 80092a8:	d903      	bls.n	80092b2 <_svfiprintf_r+0x196>
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d0c8      	beq.n	8009240 <_svfiprintf_r+0x124>
 80092ae:	9105      	str	r1, [sp, #20]
 80092b0:	e7c6      	b.n	8009240 <_svfiprintf_r+0x124>
 80092b2:	fb05 2101 	mla	r1, r5, r1, r2
 80092b6:	2301      	movs	r3, #1
 80092b8:	4607      	mov	r7, r0
 80092ba:	e7f0      	b.n	800929e <_svfiprintf_r+0x182>
 80092bc:	ab03      	add	r3, sp, #12
 80092be:	9300      	str	r3, [sp, #0]
 80092c0:	4622      	mov	r2, r4
 80092c2:	4b11      	ldr	r3, [pc, #68]	; (8009308 <_svfiprintf_r+0x1ec>)
 80092c4:	a904      	add	r1, sp, #16
 80092c6:	4640      	mov	r0, r8
 80092c8:	f7fc fbf6 	bl	8005ab8 <_printf_float>
 80092cc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80092d0:	4681      	mov	r9, r0
 80092d2:	d1d6      	bne.n	8009282 <_svfiprintf_r+0x166>
 80092d4:	89a3      	ldrh	r3, [r4, #12]
 80092d6:	065b      	lsls	r3, r3, #25
 80092d8:	f53f af35 	bmi.w	8009146 <_svfiprintf_r+0x2a>
 80092dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80092de:	b01d      	add	sp, #116	; 0x74
 80092e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092e4:	ab03      	add	r3, sp, #12
 80092e6:	9300      	str	r3, [sp, #0]
 80092e8:	4622      	mov	r2, r4
 80092ea:	4b07      	ldr	r3, [pc, #28]	; (8009308 <_svfiprintf_r+0x1ec>)
 80092ec:	a904      	add	r1, sp, #16
 80092ee:	4640      	mov	r0, r8
 80092f0:	f7fc fe98 	bl	8006024 <_printf_i>
 80092f4:	e7ea      	b.n	80092cc <_svfiprintf_r+0x1b0>
 80092f6:	bf00      	nop
 80092f8:	080095f4 	.word	0x080095f4
 80092fc:	080095fa 	.word	0x080095fa
 8009300:	080095fe 	.word	0x080095fe
 8009304:	08005ab9 	.word	0x08005ab9
 8009308:	08009069 	.word	0x08009069

0800930c <_sbrk_r>:
 800930c:	b538      	push	{r3, r4, r5, lr}
 800930e:	4c06      	ldr	r4, [pc, #24]	; (8009328 <_sbrk_r+0x1c>)
 8009310:	2300      	movs	r3, #0
 8009312:	4605      	mov	r5, r0
 8009314:	4608      	mov	r0, r1
 8009316:	6023      	str	r3, [r4, #0]
 8009318:	f7f8 ff2a 	bl	8002170 <_sbrk>
 800931c:	1c43      	adds	r3, r0, #1
 800931e:	d102      	bne.n	8009326 <_sbrk_r+0x1a>
 8009320:	6823      	ldr	r3, [r4, #0]
 8009322:	b103      	cbz	r3, 8009326 <_sbrk_r+0x1a>
 8009324:	602b      	str	r3, [r5, #0]
 8009326:	bd38      	pop	{r3, r4, r5, pc}
 8009328:	20000300 	.word	0x20000300

0800932c <strncmp>:
 800932c:	b510      	push	{r4, lr}
 800932e:	b16a      	cbz	r2, 800934c <strncmp+0x20>
 8009330:	3901      	subs	r1, #1
 8009332:	1884      	adds	r4, r0, r2
 8009334:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009338:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800933c:	4293      	cmp	r3, r2
 800933e:	d103      	bne.n	8009348 <strncmp+0x1c>
 8009340:	42a0      	cmp	r0, r4
 8009342:	d001      	beq.n	8009348 <strncmp+0x1c>
 8009344:	2b00      	cmp	r3, #0
 8009346:	d1f5      	bne.n	8009334 <strncmp+0x8>
 8009348:	1a98      	subs	r0, r3, r2
 800934a:	bd10      	pop	{r4, pc}
 800934c:	4610      	mov	r0, r2
 800934e:	e7fc      	b.n	800934a <strncmp+0x1e>

08009350 <__ascii_wctomb>:
 8009350:	b149      	cbz	r1, 8009366 <__ascii_wctomb+0x16>
 8009352:	2aff      	cmp	r2, #255	; 0xff
 8009354:	bf85      	ittet	hi
 8009356:	238a      	movhi	r3, #138	; 0x8a
 8009358:	6003      	strhi	r3, [r0, #0]
 800935a:	700a      	strbls	r2, [r1, #0]
 800935c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8009360:	bf98      	it	ls
 8009362:	2001      	movls	r0, #1
 8009364:	4770      	bx	lr
 8009366:	4608      	mov	r0, r1
 8009368:	4770      	bx	lr

0800936a <memmove>:
 800936a:	4288      	cmp	r0, r1
 800936c:	b510      	push	{r4, lr}
 800936e:	eb01 0302 	add.w	r3, r1, r2
 8009372:	d807      	bhi.n	8009384 <memmove+0x1a>
 8009374:	1e42      	subs	r2, r0, #1
 8009376:	4299      	cmp	r1, r3
 8009378:	d00a      	beq.n	8009390 <memmove+0x26>
 800937a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800937e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009382:	e7f8      	b.n	8009376 <memmove+0xc>
 8009384:	4283      	cmp	r3, r0
 8009386:	d9f5      	bls.n	8009374 <memmove+0xa>
 8009388:	1881      	adds	r1, r0, r2
 800938a:	1ad2      	subs	r2, r2, r3
 800938c:	42d3      	cmn	r3, r2
 800938e:	d100      	bne.n	8009392 <memmove+0x28>
 8009390:	bd10      	pop	{r4, pc}
 8009392:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009396:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800939a:	e7f7      	b.n	800938c <memmove+0x22>

0800939c <__malloc_lock>:
 800939c:	4770      	bx	lr

0800939e <__malloc_unlock>:
 800939e:	4770      	bx	lr

080093a0 <_realloc_r>:
 80093a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093a2:	4607      	mov	r7, r0
 80093a4:	4614      	mov	r4, r2
 80093a6:	460e      	mov	r6, r1
 80093a8:	b921      	cbnz	r1, 80093b4 <_realloc_r+0x14>
 80093aa:	4611      	mov	r1, r2
 80093ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80093b0:	f7ff be00 	b.w	8008fb4 <_malloc_r>
 80093b4:	b922      	cbnz	r2, 80093c0 <_realloc_r+0x20>
 80093b6:	f7ff fdaf 	bl	8008f18 <_free_r>
 80093ba:	4625      	mov	r5, r4
 80093bc:	4628      	mov	r0, r5
 80093be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093c0:	f000 f814 	bl	80093ec <_malloc_usable_size_r>
 80093c4:	42a0      	cmp	r0, r4
 80093c6:	d20f      	bcs.n	80093e8 <_realloc_r+0x48>
 80093c8:	4621      	mov	r1, r4
 80093ca:	4638      	mov	r0, r7
 80093cc:	f7ff fdf2 	bl	8008fb4 <_malloc_r>
 80093d0:	4605      	mov	r5, r0
 80093d2:	2800      	cmp	r0, #0
 80093d4:	d0f2      	beq.n	80093bc <_realloc_r+0x1c>
 80093d6:	4631      	mov	r1, r6
 80093d8:	4622      	mov	r2, r4
 80093da:	f7ff f985 	bl	80086e8 <memcpy>
 80093de:	4631      	mov	r1, r6
 80093e0:	4638      	mov	r0, r7
 80093e2:	f7ff fd99 	bl	8008f18 <_free_r>
 80093e6:	e7e9      	b.n	80093bc <_realloc_r+0x1c>
 80093e8:	4635      	mov	r5, r6
 80093ea:	e7e7      	b.n	80093bc <_realloc_r+0x1c>

080093ec <_malloc_usable_size_r>:
 80093ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093f0:	1f18      	subs	r0, r3, #4
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	bfbc      	itt	lt
 80093f6:	580b      	ldrlt	r3, [r1, r0]
 80093f8:	18c0      	addlt	r0, r0, r3
 80093fa:	4770      	bx	lr

080093fc <_init>:
 80093fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093fe:	bf00      	nop
 8009400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009402:	bc08      	pop	{r3}
 8009404:	469e      	mov	lr, r3
 8009406:	4770      	bx	lr

08009408 <_fini>:
 8009408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800940a:	bf00      	nop
 800940c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800940e:	bc08      	pop	{r3}
 8009410:	469e      	mov	lr, r3
 8009412:	4770      	bx	lr
